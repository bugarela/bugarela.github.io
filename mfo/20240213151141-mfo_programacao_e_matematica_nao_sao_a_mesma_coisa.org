:PROPERTIES:
:ID:       d589a970-b4f7-455d-8e5c-9fcd12182eb8
:END:
#+title:     Programação e matemática não são a mesma coisa
#+AUTHOR:    Gabriela Moreira
#+EMAIL:     gabrielamoreira05@gmail.com
#+DATE:      28 de fevereiro de 2024
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+BEAMER_FRAME_LEVEL: 2
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+BEAMER_THEME: udesc
#+BEAMER_HEADER: \input{header.tex} \subtitle{Aula para disciplina de Métodos Formais} \institute{Departamento de Ciência da Computação - DCC\\Universidade do Estado de Santa Catarina - UDESC}
#+LATEX_COMPILER: pdflatex
#+bibliography: references.bib
#+cite_export: csl ~/MEGA/csl/associacao-brasileira-de-normas-tecnicas.csl

#+begin_src elisp :exports none
(setq org-ref-default-citation-link "citeauthor")
#+end_src

#+HTML: <a href="https://bugarela.com/mfo/slides/20240213151141-mfo_programacao_e_matematica_nao_sao_a_mesma_coisa.pdf">Slides</a>
#+beamer: \begin{frame}{Conteúdo}
#+TOC: headlines 3
#+beamer: \end{frame}

* Introdução
** Essa aula não é sobre
Essa aula não é sobre:
- "Precisa saber matemática pra programar?"
- "Quem tem base matemática programa melhor?"

#+BEAMER: \medskip
... que muitas vezes são derivados de "precisa ter faculdade pra trabalhar com programação?"

#+BEAMER: \medskip
#+BEAMER: \pause

Vocês estão cursando Ciência da Computação, então independente disso tudo, vão sim aprender uma base lógica/matemática.

** Essa aula é sobre

Como matemática e programação se relacionam, e a importância de entender as diferenças.

*** Métodos Formais são sobre matemática ou sobre programação?
#+BEAMER: \pause

Vamos trabalhar com ambos no mesmo ambiente, e o domínio sobre quando usar uma perspectiva ou outra é a principal habilidade para se escrever uma boa *especificação formal*.

#+BEAMER: \medskip
No geral, nós, programadores, tendemos à *perspectiva da programação*, e precisamos nos esforçar para descrever algumas coisas na *perspectiva matemática*.

#+BEAMER: \medskip
Para isso, primeiro precisamos entender as semelhanças e diferenças

* Correspondências interessantes
** Correspondências interessantes - está tudo interligado!
- Em 1930, Church e Turing provam, de forma independente, que o problema Entscheidungsproblem não pode ser resolvido
  - Church criando o cálculo lambda
  - Turing criando as máquinas de Turing
  - São equivalentes!

** Linguagem universal
- [cite:@propositions-as-types] E se mandássemos cálculo lambda para os alienígenas? Seriam eles capazes de compreender?

#+ATTR_HTML: :width 600px :center nil
#+ATTR_LATEX: :width 0.6\textwidth
 [[./figures/pioneer-plaque.png]]


** Isomorfismo de Curry-Howard
:PROPERTIES:
:BEAMER_opt: allowframebreaks=0.7,label=
:END:
- Proposições como tipos
- Provas como programas
- Simplificação de provas como avaliação de programas

| Lógica         | Tipos        |
|----------------+--------------|
| Falso          | =Void=       |
| Verdadeiro     | =()=         |
| $a \lor b$     | =Either a b= |
| $a \land b$    | =(a,b)=      |
| $a \implies b$ | =a -> b=     |


Exemplo: implicação e abstração + aplicação
#+ATTR_LATEX: :environment longtable :align c|c
| Lógica                                                                                                                                             | Tipos                                                                                                                          |
|----------------------------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|
| ${\displaystyle {\frac {}{\Gamma _{1},\alpha ,\Gamma _{2}\vdash \alpha }}{\text{Ax}}} \rule{0pt}{4ex}$                                             | ${\displaystyle {\frac {}{\Gamma _{1},x:\alpha ,\Gamma _{2}\vdash x:\alpha }}}$                                                |
| ${\displaystyle {\frac {\Gamma ,\alpha \vdash \beta }{\Gamma \vdash \alpha \rightarrow \beta }}\rightarrow I} \rule{0pt}{8ex}$                     | ${\displaystyle {\frac {\Gamma ,x:\alpha \vdash t:\beta }{\Gamma \vdash \lambda x.t:\alpha \rightarrow \beta }}}$              |
| ${\displaystyle {\frac {\Gamma \vdash \alpha \rightarrow \beta \qquad \Gamma \vdash \alpha }{\Gamma \vdash \beta }}\rightarrow E} \rule{0pt}{8ex}$ | ${\displaystyle {\frac {\Gamma \vdash t:\alpha \rightarrow \beta \qquad \Gamma \vdash u:\alpha }{\Gamma \vdash t\;u:\beta }}}$ |

** Interpretação algébrica para tipos
- A teoria das categorias define um nível ainda mais alto de abstração para enxergar algumas coisas. Um dos exemplos mais simples de uma categoria é a categoria dos conjuntos (e das funções entre eles) [cite:@ufabc-tipo-funcao].
- As chamadas categorias cartesianas fechadas podem ser relacionadas a nossa álgebra de ensino médio
  - A categoria dos tipos é uma delas!

| Lógica         | Tipos        | Álgebra |
|----------------+--------------+---------|
| Falso          | =Void=       | $0$     |
| Verdadeiro     | =()=         | $1$     |
| $a \lor b$     | =Either a b= | $a + b$ |
| $a \land b$    | =(a,b)=      | $a * b$ |
| $a \implies b$ | =a -> b=     | $b^a$   |

** Exponenciação como tipos de funções I
# https://haskell.pesquisa.ufabc.edu.br/teoria-das-categorias/09-tipofuncao/
Vamos escrever tipos função (=a -> b=) como operações de exponenciação da álgebra:
  #+BEAMER: \pause
- $a^0 = 1$ tem assinatura =Void -> a=. Apenas uma função tem essa assinatura (em Haskell, =absurd=)
  #+BEAMER: \pause
- $a^1 = a$ tem assinatura =() -> a=. O número de funções com esse tipo é o mesmo número de valores do tipo =a=.
  - Por exemplo, pra =a= sendo =bool=, temos =f x = false= e =f x = true=
  #+BEAMER: \pause
- $1^a = 1$ tem assinatura =a -> ()=. Apenas uma função tem essa assinatura (=f x = ()=)
  #+BEAMER: \end{itemize}
  #+BEAMER: \end{frame}
  #+BEAMER: \begin{frame}{Exponenciação como tipos de funções II}
  #+BEAMER: \begin{itemize}
- $a^{b+c}$ tem assinatura =Either b c -> a=
  - Para isso, temos que definir os casos =Left= com tipo =b -> a= e =Right= com tipo =c -> a=
  - Ou seja, $a^{b + c} = a^b * a^c$
  #+BEAMER: \pause
- $(a^b)^c$ tem assinatura =c -> (b -> a)=
  - Lembrando de currying, sabemos que isso é equivalente a =(c,b) -> a=.
  - Ou seja, $(a^b)^c = a^{(b*c)}$
  #+BEAMER: \pause
- $(a*b)^c$ tem assinatura =c -> (a, b)=
  - Equivalente a um par de funções =c -> a= e =c -> b=
  - Ou seja, $(a*b)^c = a^c * b^c$

** Funções parciais

Agora, um caso mais tangível para voltarmos um pouco para a nossa realidade.
- Na matemática, funções podem ser totais ou parciais
  - Para transformar funções parciais em totais, adicionamos o valor bottom ($\bot$) ao co-domínio e mapeamos todos os valores anteriormente indefinidos ao bottom.
- Na computação, funções parciais precisam retornar o tipo soma. Dependendo da linguagem, pode ser algo como:
  - =f(x: int): int | undefined=
  - =int -> Maybe int=

* Diferenças importantes
** Erros vs indefinições
- Na matemática, algumas fórmulas são indefinidas.
  - Divisão não está definida para denominador $0$
  - Exponenciação não está definida para $0^0$

- Na programação, precisamos *definir* o que acontece nesses cenários
  - Normalmente, o que queremos é reportar algum tipo de erro
  - Programação envolve humanos. Humanos erram e precisam entender aonde erraram.
    - "Opa, você tentou dividir por 0 na linha X coluna Y" - pode salvar alguém de horas de debugging

** Funções vs =Maps=
Funções matemáticas podem ser programadas através de funções ou =Maps= [cite:@igor-memory]. Pense nos exemplos
1. Função de um número para seu dobro.
2. Função do nome da pessoa para sua idade.

#+BEAMER: \pause
#+BEAMER: \medskip
Na programação, vamos considerar os fatores
- Uso de Memória
- Velocidade de resposta

#+BEAMER: \pause
#+BEAMER: \medskip
Numa especificação formal, memória e velocidade não importam da mesma forma

** Implementação vs definição
Imagine a seguinte definição:
- Dada uma função que ordena uma lista de inteiros

#+BEAMER: \medskip
O que você pensou sobre essa função?
#+BEAMER: \pause

Bem possível que pensou em um ou mais algoritmos de ordenação (i.e. bubble sort, selection sort, quick sort)
#+BEAMER: \pause

#+BEAMER: \medskip
Na matemática, não importa *como* a ordenação é feita. A função em questão poderia ser descrita mais precisamente por:
- Seja $f: \overline{\mathbb{Z}} \rightarrow \overline{\mathbb{Z}}$ tal que $f(x)_i \leq f(x)_{i+1}$ para todo $i \in [0, |x|-1)$

#+BEAMER: \pause
#+BEAMER: \medskip
Numa especificação formal, se não há relevância no algoritmo de ordenação (contanto que ele, de fato, ordene), podemos economizar recursos na verificação ao especificar somente a propriedade de ordenação.

** Em resumo
- Matemática e programação estão muito interligados
- Contudo, há diferenças nos níveis de abstração entre o que costumamos descrever em definições matemáticas e em programas.
  - Em programas, nos importamos com memória e velocidade, o que normalmente não é representado na matemática.
  - Em programas, precisamos detalhar *como* cada função é implementada, enquanto na matemática podemos somente definir funções pelas suas propriedades.
    - Inclusive, precisamos detalhar o que acontece em casos indefinidos pela matemática, como divisão por 0.

** Referências
#+print_bibliography:

#+beamer: \end{frame} \maketitle
