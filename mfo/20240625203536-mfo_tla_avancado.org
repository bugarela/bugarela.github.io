:PROPERTIES:
:ID:       21d58ac6-a45f-4110-816e-b62ac47bdf27
:END:
#+title:     TLA+ avançado
#+EMAIL:     gabrielamoreira05@gmail.com
#+DATE:      02 de julho de 2025
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+BEAMER_FRAME_LEVEL: 2
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+BEAMER_THEME: udesc
#+BEAMER_HEADER: \input{header.tex} \subtitle{Aula para disciplina de Métodos Formais} \institute{Departamento de Ciência da Computação - DCC\\Universidade do Estado de Santa Catarina - UDESC}
#+LATEX_COMPILER: pdflatex
#+bibliography: references.bib
#+cite_export: csl ~/MEGA/csl/associacao-brasileira-de-normas-tecnicas.csl
#+HTML: <a href="https://bugarela.com/mfo/slides/20240625203536-mfo_tla_avancado.pdf">Slides</a><br />
#+beamer: \begin{frame}{Conteúdo}
#+TOC: headlines 3
#+beamer: \end{frame}

* Model Values
** Model values
Segundo a documentação em [cite:@inria-model-values]:
- Podem ser usados quando vamos definir os valores de uma constante
#+BEAMER: \pause
- Ao invés de indentificar processos, semáforos, etc por identificadores com ={1, 2, 3}= ou ={"p1", "p2", "p3"}=, podemos model values: ={p1, p2, p3}= (sem aspas).
#+BEAMER: \pause\medskip

Um /model value/ e um valor não especificado que o /model checker/ considera diferente de qualquer outro valor que possa ser expressado:
- =p1 = p1=
- =p1 # p2=
- =p1 # 1=
- =p1 # "p1"=

** Model values - pra que serve?
 Evitar erros:
 #+BEAMER: \pause
 - operações não intencionais sobre os identificadores, i.e. =p + 1=
 #+BEAMER: \pause
 - evitar erros de digitação em strings (assim como tipos soma em quint)
 #+BEAMER: \pause\medskip

 Mesmo no TLC, existe possibilidade de dar tipos para esses valores adicionando uma letra e =_= no começo:
 - =P_1=, =P_2=, ...
 - =a_1=, =a_2=, ...
 #+BEAMER: \pause
 Dessa forma, o TLC reporta um erro quando comparamos /model values/ de tipos diferentes (como se estivéssemos comparando =1= e ="a"=):
 - =P_1 = P_2= resulta em =FALSE=
 - =P_1 = a_1= resulta em erro em runtime

* Conjuntos de Simetria
** Conjuntos de Simetria (/symmetry sets/)
Explicação em [cite:@learntla-constants]
#+BEAMER: \medskip

Podemos dizer para o /model checker/ que um conjunto é simétrico, fazendo com que ele precise considerar menos estados.
#+BEAMER: \pause\medskip

Suponha que nossa especificação constrói uma sequência a partir do conjunto de /model values/ ={s1, s2, s3, s4}=. Imagine alguns dos valores que podem ser construídos:
#+begin_src tla
(1) <<s1, s2, s3>>
(2) <<s2, s1, s3>>
(3) <<s1, s2, s2>>
(4) <<s2, s3, s3>>
#+end_src
#+BEAMER: \pause
- A única diferença do (1) pro (2) é que trocamos a ordem de =s1= e =s2=.
- A única diferença do (3) pro (4) é que trocamos os =s1= por =s2= e os =s2= por =s3=.

** Conjuntos de Simetria para otimização
#+BEAMER: \pause\medskip
Se essas diferenças não forem relevantes para nosso modelo, podemos definir que ={s1, s2, s3, s4}= é um conjunto de simetria, e assim o /model checker/ vai precisar verificar bem menos estados.
#+BEAMER: \pause
- Para isso, o TLC vai primeiro computar todas as permutações possíveis desse conjunto, o que pode levar um tempo para conjuntos grandes. Nesses casos, pode valer a pena usar um conjunto normal (sem simetria).

#+BEAMER: \pause\medskip
Exemplo no trabalho de RPG: dois monstros são simétricos
#+BEAMER: \pause\medskip
Exemplo no trabalho do banco: Usuários são simétricos

* Refinamento
** Refinamento
Vamos ver dois exemplos:
1. Transaction commit de Leslie Lamport [cite:@gray2004consensus]
2. Threads de Hillel Wayne [cite:@hillel-refinement]

** FIM
#+BEAMER: \maketitle
