(dolist (d '("docs" "images"))
  (unless (file-exists-p d)
    (make-directory d)))

;; (dolist (d '(("https://upload.wikimedia.org/wikipedia/commons/thumb/d/d8/Person_icon_BLACK-01.svg/200px-Person_icon_BLACK-01.svg.png" "images/me.png")
;;              ("https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Mini-poodle_companionship.jpg/800px-Mini-poodle_companionship.jpg" "images/a-dog.jpg")
;;              ("https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Grumpy_Cat_by_Gage_Skidmore.jpg/460px-Grumpy_Cat_by_Gage_Skidmore.jpg" "images/grumpy-cat.jpg")
;;              ("https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Bengal_tiger_%28Panthera_tigris_tigris%29_female_3_crop.jpg/800px-Bengal_tiger_%28Panthera_tigris_tigris%29_female_3_crop.jpg" "images/tiger.jpg")
;;              ("https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/Strawberry_and_lemon_smoothie_%2814430283996%29.jpg/800px-Strawberry_and_lemon_smoothie_%2814430283996%29.jpg" "recipes/smoothie.jpg")
;;              ("https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Strawberry_in_Dilshad_Garden%2C_India.jpg/800px-Strawberry_in_Dilshad_Garden%2C_India.jpg" "recipes/strawberries.jpg")))
;;   (unless (file-exists-p (cadr d))
;;     (url-copy-file (car d) (cadr d))))

(org-babel-tangle)
;; (org-publish-remove-all-timestamps)
;;
(defvar personal-site-full-name "Gabriela Moreira"
  "A string with your full name.")

(defvar personal-site-position "Formal methods & programming languages research engineer"
  "A string with your full position or job appointment.")

(defvar personal-site-github "bugarela"
  "If not NIL, your GitHub id.")

(defvar personal-site-google-scholar-id nil
  "If not NIL, your Google Scholar id.")

(defvar personal-site-email nil
  "If not NIL, your Google Scholar id.")

(defvar personal-site-linkedin "bugarela"
  "If not NIL, your Linkedin id.")

(defvar personal-site-organization nil
  "If not NIL, a string with the name of your organization, without the @ sign.")

(defvar personal-site-organization-url nil
  "If not NIL, the URL of your organization.")

(defvar personal-site-twitter "bugarela"
  "If not NIL, a string with a Twitter handle, without the @ sign.")

(setq org-publish-project-alist
      `(("lectures-mfo"
         :base-directory ,(expand-file-name "./mfo")
         :root-directory ,(expand-file-name "./")
         :recursive t
         :base-extension "org"
         :publishing-directory ,(expand-file-name "./docs/mfo")
         ;; Exclude the blog archive index autogenerated below
         ;; Note that the regexp is relative to :base-directory
         :exclude "^index.org"
         :section-numbers nil
         :language "pt_BR"
         :with-toc t
         :with-date t
         :html-template ,(templated-html-load-template "templates/mfo.html")
         :publishing-function org-html-publish-to-templated-html
         :auto-sitemap t
         :sitemap-folders ignore
         :sitemap-style list
         :sitemap-title ""
         :sitemap-filename "sitemap.inc"
         :sitemap-sort-files alphabetically
         )
        ("homepage-mfo"
         :base-directory ,(expand-file-name "./mfo")
         :root-directory ,(expand-file-name "./")
         :recursive t
         :base-extension "org"
         :publishing-directory ,(expand-file-name "./docs/mfo")
         ;; Exclude the blog archive index autogenerated below
         ;; Note that the regexp is relative to :base-directory
         ;; :exclude "^index.org"
         :section-numbers nil
         :language "pt_BR"
         :with-toc t
         :with-date t
         :html-template ,(templated-html-load-template "templates/mfo.html")
         :publishing-function org-html-publish-to-templated-html
         )
        ("homepage-pages"
         :base-directory ,(expand-file-name "./")
         :recursive t
         :base-extension "org"
         ;; :include ("blog/index.org")
         :exclude ,(regexp-opt '("mfo"))
         :publishing-directory ,(expand-file-name "./docs")
         :section-numbers nil
         :language "pt_BR"
         :with-toc nil
         :with-date nil
         :html-template ,(templated-html-load-template "templates/index.html")
         :publishing-function org-html-publish-to-templated-html
         )
        ("homepage-assets"
         :base-directory "./"
         :publishing-directory "./docs"
         :recursive t
         :language "pt_BR"
         :exclude "^\\(docs\\|templates\\).*"
         :base-extension "\\(jpg\\|gif\\|png\\|css\\|js\\|el\\|nb\\|ipynb\\|pdf\\|xml\\)"
         :publishing-function org-publish-attachment)
        ("homepage" :components ("lectures-mfo" "homepage-mfo" "homepage-pages"
                                 "homepage-assets"))
        ))

(let ((enable-local-variables :all)
      (find-file-hook nil))
  (org-publish "homepage" t))

(templated-html-create-sitemap-xml "docs/sitemap.xml" "docs" templated-html-site-url)
