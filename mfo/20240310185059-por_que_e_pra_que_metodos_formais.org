:PROPERTIES:
:ID:       e75baded-6037-4370-9be5-3498ae1dd28d
:END:
#+title: Por que e pra que métodos formais?
#+EMAIL:     gabrielamoreira05@gmail.com
#+DATE:      21 de agosto de 2024
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+BEAMER_FRAME_LEVEL: 2
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+BEAMER_THEME: udesc
#+BEAMER_HEADER: \input{header.tex} \subtitle{Aula para disciplina de Métodos Formais} \institute{Departamento de Ciência da Computação - DCC\\Universidade do Estado de Santa Catarina - UDESC}
#+LATEX_COMPILER: pdflatex
#+bibliography: references.bib
#+cite_export: csl ~/MEGA/csl/associacao-brasileira-de-normas-tecnicas.csl

#+HTML: <a href="https://bugarela.com/mfo/slides/20240310185059-por_que_e_pra_que_metodos_formais.pdf">Slides</a>
#+beamer: \begin{frame}{Conteúdo}
#+TOC: headlines 3
#+beamer: \end{frame}

** Introdução

Em todas as aulas dessa disciplina, eu vou estar, explicita ou implicitamente, tentando convencer vocês de que usar métodos formais para verificar sistemas complexos é importante.

#+BEAMER: \medskip
Contudo, pessoas diferentes tem visões diferentes, e tem muita gente de respeito por aí falando da importância de métodos formais. Essa aula vai apresentar as respostas de *outras pessoas* à pergunta: *Por que e pra que métodos formais?*

** Introdução II

Eu posso pensar como na figura abaixo, mas cada pessoa se motiva de uma forma diferente (por exemplo, ver /Moving Motivators/).
#+attr_html: :width 450px
#+ATTR_LATEX: :width 0.6\textwidth
[[./figures/correspondence_meme.jpg]]


* Joost-Pieter Katoen
** Joost-Pieter Katoen
#+attr_html: :width 450px
#+ATTR_LATEX: :width 0.45\textwidth
[[./figures/Joost-Pieter-Katoen.jpg]]
- Cientista teórico da computação
- Professor renomado e líder do Grupo de Modelagem e Verificação de softwareda na universidade RWTH Aachen University.
- Um dos autores do livro "Principles of Model Checking", da bibliografia do curso

** Impacto
O impacto que um /bug/ pode ter varia muito de acordo com o tipo de sistema.

#+BEAMER: \medskip

Vamos ver alguns exemplos de /bugs/ que tiveram um impacto muito grande. Esses exemplos foram dados pelo professor Joost-Pieter Katoen em uma aula introdutória a /model checking/ [cite:@katoen-lecture].

** Overdose de radiação na Therac-25 (1985-87)
#+attr_html: :width 450px
#+ATTR_LATEX: :width 0.45\textwidth
[[./figures/therac25.png]]

- Therac-25 era uma máquina de radioterapia controlada por computador
- 6 acidentes por overdose de radiação (~100x da dose)
  - 3 pacientes morreram
- Causa: software de controle entre dois modos de tratamento

** Colapso da rede de telefonia da AT&T (1990)
- 9 horas de serviço interrompido em grande parte dos EUA.
- Causa: um =break= incorreto em C (deveria sair de um =if=, mas estava saindo de um =switch=), que fez os computadores reiniciarem em cadeia a cada 6s.
- Prejuízo: Centenas de milhões de dólares

** Acidente do míssel Ariane 5 (1996)
#+attr_html: :width 450px
#+ATTR_LATEX: :width 0.6\textwidth
[[./figures/ariane5.png]]

- Conversão de um float 64 bits pra um inteiro de 16 bits

** Defeito de ponto flutuante (1994)
#+attr_html: :width 450px
#+ATTR_LATEX: :width 0.3\textwidth
[[./figures/pentium.jpg]]

- Em inglês, /Pentium FDIV bug/
- Lançamento da família /Pentium/ da Intel
- Uma das inovações era uma tabela para aumentar a velocidade de multiplicação de ponto flutuante
  - Ainda na fase de testes, descobriram um problema, mas acreditava-se ser muito raro
  - No fim, não era tão raro assim, e tiveram que fazer /recall/ dos produtos
- Prejuízo: ~500 milhões de dólares e grande perda de reputação da Intel


* A Casa Branca
** Documento da Casa Branca [cite:@whitehouse-doc]
#+attr_html: :width 450px
#+ATTR_LATEX: :width 0.7\textwidth
[[./figures/whitehouse_cover.png]]

** Parágrafo 1
Even if engineers build with memory safe programming languages and memory safe chips, one must think about the vulnerabilities that will persist even after technology manufacturers take steps to eliminate the most prevalent classes. Given the complexities of code, *testing is a necessary but insufficient step* in the development process to fully reduce vulnerabilities at scale. If correctness is defined as the ability of a piece of software to meet a specific security requirement, then it is possible to *demonstrate correctness using mathematical techniques* called formal methods. These techniques, often used to prove a range of software outcomes, can also be used in a cybersecurity context and are *viable even in complex environments like space*. While formal methods have been studied for decades, their deployment remains limited; *further innovation in approaches to make formal methods widely accessible is vital to accelerate broad adoption*. Doing so enables formal methods to serve as another powerful tool to give software developers greater assurance that entire classes of vulnerabilities, even beyond memory safety bugs, are absent.

** Parágrafo 2
While there are several types of formal methods that span a range of techniques and stages in the software development process, this report highlights a few specific examples. *Sound static analysis* examines the software for specific properties without executing the code. This method is effective because it can be used across many representations of software, including the source code, architecture, requirements, and executables. *Model checkers* can answer questions about a number of higher-level properties. These algorithms can be used during production; however, they are limited in their scaled use due to their computational complexity. *Assertion-based testing* is a formal statement of properties carried in the code that may be used to cross-check the code during testing or production. These generated proofs allow for *faults to be detected much earlier* and closer to the erroneous code, rather than tracing back from externally visible systems failures.

** Parágrafo 3
There are two ways software engineers can use these techniques across software and hardware. First, formal methods can be incorporated directly into *the developer toolchain*. As the programmer builds, tests, and deploys software, the compiler can automate these mathematical proofs and verify that a security condition is met. Additionally, the developer can *use formally verified core components* in their software supply chain. By choosing provably secure software libraries, developers can ensure the components they are using are less likely to contain vulnerabilities.

# ** Métodos formais em ferramentas de desenvolvimento

# ** Componentes verificados formalmente
# - CompCert

** Parágrafo 4
Formal methods can be incorporated throughout the development process to reduce the prevalence of multiple categories of vulnerabilities. Some emerging technologies are also well-suited to this technique. As questions arise about the safety or trustworthiness of a new software product, *formal methods can accelerate market adoption in ways that traditional software testing methods cannot*. They allow for proving the presence of an *affirmative requirement, rather than testing for the absence of a negative condition*.

** Parágrafo 5
While memory safe hardware and formal methods can be *excellent complementary approaches* to mitigating undiscovered vulnerabilities, one of the most impactful actions software and hardware manufacturers can take is *adopting memory safe programming languages*. They offer a way to eliminate, not just mitigate, entire bug classes. This is a remarkable opportunity for the technical community to improve the cybersecurity of the entire digital ecosystem.


* Leslie Lamport
** Leslie Lamport
#+attr_html: :width 450px
#+ATTR_LATEX: :width 0.45\textwidth
[[./figures/Leslie-Lamport.jpg]]
- Muitos trabalhos importantes na área de Sistemas Distribuídos
- Autor inicial do LaTeX
- Recebeu um prêmio de Turing em 2013
- Criador de TLA e TLA+

** Quem constrói casas sem antes desenhar plantas? [cite:@lamport-blueprint]
#+begin_quote
Writing is nature's way of letting you know how sloppy your thinking is. --Dick Guindon
#+end_quote

#+BEAMER: \pause
#+BEAMER: \medskip
Plantas nos permitem pensar com clareza sobre o que estamos construindo. Antes de escrever código, nós deveriamos escrever uma "planta" - em software, uma especificação.

** Usando a comparação com plantas
- Muitas pessoas argumentam que especificar software é uma perda de tempo
  - Por exemplo: especificações são inúteis porque não podemos gerar todo o *código* a partir dela
    - Isso é como dizer que desenhar plantas é inútil porque ainda precisa-se de *construtores* para construir.

#+BEAMER: \pause
#+BEAMER: \medskip
- Alguns argumentam que essa analogia não é válida porque é mais fácil *mudar código* do que *mudar uma construção*
  - *Não!* Pode ser muito difícil mudar código, principalmente sem introduzir bugs. Especialmente sem especificações.

** Escrevendo especificações
#+begin_quote
But few engineers write specs because they have little *time to learn how* on the job, and they are unlikely to have learned in school. Some graduate schools teach courses on specification languages, but few teach how to use specification *in practice*. It's hard to draw blueprints for a skyscraper without ever having drawn one for a toolshed.
#+end_quote

#+BEAMER: \pause
#+BEAMER: \medskip
Uma dica é evitar usar o código como base para escrever especificações. Arquitetos não fazem as plantas usando tijolos.

* Hillel Wayne
** Hillel Wayne
#+attr_html: :width 450px
#+ATTR_LATEX: :width 0.45\textwidth
[[./figures/Hillel-Wayne.jpg]]
- Autor do site [[https://www.learntla.com][Learn TLA+]], do livro  [[https://is.gd/ptlaplus][Practical TLA+]] and da [[https://alloy.readthedocs.io/en/latest/][documentação do Alloy]] (linguagem de especificação)
- Trabalha como consultor pra empresas, ensinado times a usarem TLA+
  - Muita experiência prática

** Hillel's Pitch [cite:@hillel-using-fm]
#+begin_quote
Formal methods are an incredibly powerful tool. The biggest barrier to using them, in my opinion, is *education*. FM requires a different mindset from coding and sometimes people have trouble *building the intuition*. There’s also an implicitly-assumed set of math skills that are easy to learn but hard to realize you need to learn.
#+end_quote

** \faSearch\faBug Achando bugs rapidamente [cite:@hillel-fm-business]
Quanto antes os bugs são encontrados, menos dano eles causam.
#+BEAMER: \pause
#+BEAMER: \medskip

- AWS [cite:@aws-2014]
  - Modelaram DynamoDB e S3 (entre outros)
  - Encontraram bugs complexos em ambos, um deles requeria 35 passos para reprodução
  - Testes, QA e revisão de código não foram suficientes
  - Também conseguiram fazer otimizações agressivas com mais confiança

#+BEAMER: \pause
- eSparkLearning [cite:@hillel-espark]
  - Precisaram modificar o sistema para atender um cliente grande
  - Dois dias investidos em uma especificação em TLA+
  - Bugs significantes encontrados, que causariam a perda desse cliente
  - Estimativa de $300k/ano economizados

** \faDollarSign\faWrench Economizando no desenvolvimento e manutenção
Formalizando designs, é possível simplificar os sistemas antes de começar a desenvolver.
#+BEAMER: \pause
#+BEAMER: \medskip

- OpenComRTOS [cite:@rtos]
  - Real-time operating system (RTOS)
  - Modelar ajudou com que desenvolvedores júniores (menos experientes) pudessem contribuir para o sistema complexo

#+BEAMER: \pause
#+BEAMER: \medskip
- Cockroach Labs [cite:@parallel-commits]
  - Modelo em TLA+ para uma otimização de commits paralelos
  - Encontraram um bug que precisaria de mais de 10 horas para debugar
  - O modelo deu confiança de que a solução para o bug funcionava

** \faSearch\faBug Achando bugs em sistemas legado
Mesmo em sistemas legados, e muito útil achar bugs antes que os usuários os achem.
#+BEAMER: \pause
#+BEAMER: \medskip

- Rackspace [cite:@rackspace]
  - Analisando um sistema em produção com Alloy, acharam um bug tão severo que tiveram que refazer *um ano* de trabalho. Se tivessem usado métodos formais desde o início, poderiam ter salvado esse ano.

#+BEAMER: \pause
#+BEAMER: \medskip
- ElasticSearch [cite:@elastic-issue]
  - Em três dias de modelagem de algumas partes da engine do ElasticSearch, um problema significante foi econtrado.
  - Três meses depois de arrumarem o problema, alguém encontrou e reportou o exato problema em uma versão antiga.

** Demo (Adaptada)

- Estou doando meu sofá, alguém quer?
- Quem quiser, me manda um e-mail essa semana e é seu

#+BEAMER: \pause
#+BEAMER: \medskip
Mais detalhes:
- Um sofá tem um dono
- O dono do sofá pode ofertá-lo a outra pessoa. Quem recebe a oferta pode aceitá-la, e assim o sofá passa a ser dessa pessoa, ou rejeitá-la, e assim nada acontece
- A aceitação/rejeição é assíncrona. O dono do sofá pode oferecê-lo para várias pessoas e a pessoa pode esperar alguns dias antes de aceitar ou rejeitar a oferta

#+BEAMER: \pause
#+BEAMER: \medskip
Temos um problema aqui, conseguem ver?

** Demo - bug \faBug
1. Gabriela tem o sofá
2. Gabriela oferece o sofá pra Alice
3. Gabriela oferece o sofá pro Bob
4. Alice aceita. O sofá agora é da Alice
5. Bob aceita. O sofá agora é do Bob

A Alice não ofereceu o sofá para o Bob, mas o sofá era dela e passou a ser do Bob.

** Demo - características do bug \faBug

- É complexo: envolve três pessoas e quatro passos. Difícil de especificar com testes unitários.
- É sutíl: O único sintoma é que a Alice ficou sem sofá. Uma pessoa testando o OLX não ia perceber isso.
- É perigoso: Viola um requisito principal do sistema. A Alice (e quem ouvir a história dela) vai deixar de confiar em mim.

#+BEAMER: \pause
#+BEAMER: \medskip
Em [cite:@hillel-fm-business], o Hillel apresenta uma especificação em TLA+ de 15 linhas para um sistema análogo a esse e econtra o bug usando um model checker.

** Quando não usar métodos formais
Alguns pontos negativos:
#+BEAMER: \pause
- Não é possível obter a *implementação* a partir da especificação. Se você precisa ter absoluta certeza que a implementação corresponde à implementação, muito mais recursos são necessários.
#+BEAMER: \pause
- Escrever especificações é útil para sistemas complexos. Se você consegue manter o sistema inteiro na sua cabeça, pode não ser benéfico escrever uma especificação.
  - "Rule of thumb": Especificar coisas que levam menos de uma semana pra desenvolver não vale a pena.
#+BEAMER: \pause
- Especificações não são a melhor ferramenta pra encontrar erros simples de implementação, como null-checks.

# * Auditorias
# ** Auditorias de software
# - Empresas podem fazer auditorias de software para
#   - Satisfazer alguma regra/diretriz
#   - Reduzir as chances de bugs em produção

** Referências
:PROPERTIES:
:BEAMER_opt: allowframebreaks=0.8,label=
:END:
#+print_bibliography:
#+beamer: \end{frame} \maketitle
