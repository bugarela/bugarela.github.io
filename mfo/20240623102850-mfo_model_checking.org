:PROPERTIES:
:ID:       5dac83f2-7905-4792-bc3a-682e126797c0
:END:
#+title:     Model Checking
#+EMAIL:     gabrielamoreira05@gmail.com
#+DATE:      30 de junho de 2025
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+BEAMER_FRAME_LEVEL: 2
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+BEAMER_THEME: udesc
#+BEAMER_HEADER: \input{header.tex} \subtitle{Aula para disciplina de Métodos Formais} \institute{Departamento de Ciência da Computação - DCC\\Universidade do Estado de Santa Catarina - UDESC}
#+LATEX_COMPILER: pdflatex
#+bibliography: references.bib
#+cite_export: csl ~/MEGA/csl/associacao-brasileira-de-normas-tecnicas.csl
#+HTML: <a href="https://bugarela.com/mfo/slides/20240623102850-mfo_model_checking.pdf">Slides</a><br />
#+beamer: \begin{frame}{Conteúdo}
#+TOC: headlines 3
#+beamer: \end{frame}

* /Model Checking/
** TLC [cite:@specifying-systems]
/Explicit-State model checker/
#+BEAMER: \pause
- Enumera todos os estados
#+BEAMER: \pause
- Usa um grafo direcionado com estados e transições (/reachability graph/) e uma fila de estados para checar
#+BEAMER: \pause
- Provavelmente, o tipo de /model checker/ que um de nós escreveria se fôssemos tentar (sem pesquisar um monte antes)

** Apalache [cite:@apalache]
/Model checker/ simbólico
#+BEAMER: \pause
- Traduz a especificação para um conjunto de restrições (sem quantificação)
#+BEAMER: \pause
- Usa um SMT /solver/ para verificar a satisfabilidade das restrições

#+BEAMER: \pause\medskip
/Bounded model checking/
#+BEAMER: \pause
- Necessário definir um número máximo de passos (/bound/) para o qual gerar restrições. A verificação se dá dentro desse limite, podendo haver estados atingíveis fora desse limite que não satisfazem a propriedade.

** SMT
- Generalização de problemas SAT
  #+BEAMER: \pause
  - SAT: Problema da satisfabilidade Booleana
  #+BEAMER: \pause
  - SMT: Satisfabilidade "/modulo/" teorias
    #+BEAMER: \pause
    - "/modulo/" no sentido de "dentro de"
    #+BEAMER: \pause
    - Permite mais elementos: inteiros, reais, arrays, etc
    #+BEAMER: \pause

#+BEAMER: \pause\medskip
Z3 [cite:@z3]:
- Leonardo de Moura e Nikolaj Bjørner
  - Podcast: [[https://www.typetheoryforall.com/episodes/z3-and-lean-the-spiritual-journey][Type Theory Forall #33 Z3 and Lean, the Spiritual Journey]]
#+BEAMER: \pause
- Versão em WebAssembly
  - https://people.csail.mit.edu/cpitcla/z3.wasm/z3.html

** Resolvendo SMT com Z3
#+begin_src smt
(declare-fun p () Bool)
(declare-fun q () Bool)
(assert (implies p q))
(assert p)
(assert (not q))
(check-sat)
#+end_src

Resultado: =unsat=
#+BEAMER: \pause

#+begin_src smt
(declare-fun p () Bool)
(declare-fun q () Bool)
(assert (implies p q))
(assert p)
(assert q)
(check-sat)
#+end_src

Resultado: =sat=

** Resolvendo SMT com inteiros
#+begin_src smt
(declare-const a Int)
(declare-const b Int)
(assert (= (+ a b) 20))
(assert (= (+ a (* 2 b)) 10))
(check-sat)
(get-model)
#+end_src

Resultado: =sat=

** Simulação simbólica
Podemos classificar não-determinismo em dois tipos:
#+BEAMER: \pause
- Não-determinismo de dados (/data non-determinism/)
  - =1.to(10).oneOf()=
#+BEAMER: \pause
- Não-determinismo de controle (/control-flow non-determinism/)
  - =any { A, B }=

#+BEAMER: \pause\medskip
Simulação simbólica:
#+BEAMER: \pause
- /Model Checkers/: exaustivamente checam todos os dados e fluxos possíveis
#+BEAMER: \pause
- Simuladores aleatórios: aleatoriamente checam alguns dados e fluxos
#+BEAMER: \pause
- Simulador simbólico: aleatóriamente checa alguns fluxos, mas considerando todos os dados possíveis

** Invariância indutivas

Às vezes, podemos provar uma invariante qualquer $I$ (também conhecida como invariante ordinária) mostrando que uma invariante indutiva $Inv$ implica nela ($Inv => I$). Para isso, verificamos três coisas:

1. $Init => Inv$, ou seja, verificar a propriedade $Inv$ com =--max-steps=0= e garantir que $Inv$ é verdade em todos os estados iniciais
2. $Inv \land Next => Inv'$, ou seja, verificar a propriedade $Inv$ a partir de um estado inicial que satisfaça $Inv$, fazendo um passo (=--max-steps=1=)
3. $Inv => I$, ou seja, verificar a propriedade $I$ em todos os estados onde $Inv$ é verdade (=--max-steps=0=).

Invariância indutiva é muito poderosa porque conseguimos uma prova completa mesmo em model-checking limitado.

** Referências
#+print_bibliography:

#+beamer: \end{frame} \maketitle
