:PROPERTIES:
:ID:       f96f9a98-0fff-467e-bb0d-b2e36ef14f15
:END:
#+title:     Checando propriedades com Lógica Temporal
#+AUTHOR:    Gabriela Moreira
#+EMAIL:     gabrielamoreira05@gmail.com
#+DATE:      19 de março de 2025
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+BEAMER_FRAME_LEVEL: 2
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+BEAMER_THEME: udesc
#+BEAMER_HEADER: \input{header.tex} \subtitle{Aula para disciplina de Métodos Formais} \institute{Departamento de Ciência da Computação - DCC\\Universidade do Estado de Santa Catarina - UDESC}
#+LATEX_COMPILER: pdflatex
#+bibliography: references.bib
#+cite_export: csl ~/MEGA/csl/associacao-brasileira-de-normas-tecnicas.csl

#+begin_src elisp :exports none
(setq org-ref-default-citation-link "citeauthor")
#+end_src

#+HTML: <a href="https://bugarela.com/mfo/slides/20240303165631-mfo_logica_temporal.pdf">Slides</a>
#+beamer: \begin{frame}{Conteúdo}
#+TOC: headlines 3
#+beamer: \end{frame}

* /Model checking/
** Contexto
- *Problema*: É difícil pensar em todos os cenários, principalmente em sistemas concorrentes/distribuídos
#+BEAMER: \pause
- *Solução*: Diferentes níveis de verificação
  1. \faDice /Fuzzing/ e simulação
  2. \faLaptop /Model checking/
  3. \faUserEdit Provas (com assistente de provas)

** Interface de um /model checker/
Como um /model checker/ é usado?
#+BEAMER: \pause

*** Duas entradas:
1. \faProjectDiagram Um modelo - uma máquina de estado finita*
2. \faNotEqual Uma propriedade - uma fórmula de alguma lógica temporal

#+BEAMER: \pause

*** Três possíveis saídas
1. \faThumbsUp Sucesso
2. \faThumbsDown Contra-exemplo: Uma sequência de estados que viola a propriedade
3. \faHandLizard Não há memória suficiente

#+BEAMER: \medskip
Opcionalmente, também pode detectar /deadlocks/.
- /Deadlock/: o modelo não obedece a restrição de uma estrutura de Kripke, ou seja, existe um estado sem transição alguma saindo dele.

** Vantagens e Desvantagens
:PROPERTIES:
:ID:       b14943a4-92d9-4ba3-8f7f-fbc77a8d30d7
:END:
*Vantagens*
1. \faRoute Contra-exemplos
2. \faTasks Verificação parcial
3. \faLaptop Processo automatizado
4. \faSync Sequências infinitas de estados

#+BEAMER: \pause
*Desvantagens*
1. \faBomb Explosão de estados
2. \faSearch Não permite generalização (i.e. $N$ processos)
3. \faBug /Model checkers/ em si não são verificados

#+BEAMER: \pause
#+BEAMER: \medskip
No geral, é um método bom para encontrar falhas em software, que permite a verificação com certas restrições.

#+BEAMER: \medskip

Comparado a testes e simulações aleatórias, pode ser mais eficiente em encontrar casos de borda onde falhas ocorrem.

** \faProjectDiagram Modelos

Linguagens de especificação fornecem diferentes abstrações para como definir uma máquina de estados. Exemplos: Redes de Petri, TLA+ (/Temporal Logic of Actions+/), CSP (/Communicating Sequential Processes/), Alloy, entre outras.

** \faNotEqual Propriedades - \faClock Lógica temporal
Dois operadores temporais principais:
- Eventualmente ($\Diamond$) ou Finalmente ($F$): Cada semáforo deve eventualmente ficar verde
- Sempre ($\square$) ou ($A$): O número do próximo estado é sempre maior que o número no estado anterior

Fórmulas de lógica temporal são sobre um comportamento (execução) do sistema modelado.

** \faNotEqual Propriedades - \faCircle Invariantes
Invariantes são predicados sobre estados individuais do sistema. Um invariante é satisfeito se e somente se ele é verdadeiro para todos os estados do sistema.

#+BEAMER: \medskip
#+BEAMER: \pause

*Invariantes Indutivos* são tipos especiais de invariantes que podem ser provados com indução matemática, isso é, sem necessidade de explorar todos os estados.
 - Muito poderosos mas também difíceis de se definir

** \faRoute Contra-exemplo
*Entradas:*
- \faProjectDiagram Modelo: 2 semáforos sem controle de revezamento
- \faNotEqual Propriedade: para cada semáforo, ele deve eventualmente ficar verde

#+BEAMER: \medskip
#+BEAMER: \pause
Execução do /model checker/
#+BEAMER: \medskip
#+BEAMER: \pause

*Saída - \faRoute Contra-exemplo:*
1. Semáforo 1 inicia vermelho, semáforo 2 inicia vermelho
2. Semáforo 1 fica verde (e semáforo 2 permanece vermelho)
3. Semáforo 1 fica amarelo (e semáforo 2 permanece vermelho)
4. Retorna ao estado (1)

#+BEAMER: \medskip
#+BEAMER: \pause

Ótimo artefato para reprodução de bugs e geração de testes automatizados.


** \faUserGraduate Exercício: Qual dessas fórmulas pode ser um invariante?

1. Ao fazer uma transferência bancária, eu acabo com menos dinheiro do que tinha antes
2. Ao ligar uma chaleira elétrica, ela eventualmente chegará a 100 graus
3. Em um jogo da velha, a diferença entre o número de X e O não é maior do que 1

#+BEAMER: \pause
#+BEAMER: \bigskip

\faLightbulb Dica: Um invariante é uma fórmula a ser avaliada em cada estado do sistema.

#+BEAMER: \pause
#+BEAMER: \bigskip

Resposta: 3

* Lógica Temporal

 # for instance, one may wish to say that whenever a request is made, access to a resource is eventually granted, but it is never granted to two requestors simultaneously

** Operadores Temporais - Unários
- $\square$ ou *G*: /Globally/, sempre.
  - *G* $\phi$: $\phi$ deve ser verdadeiro por toda a execução a partir de agora.
  - Exemplo: Comida sacia a fome
#+BEAMER: \medskip
#+BEAMER: \pause
- $\Diamond$ ou *F*: Finally, eventualmente, no Futuro.
  - *F* $\phi$: eventualmente (na execução a partir de agora), $\phi$ deve ser verdadeiro.
  - Exemplo: Eventualmente, terei fome
#+BEAMER: \medskip
#+BEAMER: \pause
- $\bigcirc$ ou *X*: /Ne(*x*)t/, próximo.
  - *X* $\phi$: $\phi$ deve ser verdadeiro no próximo estado.
  - Exemplo: Logo após comer, tenho sede

** Operadores Temporais - Binários
- *U*: /Until/, até.
  - $\psi$ *U* $\phi$: $\psi$ deve ser verdade até que $\phi$ seja verdade, sendo que $\phi$ deve ser verdade no presente ou no futuro.
  - Exemplo: Eu tenho fome até eu comer alguma coisa
#+BEAMER: \medskip
#+BEAMER: \pause
- *R*: /Release/, libera.
  - $\psi$ *R* $\phi$: $\phi$ deve ser verdade até e incluindo o momento que $\psi$ se torna verdadeiro. Se $\psi$ nunca ficar verdadeiro, $\phi$ deve permanecer verdadeiro para sempre.
  - Exemplo: Ao comer chocolate, deixo de ter vontade de comer doce. Detalhe: Eu posso continuar com vontade de comer e acabar nunca comendo chocolate.

** LTL e CTL
- *LTL* - /Linear Temporal Logic/ (Lógica Temporal Linear). Em LTL, as fórmulas são implicitamente universalmente quantificadas. Propriedades que falam sobre a existência de uma execução não podem ser expressadas.
- *CTL* - /Computational Tree Logic/ (Lógica de Árvore Computacional). CTL é uma lógica sobre a ramificação do tempo.
** LTL e CTL - Visualização
  #+CAPTION: Fonte [cite:@tevfik-lecture]
  [[./figures/execucao_arvore_computacional.png]]

# ** Exemplos
# When analysing transition systems, one is interested in properties of their runs:
# • The two trains are never simultaneously in section onbridge.
# • Any train waiting at the signal will eventually be on the bridge.
# • The variable x will eventually remain constant.
# Properties about the branching structure are occasionally also of interest:
# • From any state it is possible to reach an initial state.
# • Two actions A and B are in conflict, resp. are independent.
# • Two processes can cooperate to starve a third process

* LTL
** LTL - /Linear Temporal Logic/

Na lógica temporal linear (LTL), temos operadores para descrever eventos ao longo de uma única execução.
#+BEAMER: \medskip

Seja $AP$ um conjunto finito de proposições atômicas (i.e. $\{ p_0, p_1, ..., p_n \}$), o conjunto de fórmulas LTL sobre $AP$ é definido indutivamente por:
- se $p \in AP$ então $p$ é uma fórmula LTL;
- se $\psi$ e $\phi$ são fórmulas LTL, então $\neg\psi$, $\phi \lor \psi$, $\mathbf{X} \psi$, e $\phi \mathbf{U} \psi$ são fórmulas LTL.

$$\phi ::= \bot\mid\top\mid p\mid \neg\phi \mid \phi \lor \psi \mid \mathbf{X} \psi \mid \phi \mathbf{U} \psi$$

** Equivalências

Os operadores *G*, *F* e *R* podem ser definidos usando somente *X* e *U*.

- $\mathbf{G}\psi \equiv \bot\mathbf{R}\psi \equiv \neg\mathbf{F}\neg\psi$
- $\mathbf{F}\psi \equiv \top\mathbf{U}\psi$
- $\phi\mathbf{R}\psi \equiv \neg(\neg\phi\mathbf{U}\neg\psi)$
  - Até o momento que $\psi$ fica falso, $\phi$ não pode ser falso
- $\neg\mathbf{G}\psi \equiv \mathbf{F}\neg\psi$

** Negações de fórmulas
Uma formula ser falsa não significa que sua negação é verdadeira. Por exemplo, a fórmula a seguir não é necessariamente verdadeira:
$$\mathbf{F}p_1 \lor \neg\mathbf{F}p_1$$

Exemplo:
#+BEAMER: \center{\scalebox{0.5}{\begin{minipage}{\textwidth}
#+begin_src mermaid :file formula_negation.png :theme neutral :scale 2 :background-color transparent
stateDiagram
  p0 --> p1
  p1 --> p1
  p0 --> p2
  p2 --> p2
#+end_src

#+BEAMER: \end{minipage}}}
# https://www.worldscientific.com/doi/pdf/10.1142/9789811268540_0001
# https://quizlet.com/nl/512866390/ch11-linear-temporal-logic-ltl-flash-cards/

** Exercícios
Qual dos operadores temporais G (/Globally/), F (/Finally/), X (/Next/), U (/Until/) e R (/Release/) pode ser representado pelo diagrama a seguir?

[[./figures/LTL_next.png]]

#+BEAMER: \pause
*Resposta:* *X*, Next

#+BEAMER: \end{frame}
#+BEAMER: \begin{frame}{Exercícios II}

Qual dos operadores temporais G (/Globally/), F (/Finally/), X (/Next/), U (/Until/) e R (/Release/) pode ser representado pelo diagrama a seguir?

[[./figures/LTL_globally.png]]

#+BEAMER: \pause
*Resposta:* *G*, Globally

#+BEAMER: \end{frame}
#+BEAMER: \begin{frame}{Exercícios III}
Qual dos operadores temporais G (/Globally/), F (/Finally/), X (/Next/), U (/Until/) e R (/Release/) pode ser representado pelo diagrama a seguir?

[[./figures/LTL_until.png]]

#+BEAMER: \pause
*Resposta:* *U*, Until

#+BEAMER: \end{frame}
#+BEAMER: \begin{frame}{Exercícios IV}
Qual dos operadores temporais G (/Globally/), F (/Finally/), X (/Next/), U (/Until/) e R (/Release/) pode ser representado pelo diagrama a seguir?

[[./figures/LTL_finally.png]]

#+BEAMER: \pause
*Resposta:* *F*, Finally

#+BEAMER: \end{frame}
#+BEAMER: \begin{frame}{Exercícios IV}
Qual dos operadores temporais G (/Globally/), F (/Finally/), X (/Next/), U (/Until/) e R (/Release/) pode ser representado pelo diagrama a seguir?

[[./figures/LTL_release.png]]

#+BEAMER: \pause
*Resposta:* *R*, Release

** LTL em Estruturas de Kripke

Uma fórmula LTL é verdadeira para uma *estrutura de Kripke* se ela é verdadeira no(s) *estado(s) inicial(is)*.

#+BEAMER: \medskip
Uma fórmula LTL é verdadeira em um *estado* se ela é verdadeira para *todas as execuções* iniciando naquele estado.

#+BEAMER: \medskip
Ou seja, a fórmula deve ser verdadeira para todos as execuções (comportamentos) da estrutura.

* CTL
** CTL - /Computational Tree Logic/
A gramática a seguir define fórmulas em CTL (sendo $p \in AP$):
$$\phi ::= \bot\mid\top\mid p\mid \neg\phi \mid \phi \lor \psi \mid A[\phi\mathbf{U}\psi]\mid E[\phi\mathbf{U}\psi]\mid A\mid E$$

Todos os operadores temporais devem ser precedidos de *A* (/All/, Todo) ou *E* (/Exists/, Existe).
- *A* $\phi$: $\phi$ deve ser verdadeiro em todas as execuções a partir do estado atual;
- *E* $\phi$: Existe ao menos um caminho a partir do estado atual onde $\phi$ é verdade.

** Visualização
  #+CAPTION: Fonte [cite:@ltl-ctl-lecture-notes]
[[./figures/ctl_visualization.png]]

* Verificando propriedades
** LTL vs CTL
*Atenção:* $LTL \nsubseteq CTL$ and $CTL \nsubseteq LTL$

- $\mathbf{F}(\mathbf{G}p)$ é uma fórmula LTL que não pode ser expressa em CTL.
- $\mathbf{EX}p$ é uma fórmula CTL que não pode ser expressa em LTL.

** Exemplo chaleiras - modelo
#+BEAMER: \center{\scalebox{1.1}{\begin{minipage}{\textwidth}
#+begin_src mermaid :file chaleiras.png :theme neutral :scale 2 :background-color transparent
stateDiagram
  direction LR
  temperatura_ambiente --> esquentando
  esquentando --> esfriando
  esfriando --> esquentando
  cem_graus --> esfriando
  esfriando --> temperatura_ambiente
  esquentando --> cem_graus
#+end_src

#+BEAMER: \end{minipage}}}

** Exemplo chaleiras
PS: Release é =V= nesse sistema
#+BEAMER: \medskip

*CTL:*
- =EF(cem_graus)=: true
- =esquentando -> AF cem_graus=: false
- =esquentando -> EF temperatura_ambiente=: true
- =EF(EG(!cem_graus))=: true

*LTL:*
- =F(temperatura_ambiente | cem_graus)=: false
- =F(esquentando | esfriando)=: true
  - A não ser que haja uma auto-transição em =temperatura_ambiente=

** Exemplo Adultos e Crianças - modelo
#+BEAMER: \center{\scalebox{1.1}{\begin{minipage}{\textwidth}
#+begin_src mermaid :file adultos_e_criancas.png :theme neutral :scale 2 :background-color transparent
stateDiagram
  direction LR
  crianca_dormir --> escola
  escola --> brincar
  brincar --> crianca_dormir
  escola --> formatura
  formatura --> trabalho
  trabalho --> adulto_dormir
  adulto_dormir --> trabalho
#+end_src

#+BEAMER: \end{minipage}}}

** Exemplo Adultos e Crianças
*CTL:*
- =EF trabalho=: true
- =AF trabalho=: false

*LTL:*
- =F trabalho=: false
  - Não é possível expressar nada como =EF trabalho=
- =formatura -> X(G(trabalho | adulto_dormir))=: true
- =formatura -> X(trabalho U adulto_dormir)=: true
- =(F brincar) U formatura=: false

** /Workaround/ para falta do existencial com invariantes
Na prática, quando queremos verificar o equivalente a =EF p= onde =p= é uma proposição (não uma fórmula temporal), fazemos o seguinte:
 #+BEAMER: \pause\medskip
 1. Definimos =p= como uma invariante (isso é, =p= deve ser verdade em todos os estados)
   #+BEAMER: \pause\smallskip
 2. Rodamos o /model checker/
   #+BEAMER: \pause\smallskip
 3. Invertemos o resultado:
   #+BEAMER: \pause
   - Se for "ok", é porque a propriedade =EF p= é falsa
   #+BEAMER: \pause
   - Se for uma violação, é porque a propriedade =EF p= é verdadeira (e o contra-exemplo é um exemplo de execução onde =F p= é verdade).

** Referências
#+print_bibliography:
#+beamer: \end{frame} \maketitle
