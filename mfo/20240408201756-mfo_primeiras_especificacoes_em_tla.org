:PROPERTIES:
:ID:       f7091c26-2da9-4dcf-a13a-be4828eac0ae
:END:
#+title:  Primeiras Especificações em TLA+
#+EMAIL:     gabrielamoreira05@gmail.com
#+DATE:      10 de abril de 2024
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+BEAMER_FRAME_LEVEL: 2
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+BEAMER_THEME: udesc
#+BEAMER_HEADER: \input{header.tex} \subtitle{Aula para disciplina de Métodos Formais} \institute{Departamento de Ciência da Computação - DCC\\Universidade do Estado de Santa Catarina - UDESC}
#+LATEX_COMPILER: pdflatex
#+bibliography: references.bib
#+cite_export: csl ~/MEGA/csl/associacao-brasileira-de-normas-tecnicas.csl
#+PROPERTY: header-args :tangle tictactoe.tla
#+HTML: <a href="https://bugarela.com/mfo/slides/20240408201756-mfo_primeiras_especificacoes_em_tla.pdf">Slides</a><br />
#+beamer: \begin{frame}{Conteúdo}
#+TOC: headlines 3
#+beamer: \end{frame}

* Correção exercícios
** Correção dos exercícios
Vamos corrigir juntos no VSCode.

- Mostrar em PDF

* Modelos em TLA+
** Modelos em TLA+
  :PROPERTIES:
  :CUSTOM_ID: modelos-em-tla-2
  :END:
Até agora, vimos principalmente a parte funcional da linguagem.
- Diferente de Quint, não temos operadores exclusivos para ações. Ações são bem parecidas com a parte funcional.
- Podemos identificar ações pelo operador /primed/ (='= ), e pelo =UNCHANGED=

*Estado inicial:*
- Em Quint, o estado inicial é uma ação (como =x' = 0=)
- Em TLA+, o estado inicial é um predicado (como =x = 0=, que em Quint seria =x==0=).
   - Lemos como "Um estado é um estado inicial sse satisfaz $Init$"

* Semáforos
** Especificação para os semáforos
#+begin_src tla
----- MODULE Semaforos ------
EXTENDS Integers, FiniteSets
VARIABLE cores, proximo
CONSTANT SEMAFOROS
\* ...
=============================
#+end_src

#+BEAMER: \medskip
#+BEAMER: \pause
PS: Consultei a [[https://github.com/tlaplus/tlaplus-standard/blob/main/grammar/TLAPlus2Grammar.tla][gramática]] de TLA+ e precisamos de pelo menos 4 hífens (=----= ) antes e depois de =MODULE nome= e pelo menos 4 iguais (======) no final.

#+begin_src tla
TLAPlusGrammar == \* ...
  G.Module ::= AtLeast4("-")
    & tok("MODULE") & Name & AtLeast4("-")
    & (Nil | (tok("EXTENDS") & CommaList(Name)))
    & (G.Unit)^*
    & AtLeast4("=") \* ...
#+end_src


** Estado inicial
#+begin_src tla
Init ==
  /\ cores = [s \in SEMAFOROS |-> "vermelho"]
  /\ proximo = 0
#+end_src

** Próximo semáforo fica verde
#+begin_src tla
FicaVerde(s) ==
  /\ proximo = s
  /\ \A s2 \in SEMAFOROS : cores[s2] = "vermelho"
  /\ cores' = [cores EXCEPT ![s] = "verde"]
  /\ proximo' = (s + 1) % Cardinality(SEMAFOROS)
#+end_src

#+BEAMER: \medskip
#+BEAMER: \pause
Qual a pré-condição dessa ação?
#+BEAMER: \pause
#+begin_src tla
/\ proximo = s
/\ \A s2 \in SEMAFOROS : cores[s2] = "vermelho"
#+end_src

** Próximo semáforo fica verde: Exercício
#+begin_src tla
FicaVerde(s) ==
  /\ proximo = s
  /\ \A s2 \in SEMAFOROS : cores[s2] = "vermelho"
  /\ cores' = [cores EXCEPT ![s] = "verde"]
  /\ proximo' = (s + 1) % Cardinality(SEMAFOROS)
#+end_src

*Lendo essa ação*: tente prencher as lacunas
"=FicaVerde= para um semáforo =s= define uma transição onde, no estado atual, =__________= deve ser =__________= e =___________= deve =_________=; e no próximo estado, =_________= deve ser =_________= e =___________= deve ser =___________="
** Próximo semáforo fica verde: Exercício
:PROPERTIES:
:CUSTOM_ID: proximo-semaforo-fica-verde-exercicio
:END:
#+begin_src tla
FicaVerde(s) ==
  /\ proximo = s
  /\ \A s2 \in SEMAFOROS : cores[s2] = "vermelho"
  /\ cores' = [cores EXCEPT ![s] = "verde"]
  /\ proximo' = (s + 1) % Cardinality(SEMAFOROS)
#+end_src

*Possível resolução:*
"=FicaVerde= para um semáforo =s= define uma transição onde, no estado atual, _o valor de proximo_ deve ser _igual ao semáforo s_ e _o valor de cores para cada semáforo em SEMAFOROS_ deve ser vermelho; e no próximo estado, _o valor de cores_ deve ser _igual a cores no estado atual, exceto que o valor de s deve ser verde_ e _o valor de proximo_ deve ser _o incremento do valor no estado atual módulo o tamanho do conjunto SEMAFOROS_".

** Um semáforo que está verde fica amarelo
#+begin_src tla
FicaAmarelo(s) ==
  /\ cores[s] = "verde"
  /\ cores' = [cores EXCEPT ![s] = "amarelo"]
  /\ UNCHANGED << proximo >>
#+end_src
#+BEAMER: \medskip
#+BEAMER: \pause
Qual a pré-condição dessa ação?
#+BEAMER: \pause
#+begin_src tla
cores[s] = "verde"
#+end_src

** Um semáforo que está amarelo fica vermelho
#+begin_src tla
FicaVermelho(s) ==
  /\ cores[s] = "amarelo"
  /\ cores' = [cores EXCEPT ![s] = "vermelho"]
  /\ UNCHANGED << proximo >>
#+end_src
#+BEAMER: \medskip
#+BEAMER: \pause
Qual a pré-condição dessa ação?
#+BEAMER: \pause
#+begin_src tla
cores[s] = "amarelo"
#+end_src

** Função de próximo estado
#+begin_src tla
Next == \E s \in SEMAFOROS : FicaVerde(s) \/ FicaAmarelo(s) \/ FicaVermelho(s)
#+end_src

#+BEAMER: \medskip
#+BEAMER: \pause
Lembrando que TLA+ permite usarmos ações dentro de um /exists/, diferentemente de Quint onde é necessário usar o =nondet= e =oneOf=.

** Propriedades
Uma invariante para check de sanidade:
#+begin_src tla
Inv == cores[2] /= "amarelo"
#+end_src

#+BEAMER: \medskip
#+BEAMER: \pause
Uma propriedade do sistema: para que os veículos não colidam, não podemos ter mais de um semáforo aberto ao mesmo tempo.
#+begin_src tla
SemColisao == Cardinality({s \in SEMAFOROS : cores[s] = "verde"}) <= 1
#+end_src

* Jogo da Velha
** Jogo da Velha em TLA+
Vamos ver a mesma especificação do jogo da velha, agora em TLA+
- Vamos direto pra versão onde o jogador X usa estratégia
- Vou usar a versão original do autor [cite:@tictactoe-blogpost]
  - A especificação em Quint é baseada nesta, mas não é uma tradução direta. Poderíamos escrever a tradução mais próxima possível, mas não é esse o caso. Eu escrevi como achei que seria melhor, dado os recursos da linguagem.

** Módulo
#+begin_src tla
-------- MODULE tictactoexwin ---------

EXTENDS Naturals

\* ...

=======================================
#+end_src

** +Tipos e+ variáveis
Definimos as seguintes variáveis
#+begin_src tla
VARIABLES
  board, \* board[1..3][1..3] A 3x3 tic-tac-toe board
  nextTurn \* who goes next
#+end_src

** Definições sobre coordenadas e tabuleiro

#+begin_src tla
BoardIs(coordinate, player) ==
    board[coordinate[1]][coordinate[2]] = player

BoardFilled ==
    \* There does not exist
    ~\E i \in 1..3, j \in 1..3:
        \* an empty space
        LET space == board[i][j] IN
        space = "_"

BoardEmpty ==
    \* There does not exist
    \A i \in 1..3, j \in 1..3:
        \* an empty space
        LET space == board[i][j] IN
        space = "_"
#+end_src

** Definindo "ganhar" - coordenadas
- Como o tabuleiro é sempre 3x3, é mais fácil listar todas as combinações de coordenadas que levam a uma vitória do que implementar os cálculos.
- Usamos tuplas! Na implementação em Quint, usamos =filter= e =size= para ver se um /pattern/ tinha dois X e um branco, um X e dois brancos, etc. Aqui, o autor usa listas de permutação.
#+begin_src tla
WinningPositions == {
    \* Horizonal wins
    <<<<1,1>>, <<1,2>>, <<1,3>>>>,
    <<<<2,1>>, <<2,2>>, <<2,3>>>>,
    <<<<3,1>>, <<3,2>>, <<3,3>>>>,
    \* Vertical wins
    <<<<1,1>>, <<2,1>>, <<3,1>>>>,
    <<<<1,2>>, <<2,2>>, <<3,2>>>>,
    <<<<1,3>>, <<2,3>>, <<3,3>>>>,
    \* Diagonal wins
    <<<<1,1>>, <<2,2>>, <<3,3>>>>,
    <<<<3,1>>, <<2,2>>, <<1,3>>>>
}
#+end_src

** Definindo "ganhar" - operador won
Usamos a definição para =winningPositions= para determinar se um jogador venceu.
#+begin_src tla
Won(player) ==
    \* A player has won if there exists a winning position
    \E winningPosition \in WinningPositions:
        \* Where all the needed spaces
        \A i \in 1..3:
            \* are occupied by one player
            board[winningPosition[i][1]][winningPosition[i][2]] = player
#+end_src

** Ações - Move
Um dado jogador faz uma jogada (um /move/) em uma dada coordenada
  - Determinístico
#+begin_src tla
Move(player, coordinate) ==
    /\ board[coordinate[1]][coordinate[2]] = "_"
    /\ board' = [board EXCEPT
                        ![coordinate[1]][coordinate[2]] = player]

#+end_src
- Qual é a pré-condição pra essa ação?
  #+BEAMER: \pause
  - A pré-condição para essa ação é que a coordenada esteja vazia

** Ações - MoveToEmpty
Um dado jogador faz uma jogada em *alguma* coordenada
  - Não-determinístico
#+begin_src tla
MoveToEmpty(player) ==
  /\ \E i \in 1..3: \E j \in 1..3: \* There exists a position on the board
    /\ board[i][j] = "_" \* Where the board is currently empty
    /\ Move(player, <<i,j>>)
#+end_src
- Qual é a pré-condição pra essa ação?
  #+BEAMER: \pause
  - A pré-condição para essa ação é que o jogo ainda não tenha acabado
  #+BEAMER: \pause
  #+BEAMER: \medskip
- Aonde temos não determinismo aqui?
  #+BEAMER: \pause
  - No uso da ação =Move=, que atualiza a variável =board= dentro de um /exists/ (=\E=).

** Ações - MoveO
#+begin_src tla
MoveO ==
  /\ nextTurn = "O" \* Only enabled on O's turn
  /\ ~Won("X") \* And X has not won
  /\ MoveToEmpty("O") \* O still tries every empty space
  /\ nextTurn' = "X" \* The future state of next turn is X
#+end_src

- Qual é a pré-condição pra essa ação?
  #+BEAMER: \pause
  #+begin_src tla
    /\ nextTurn = "O" \* Only enabled on O's turn
    /\ ~Won("X") \* And X has not won
  #+end_src
  - Implicitamente, também temos a pré-condição de =MoveToEmpty= empregada nessa ação

** Estratégia para o jogador X
*Estratégia*:
- A primeira jogada é sempre nos cantos
- As outras jogadas fazem a primeira jogada possível nessa lista de prioridade:
  - Ganhar
  - Bloquear
  - Jogar no centro
  - Preparar uma vitória (preenchendo 2 de 3 quadrados numa fila/coluna/diagonal)
  - Jogada qualquer

** Começando com os cantos
#+begin_src tla
Corners == {
    <<1,1>>,
    <<3,1>>,
    <<1,3>>,
    <<3,3>>
}

StartInCorner ==
    \E corner \in Corners:
        Move("X", corner)
#+end_src

** Condições para as jogadas
Precisamos definir as condições que determinam se cada uma das jogadas na lista de prioridade pode ser feita.
  #+BEAMER: \pause
  #+BEAMER: \medskip
Para isso, nessa especificação, definimos as permutações, e fazemos um nível a mais de interação (com /exists/), verificando, para cada =winningPosition= e para cada permutação, se aquela permutação da =winningPosition= é uma ordem específica do que queremos (X, X, e vazio).
#+begin_src tla
PartialWins == {
    <<1,2,3>>,
    <<2,3,1>>,
    <<3,1,2>>
}
#+end_src

#+BEAMER: \end{frame}
#+BEAMER: \begin{frame}[fragile]{Condições para as jogadas II}
#+begin_src tla
CanWin == \E winningPostion \in WinningPositions, partialWin \in PartialWins:
  /\ BoardIs(winningPostion[partialWin[1]],"X")
  /\ BoardIs(winningPostion[partialWin[2]],"X")
  /\ BoardIs(winningPostion[partialWin[3]],"_")

CanBlockWin == \E winningPostion \in WinningPositions, partialWin \in PartialWins:
  /\ BoardIs(winningPostion[partialWin[1]], "O")
  /\ BoardIs(winningPostion[partialWin[2]], "O")
  /\ BoardIs(winningPostion[partialWin[3]], "_")

#+end_src

#+BEAMER: \end{frame}
#+BEAMER: \begin{frame}[fragile]{Condições para as jogadas III}

#+begin_src tla
CanTakeCenter == board[2][2] = "_"

CanSetupWin == \E winningPostion \in WinningPositions, partialWin \in PartialWins:
  /\ BoardIs(winningPostion[partialWin[1]], "X")
  /\ BoardIs(winningPostion[partialWin[2]], "_")
  /\ BoardIs(winningPostion[partialWin[3]], "_")
#+end_src

** Ações - Win
#+begin_src tla
Win == \E winningPostion \in WinningPositions, partialWin \in PartialWins:
  /\ BoardIs(winningPostion[partialWin[1]],"X")
  /\ BoardIs(winningPostion[partialWin[2]],"X")
  /\ BoardIs(winningPostion[partialWin[3]],"_")
  /\ Move("X", winningPostion[partialWin[3]])
#+end_src

- Qual é a pré-condição pra essa ação?
#+BEAMER: \pause
 #+begin_src tla
\E winningPostion \in WinningPositions, partialWin \in PartialWins:
  /\ BoardIs(winningPostion[partialWin[1]],"X")
  /\ BoardIs(winningPostion[partialWin[2]],"X")
  /\ BoardIs(winningPostion[partialWin[3]],"_")

 #+end_src
 - Percebam que essa pré condição é exatamente =CanWin=
 - Porém, não conseguimos usar =CanWin= aqui porque precisamos saber em qual posição jogar.

** Ações - BlockWin
De forma semelhante, =BlockWin=:
#+begin_src tla
BlockWin == \E winningPostion \in WinningPositions, partialWin \in PartialWins:
  /\ BoardIs(winningPostion[partialWin[1]], "O")
  /\ BoardIs(winningPostion[partialWin[2]], "O")
  /\ BoardIs(winningPostion[partialWin[3]], "_")
  /\ Move("X", winningPostion[partialWin[3]])
#+end_src

** Ações - TakeCenter e SetupWin
#+begin_src tla
TakeCenter ==
    /\ Move("X", <<2,2>>)

SetupWin == \E winningPostion \in WinningPositions, partialWin \in PartialWins:
  /\ BoardIs(winningPostion[partialWin[1]], "X")
  /\ BoardIs(winningPostion[partialWin[2]], "_")
  /\ BoardIs(winningPostion[partialWin[3]], "_")
  /\ \E i \in 2..3:
    Move("X", winningPostion[partialWin[i]])
#+end_src

** Ações - MoveX
#+begin_src tla
MoveX ==
    /\ nextTurn = "X" \* Only enabled on X's turn
    /\ ~Won("O") \* And X has not won
    \* This specifies the spots X will move on X's turn
    /\ \/ /\ BoardEmpty
          /\ StartInCorner
       \/ /\ ~BoardEmpty \* If its not the start
          /\ \/ /\ CanWin
                /\ Win
             \/ /\ ~CanWin
                /\  \/ /\ CanBlockWin
                       /\ BlockWin
                    \/ /\ ~CanBlockWin
                       /\ \/ /\ CanTakeCenter
                             /\ TakeCenter
                          \/ /\ ~CanTakeCenter
                             /\ \/ /\ CanSetupWin
                                   /\ SetupWin
                                \/ /\ ~CanSetupWin
                                  /\ MoveToEmpty("X") \* No more strategies. Pick spot
    /\ nextTurn' = "O" \* The future state of next turn is O
#+end_src

** Estado inicial
:PROPERTIES:
:CUSTOM_ID: estado-inicial-2-2
:END:
#+begin_src tla
Init ==
  /\ nextTurn = "X" \* X always goes first
  \* Every space in the board states blank
  /\ board = [i \in 1..3 |-> [j \in 1..3 |-> "_"]]
#+end_src

** Transições
#+begin_src tla
GameOver == Won("X") /\ Won("O") /\ BoardFilled

\* Every state, X will move if X's turn, O will move on O's turn
Next == MoveX \/ MoveO \/ (GameOver /\ UNCHANGED << board, nextTurn >>)
#+end_src

- Nota: isso está um pouco diferente na especificação inicial. Veremos isso na aula sobre fórmulas temporais em TLA+.

** Invariantes
#+begin_src tla
XHasNotWon == ~Won("X")
OHasNotWon == ~Won("O")

\* It's not a stalemate if one player has won or the board is not filled
NotStalemate ==
    \/ Won("X")
    \/ Won("O")
    \/ ~BoardFilled
#+end_src

** Referências
#+print_bibliography:

#+beamer: \end{frame} \maketitle
