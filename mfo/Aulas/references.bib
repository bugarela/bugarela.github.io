@article{10_1145_1550995,
author = {Koo, Heon-Mo and Mishra, Prabhat},
title = {Functional Test Generation Using Design and Property Decomposition Techniques},
year = {2009},
issue_date = {July 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {4},
issn = {1539-9087},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1550987.1550995},
doi = {10.1145/1550987.1550995},
abstract = {Functional verification of microprocessors is one of the most complex and expensive t10.1145/1368088.1368128asks in the current system-on-chip design methodology. Simulation using functional test vectors is the most widely used form of processor validation. A significant bottleneck in the validation of such systems is the lack of automated techniques for directed test generation. While existing model checking--based approaches have proposed several promising ideas for automated test generation, many challenges remain in applying them to industrial microprocessors. The time and resources required for test generation using existing model checking--based techniques can be prohibitively large. This article presents an efficient test generation technique using decompositional model checking. The contribution of the article is the development of both property and design decomposition procedures for efficient test generation of pipelined processors. Our experimental results using a multi-issue MIPS processor and an industrial processor based on Power Architecture™ Technology demonstrate several orders-of-magnitude reduction in validation effort by drastically reducing both test generation time and test program length.},
journal = {ACM Trans. Embed. Comput. Syst.},
month = jul,
articleno = {32},
numpages = {33},
keywords = {design decomposition, functional validation, pipelined processor, property decomposition, test generation, Model checking}
}

@inproceedings{10_1145_1007526,
author = {Visser, Willem and PǍSǍREANU, Corina S. and Khurshid, Sarfraz},
title = {Test Input Generation with Java PathFinder},
year = {2004},
isbn = {1581138202},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1007512.1007526},
doi = {10.1145/1007512.1007526},
abstract = {We show how model checking and symbolic execution can be used to generate test inputs to achieve structural coverage of code that manipulates complex data structures. We focus on obtaining branch-coverage during unit testing of some of the core methods of the red-black tree implementation in the Java TreeMap library, using the Java PathFinder model checker. Three different test generation techniques will be introduced and compared, namely, straight model checking of the code, model checking used in a black-box fashion to generate all inputs up to a fixed size, and lastly, model checking used during white-box test input generation. The main contribution of this work is to show how efficient white-box test input generation can be done for code manipulating complex data, taking into account complex method preconditions.},
booktitle = {Proceedings of the 2004 ACM SIGSOFT International Symposium on Software Testing and Analysis},
pages = {97–107},
numpages = {11},
keywords = {testing object-oriented programs, red-black trees, symbolic execution, coverage, model checking},
location = {Boston, Massachusetts, USA},
series = {ISSTA '04}
}

@inproceedings{10_5555_1871043,
author = {Chen, Mingsong and Qin, Xiaoke and Mishra, Prabhat},
title = {Efficient Decision Ordering Techniques for SAT-Based Test Generation},
year = {2010},
isbn = {9783981080162},
publisher = {European Design and Automation Association},
address = {Leuven, BEL},
abstract = {Model checking techniques are promising for automated generation of directed tests. However, due to the prohibitively large time and resource requirements, conventional model checking techniques do not scale well when checking complex designs. In SAT-based BMC, many variable ordering heuristics have been investigated to improve counterexample (test) generation involving only one property. This paper presents efficient decision ordering techniques that can improve the overall test generation time of a cluster of similar properties. Our method exploits the assignments of previously generated tests and incorporates it in the decision ordering heuristic for current test generation. Our experimental results using both software and hardware benchmarks demonstrate that our approach can drastically reduce the overall test generation time.},
booktitle = {Proceedings of the Conference on Design, Automation and Test in Europe},
pages = {490–495},
numpages = {6},
location = {Dresden, Germany},
series = {DATE '10}
}

@inproceedings{10_5555_2048483,
author = {Napoli, Margherita and Parente, Mimmo},
title = {Graded CTL Model Checking for Test Generation},
year = {2011},
publisher = {Society for Computer Simulation International},
address = {San Diego, CA, USA},
abstract = {Recently there has been a great attention from the scientific community towards the use of the model-checking technique as a tool for test generation in the simulation field. This paper aims to provide a useful mean to get more insights along these lines. By applying recent results in the field of graded temporal logics, we present a new efficient model-checking algorithm for Hierarchical Finite State Machines (HSM), a well established symbolism long and widely used for representing hierarchical models of discrete systems. Performing model-checking against specifications expressed using graded temporal logics has the peculiarity of returning more counterexamples within a unique run. We think that this can greatly improve the efficacy of automatically getting test cases. In particular we verify two different models of HSM against branching time temporal properties.},
booktitle = {Proceedings of the 2011 Symposium on Theory of Modeling &amp; Simulation: DEVS Integrative M&amp;S Symposium},
pages = {59–66},
numpages = {8},
keywords = {graded temporal logics, hierarchical finite state machines, model checking, test generation},
location = {Boston, Massachusetts},
series = {TMS-DEVS '11}
}

@inproceedings{10_5555_776844,
author = {Hong, Hyoung Seok and Cha, Sung Deok and Lee, Insup and Sokolsky, Oleg and Ural, Hasan},
title = {Data Flow Testing as Model Checking},
year = {2003},
isbn = {076951877X},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {This paper presents a model checking-based approach to data flow testing. We characterize data flow oriented coverage criteria in temporal logic such that the problem of test generation is reduced to the problem of finding witnesses for a set of temporal logic formulas. The capability of model checkers to construct witnesses and counterexamples allows test generation to be fully automatic. We discuss complexity issues in minimal cost test generation and describe heurstic test generation algorithms. We illustrate our approach using CTL as temporal logic and SMV as model checker.},
booktitle = {Proceedings of the 25th International Conference on Software Engineering},
pages = {232–242},
numpages = {11},
location = {Portland, Oregon},
series = {ICSE '03}
}

@inproceedings{10.1109/ICSE.2007.37,
author = {Pacheco, Carlos and Lahiri, Shuvendu K. and Ernst, Michael D. and Ball, Thomas},
title = {Feedback-Directed Random Test Generation},
year = {2007},
isbn = {0769528287},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1109/ICSE.2007.37},
doi = {10.1109/ICSE.2007.37},
abstract = {We present a technique that improves random test generation by incorporating feedback obtained from executing test inputs as they are created. Our technique builds inputs incrementally by randomly selecting a method call to apply and finding arguments from among previously-constructed inputs. As soon as an input is built, it is executed and checked against a set of contracts and filters. The result of the execution determines whether the input is redundant, illegal, contract-violating, or useful for generating more inputs. The technique outputs a test suite consisting of unit tests for the classes under test. Passing tests can be used to ensure that code contracts are preserved across program changes; failing tests (that violate one or more contract) point to potential errors that should be corrected. Our experimental results indicate that feedback-directed random test generation can outperform systematic and undirected random test generation, in terms of coverage and error detection. On four small but nontrivial data structures (used previously in the literature), our technique achieves higher or equal block and predicate coverage than model checking (with and without abstraction) and undirected random generation. On 14 large, widely-used libraries (comprising 780KLOC), feedback-directed random test generation finds many previously-unknown errors, not found by either model checking or undirected random generation.},
booktitle = {Proceedings of the 29th International Conference on Software Engineering},
pages = {75–84},
numpages = {10},
series = {ICSE '07}
}

@inproceedings{10_1145_1127991,
author = {Koo, Heon-Mo and Mishra, Prabhat},
title = {Test Generation Using SAT-Based Bounded Model Checking for Validation of Pipelined Processors},
year = {2006},
isbn = {1595933476},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1127908.1127991},
doi = {10.1145/1127908.1127991},
abstract = {Functional verification is one of the major bottlenecks in microprocessor design. Simulation-based techniques are the most widely used form of processor verification. Efficient test generation is crucial for the simulation-based verification. We present an efficient test generation methodology using SAT-based bounded model checking (BMC). This paper addresses two important challenges in test generation using SAT-based BMC: determination of bound for each property, and application of design and property decompositions to improve test generation time as well as memory requirement. Our experimental results using a MIPS processor demonstrate the feasibility and usefulness of our approach.},
booktitle = {Proceedings of the 16th ACM Great Lakes Symposium on VLSI},
pages = {362–365},
numpages = {4},
keywords = {functional validation, test generation},
location = {Philadelphia, PA, USA},
series = {GLSVLSI '06}
}

@inproceedings{10_1145_1366145,
author = {Chen, Mingsong and Mishra, Prabhat and Kalita, Dhrubajyoti},
title = {Coverage-Driven Automatic Test Generation for Uml Activity Diagrams},
year = {2008},
isbn = {9781595939999},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1366110.1366145},
doi = {10.1145/1366110.1366145},
abstract = {Due to the increasing complexity of today's embedded systems, the analysis and validation of such systems is becoming a major challenge. UML is gradually adopted in the embedded system design as a system level specification. One of the major bottlenecks in the validation of UML activity diagrams is the lack of automated techniques for directed test generation. This paper proposes an automated test generation approach for the UML activity diagrams. The contribution of this paper is the use of specification coverage to generate properties as well as design models to enable directed test generation using model checking. Our experimental results demonstrate that our approach can drastically reduce the validation effort in both specification and implementation levels.},
booktitle = {Proceedings of the 18th ACM Great Lakes Symposium on VLSI},
pages = {139–142},
numpages = {4},
keywords = {uml activity diagrams, test generation},
location = {Orlando, Florida, USA},
series = {GLSVLSI '08}
}

@article{10_1145_1109120,
author = {Suhaib, Syed M. and Mathaikutty, Deepak A. and Shukla, Sandeep K. and Berner, David},
title = {XFM: An Incremental Methodology for Developing Formal Models},
year = {2005},
issue_date = {October 2005},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {10},
number = {4},
issn = {1084-4309},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1109118.1109120},
doi = {10.1145/1109118.1109120},
abstract = {We present an agile formal methodology named eXtreme Formal Modeling (XFM), based on Extreme Programming (XP) concepts to construct abstract models from natural language specifications of complex systems. In particular, we focus on Prescriptive Formal Models (PFMs) that capture the specification of the system under design in a mathematically precise manner. Such models can be used as golden reference models for formal verification, test generation, coverage monitor generation, etc. This methodology for incrementally building PFMs works by adding user stories expressed as LTL formulae gleaned from the natural language specifications, one by one, into the model. XFM builds the models, retaining correctness with respect to incrementally added properties by regressively model-checking all the LTL properties captured theretofore in the model. We illustrate XFM with a graded set of examples consisting of a traffic light controller and a DLX pipeline. To make the regressive model-checking steps feasible with current model-checking tools, we need to control the model size increments at each subsequent step in the process. We therefore analyze the effects of ordering the LTL properties in XFM on the statespace growth rate of the model. We compare three different property-ordering methodologies: ad hoc ordering, property-based ordering, and predicate-based ordering. We experiment on the models of the ISA bus monitor and the arbitration phase of the Pentium Pro bus. We experimentally show and mathematically reason that the predicate-based ordering is the best among these orderings. Finally, we present a GUI-based toolbox that we implemented to build PFMs using XFM.},
journal = {ACM Trans. Des. Autom. Electron. Syst.},
month = oct,
pages = {589–609},
numpages = {21},
keywords = {extreme programming, formal verification, SMV, prescriptive formal models, property ordering, formal specification, property refactoring, Extreme formal modeling, SPIN}
}

@inproceedings{10_1145_1278527,
author = {Vardi, Moshe Y.},
title = {Formal Techniques for SystemC Verification},
year = {2007},
isbn = {9781595936271},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1278480.1278527},
doi = {10.1145/1278480.1278527},
abstract = {SystemC has emerged lately as a de facto, open, industry standard modeling language, enabling a wide range of modeling levels, from RTL to system level. Its increasing acceptance is driven by the increasing complexity of designs, pushing designers to higher and higher levels of abstractions.While a major goal of SystemC is to enable verification at higher level of abstraction, enabling early exploration of system-level designs, the focus so far has been on traditional dynamic validation techniques. It is fair to see that the development of formal-verification techniques for SystemC models is at its infancy. In spite of intensive recent activity in the development of formal-verification techniques for software, extending such techniques to SystemC is a formidable challenge. The difficulty stems from both the object-oriented nature of SystemC, which is fundamental to its modeling philosophy, and its sophisticated event-driven simulation semantics.In this position paper we discuss what is needed to develop formal techniques for SystemC verification, augmenting dynamic validation techniques. By formal techniques we refer here to a range of techniques, including assertion-based dynamic validation, symbolic simulation, formal test generation, explicit-state model checking, and symbolic model checking.},
booktitle = {Proceedings of the 44th Annual Design Automation Conference},
pages = {188–192},
numpages = {5},
keywords = {formal verification, high-level model},
location = {San Diego, California},
series = {DAC '07}
}

@inproceedings{10_1145_2786837,
author = {Arcaini, Paolo and Gargantini, Angelo and Riccobene, Elvinia},
title = {Improving Model-Based Test Generation by Model Decomposition},
year = {2015},
isbn = {9781450336758},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/2786805.2786837},
doi = {10.1145/2786805.2786837},
abstract = { One of the well-known techniques for model-based test generation exploits the capability of model checkers to return counterexamples upon property violations. However, this approach is not always optimal in practice due to the required time and memory, or even not feasible due to the state explosion problem of model checking. A way to mitigate these limitations consists in decomposing a system model into suitable subsystem models separately analyzable. In this paper, we show a technique to decompose a system model into subsystems by exploiting the model variables dependency, and then we propose a test generation approach which builds tests for the single subsystems and combines them later in order to obtain tests for the system as a whole. Such approach mitigates the exponential increase of the test generation time and memory consumption, and, compared with the same model-based test generation technique applied to the whole system, shows to be more efficient. We prove that, although not complete, the approach is sound. },
booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
pages = {119–130},
numpages = {12},
keywords = {abstraction, state explosion problem, model-based testing, Test case generation},
location = {Bergamo, Italy},
series = {ESEC/FSE 2015}
}

@inproceedings{10_5555_1015142,
author = {Smith, Alexander and Veneris, Andreas and Viglas, Anastasios},
title = {Design Diagnosis Using Boolean Satisfiability},
year = {2004},
isbn = {0780381750},
publisher = {IEEE Press},
abstract = {Recent advances in Boolean satisfiability have made it an attractive engine for solving many digital VLSI design problems such as verification, model checking, optimization and test generation. Fault diagnosis and logic debugging have not been addressed by existing satisfiability-based solutions. This paper attempts to bridge this gap by proposing a satisfiability-based solution to these problems. The proposed formulation is intuitive and easy to implement. It shows that satisfiability captures significant problem characateristics and it offers different trade-offs. It also provides new opportunities for satisfiability-based diagnosis tools and diagnosis-specific satisfiability algorithms. Theory and experiments validate the claims and demonstrate its potential.},
booktitle = {Proceedings of the 2004 Asia and South Pacific Design Automation Conference},
pages = {218–223},
numpages = {6},
location = {Yokohama, Japan},
series = {ASP-DAC '04}
}

@inproceedings{10_1145_2660208,
author = {Uhler, Richard and Dave, Nirav},
title = {Smten with Satisfiability-Based Search},
year = {2014},
isbn = {9781450325851},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/2660193.2660208},
doi = {10.1145/2660193.2660208},
abstract = {Satisfiability (SAT) and Satisfiability Modulo Theories (SMT) have been used in solving a wide variety of important and challenging problems, including automatic test generation, model checking, and program synthesis. For these applications to scale to larger problem instances, developers cannot rely solely on the sophistication of SAT and SMT solvers to efficiently solve their queries; they must also optimize their own orchestration and construction of queries. We present Smten, a high-level language for orchestrating and constructing satisfiability-based search queries. We show that applications developed using Smten require significantly fewer lines of code and less developer effort to achieve results comparable to standard SMT-based tools.},
booktitle = {Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages &amp; Applications},
pages = {157–176},
numpages = {20},
keywords = {haskell, domain-specific language, satisfiability modulo theories, satisfiability},
location = {Portland, Oregon, USA},
series = {OOPSLA '14}
}

@inproceedings{10_5555_2492785,
author = {Peranandam, P. and Raviram, S. and Satpathy, M. and Yeolekar, A. and Gadkari, A. and Ramesh, S.},
title = {An Integrated Test Generation Tool for Enhanced Coverage of Simulink/Stateflow Models},
year = {2012},
isbn = {9783981080186},
publisher = {EDA Consortium},
address = {San Jose, CA, USA},
abstract = {Simulink/Stateflow (SL/SF) is the primary modeling notation for the development of control systems in automotive and aerospace industries. In model based testing, test cases derived from a design model are used to show model-code conformance. Safety standards such as ISO 26262 recommend model based testing to show the conformance of a software with the corresponding model. From our experiments with various test generation techniques, we have observed that their coverage capabilities are complementary in nature. With this observation in mind, we have developed a new tool called SmartTestGen which integrates different test generation techniques. In this paper, we discuss SmartTestGen and the different test generation techniques utilized -- random testing, constraint solving, model checking and heuristics. We experimented with 20 production-quality SL/SF models and compared the performance of our tool with that of two prominent commercial tools.},
booktitle = {Proceedings of the Conference on Design, Automation and Test in Europe},
pages = {308–311},
numpages = {4},
location = {Dresden, Germany},
series = {DATE '12}
}

@inproceedings{10_1145_1101951,
author = {Xia, Songtao and Di Vito, Ben and Mu\~{n}oz, C\'{e}sar},
title = {Automated Test Generation for Engineering Applications},
year = {2005},
isbn = {1581139934},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1101908.1101951},
doi = {10.1145/1101908.1101951},
abstract = {In test generation based on model-checking, white-box test criteria are represented as trap conditions written in a temporal logic. A model checker is used to refute trap conditions with counter-examples. From a feasible counter-example test inputs are then generated. The major problems of applying this approach to engineering applications derive from the fact that engineering programs have an infinite state space and non-linear numerical computations. Our solution is to combine predicate abstraction (which reduces the state space) with a numerical decision procedure (which supports predicate abstraction by solving non-linear constraints) based on interval analysis. We have developed a prototype and applied it to MC/DC (Modified Condition/Decision Coverage) test case generation. We have used the prototype on a number of C modules taken from a conflict detection and avoidance system and from a Boeing 737 autopilot simulator. The modules range from tens of lines up to thousands of lines in size. Our experience shows that although in theory the inclusion of a decision procedure for non-linear arithmetic may lead to non-terminating behavior and false positives (as abstraction-based model checking already does), our prototype is able to automatically produce feasible counterexamples with only a few exceptions. Furthermore, the process runs with acceptable execution times, without requiring any other knowledge of the specification, and without tampering with the original C programs.},
booktitle = {Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering},
pages = {283–286},
numpages = {4},
keywords = {test case generation, predicate abstraction, model-checking},
location = {Long Beach, CA, USA},
series = {ASE '05}
}

@inproceedings{10_5555_1326122,
author = {Mangassarian, Hratch and Veneris, Andreas and Safarpour, Sean and Benedetti, Marco and Smith, Duncan},
title = {A Performance-Driven QBF-Based Iterative Logic Array Representation with Applications to Verification, Debug and Test},
year = {2007},
isbn = {1424413826},
publisher = {IEEE Press},
abstract = {Many CAD for VLSI techniques use time-frame expansion, also known as the Iterative Logic Array representation, to model the sequential behavior of a system. Replicating industrial-size designs for many time-frames may impose impractically excessive memory requirements. This work proposes a performance-driven, succinct and parametrizable Quantified Boolean Formula (QBF) satisfiability encoding and its hardware implementation for modeling sequential circuit behavior. This encoding is then applied to three notable CAD problems, namely Bounded Model Checking (BMC), sequential test generation and design debugging. Extensive experiments on industrial circuits confirm outstanding run-time and memory gains compared to state-of-the-art techniques, promoting the use of QBF in CAD for VLSI.},
booktitle = {Proceedings of the 2007 IEEE/ACM International Conference on Computer-Aided Design},
pages = {240–245},
numpages = {6},
location = {San Jose, California},
series = {ICCAD '07}
}

@article{10_1145_2209297,
author = {Qin, Xiaoke and Mishra, Prabhat},
title = {Directed Test Generation for Validation of Multicore Architectures},
year = {2012},
issue_date = {June 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {3},
issn = {1084-4309},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/2209291.2209297},
doi = {10.1145/2209291.2209297},
abstract = {Functional validation is widely acknowledged as a major challenge for multicore architectures. Directed tests are promising since a significantly smaller number of directed tests can achieve the same coverage goal compared to constrained-random tests. SAT-based bounded model checking is effective for automated generation of directed tests (counterexamples). While existing approaches focus on clause forwarding between different bounds to reduce the test generation time, this article proposes a novel technique that exploits temporal, structural, and spatial symmetry in multicore designs at the same time. Our proposed technique enables the reuse of the knowledge learned from one core to the remaining cores in multicore architectures (structural symmetry), from one bound to the next for a give property (temporal symmetry), as well as from one property to other properties (spatial symmetry). The experimental results demonstrate that our approach can significantly (3--10 times) reduce overall test generation time compared to existing approaches.},
journal = {ACM Trans. Des. Autom. Electron. Syst.},
month = jul,
articleno = {24},
numpages = {21},
keywords = {SAT solving, test generation, Multicore architecture, bounded model checking}
}

@article{10_1145_1367051,
author = {Mishra, Prabhat and Dutt, Nikil},
title = {Specification-Driven Directed Test Generation for Validation of Pipelined Processors},
year = {2008},
issue_date = {July 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {3},
issn = {1084-4309},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1367045.1367051},
doi = {10.1145/1367045.1367051},
abstract = {Functional validation is a major bottleneck in pipelined processor design due to the combined effects of increasing design complexity and lack of efficient techniques for directed test generation. Directed test vectors can reduce overall validation effort, since shorter tests can obtain the same coverage goal compared to the random tests. This article presents a specification-driven directed test generation methodology. The proposed methodology makes three important contributions. First, a general graph model is developed that can capture the structure and behavior (instruction set) of a wide variety of pipelined processors. The graph model is generated from the processor specification. Next, we propose a functional fault model that is used to define the functional coverage for pipelined architectures. Finally, we propose two complementary test generation techniques: test generation using model checking, and test generation using template-based procedures. These test generation techniques accept the graph model of the architecture as input and generate test programs to detect all the faults in the functional fault model. Our experimental results on two pipelined processor models demonstrate several orders-of-magnitude reduction in overall validation effort by drastically reducing both test-generation time and number of test programs required to achieve a coverage goal.},
journal = {ACM Trans. Des. Autom. Electron. Syst.},
month = jul,
articleno = {42},
numpages = {36},
keywords = {Model checking, functional validation, test generation}
}

@inproceedings{10_1109_ASE_2015_77,
author = {Toman, John and Pernsteiner, Stuart and Torlak, Emina},
title = {CRUST: A Bounded Verifier for Rust},
year = {2015},
isbn = {9781509000241},
publisher = {IEEE Press},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1109/ASE.2015.77},
doi = {10.1109/ASE.2015.77},
abstract = {Rust is a modern systems language that provides guaranteed memory safety through static analysis. However, Rust includes an escape hatch in the form of "unsafe code," which the compiler assumes to be memory safe and to preserve crucial pointer aliasing invariants. Unsafe code appears in many data structure implementations and other essential libraries, and bugs in this code can lead to memory safety violations in parts of the program that the compiler otherwise proved safe.We present CRUST, a tool combining exhaustive test generation and bounded model checking to detect memory safety errors, as well as violations of Rust's pointer aliasing invariants within unsafe library code. CRUST requires no programmer annotations, only an indication of the modules to check. We evaluate CRUST on data structures from the Rust standard library. It detects memory safety bugs that arose during the library's development and remained undetected for several months.},
booktitle = {Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering},
pages = {75–80},
numpages = {6},
keywords = {SMT-based verification, memory safety, test generation},
location = {Lincoln, Nebraska},
series = {ASE '15}
}

@inproceedings{10_5555_101514210_5555_2830840_2830862,
author = {Ahn, Sunha and Malik, Sharad and Gupta, Aarti},
title = {Completeness Bounds and Sequentialization for Model Checking of Interacting Firmware and Hardware},
year = {2015},
isbn = {9781467383219},
publisher = {IEEE Press},
abstract = {An emerging trend in system design is to implement complex system management functions in firmware (FW). This changing design scenario requires support for verifying FW in the context of its hardware (HW) environment. As shown in previous work, there is value in a unified HW-FW model for driving the verification tasks. This model can help identify specific commonly-occurring interaction patterns between the HW and FW. These patterns enable pruning the verification search space as demonstrated in previous work in automating FW test generation using concolic testing.In this work, we introduce a bounded model checking (BMC)-based methodology for FW verification. Although BMC is effective for finding bugs by unrolling the underlying transition system up to some bound, it requires a completeness threshold on the bound to ensure complete verification. We show how commonly occurring FW code patterns can be exploited, using inexpensive static analysis techniques, to determine this completeness bound. Further, we show how this bound analysis, combined with the interaction patterns in the unified HW-FW model, is used to sequentialize the concurrent FW and HW code, i.e., to derive a sequential program that represents the parallel interaction of the FW and HW. This enables the direct application of standard software model checkers such as CBMC on this sequentialized program.We have automated this process by implementing: (i) a static completeness bound analyzer on top of the tool Frama-C, and (ii) a sequentializer to generate code for verification by the CBMC model checker. We evaluate the resulting tool using three real FW benchmarks, each @inproceedings{10_1145_1127991,
  author = {Koo, Heon-Mo and Mishra, Prabhat},
  title = {Test Generation Using SAT-Based Bounded Model Checking for Validation of Pipelined Processors},
  year = {2006},
  isbn = {1595933476},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1127908.1127991},
  doi = {10.1145/1127908.1127991},
  abstract = {Functional verification is one of the major bottlenecks in microprocessor design. Simulation-based techniques are the most widely used form of processor verification. Efficient test generation is crucial for the simulation-based verification. We present an efficient test generation methodology using SA10.1145/1109118.1109120T-based bounded model checking (BMC). This paper addresses two important challenges in test generation using SAT-based BMC: determination of bound for each property, and application of design and property decompositions to improve test generation time as well as memory requirement. Our experimental results using a MIPS processor demonstrate the feasibility and usefulness of our approach.},
  booktitle = {Proceedings of the 16th ACM Great Lakes Symposium on VLSI},
  pages = {362–365},
  numpages = {4},
  keywords = {functional validation, test generation},
  location = {Philadelphia, PA, USA},
  series = {GLSVLSI '06},
}
consisting of a Linux device driver and its interacting QEMU-emulated HW code with multiple correctness properties. We successfully computed the BMC completeness bounds for 41 out of 46 properties and completed model checking for 12 out of 16 FW transactions.},
booktitle = {Proceedings of the 10th International Conference on Hardware/Software Codesign and System Synthesis},
pages = {202–211},
numpages = {10},
location = {Amsterdam, The Netherlands},
series = {CODES '15}
}


@article{10_1145_3313789,
author = {Reuling, Dennis and Kelter, Udo and B\"{u}rdek, Johannes and Lochau, Malte},
title = {Automated N-Way Program Merging for Facilitating Family-Based Analyses of Variant-Rich Software},
year = {2019},
issue_date = {August 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {3},
issn = {1049-331X},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/3313789},
doi = {10.1145/3313789},
abstract = {Nowadays software tends to come in many different, yet similar variants, often derived from a common code base via clone-and-own. Family-based-analysis strategies have recently shown very promising potential for improving efficiency in applying quality-assurance techniques to such variant-rich programs, as compared to variant-by-variant approaches. Unfortunately, these strategies require a single program representation superimposing all program variants in a syntactically well-formed, semantically sound, and variant-preserving manner, which is usually not available and manually hard to obtain in practice. In this article, we present a novel methodology, called SiMPOSE, for automatically generating superimpositions of existing program variants to facilitate family-based analyses of variant-rich software. To this end, we propose a novel N-way model-merging methodology to integrate the control-flow automaton (CFA) representations of N given variants of a C program into one unified CFA representation. CFA constitute a unified program abstraction used by many recent software-analysis tools for automated quality assurance. To cope with the inherent complexity of N-way model-merging, our approach (1) utilizes principles of similarity-propagation to reduce the number of potential N-way matches, and (2) enables us to decompose a set of N variants into arbitrary subsets and to incrementally derive an N-way superimposition from partial superimpositions. We apply our tool implementation of SiMPOSE to a selection of realistic C programs, frequently considered for experimental evaluation of program-analysis techniques. In particular, we investigate applicability and efficiency/effectiveness trade-offs of our approach by applying SiMPOSE in the context of family-based unit-test generation as well as model-checking as sample program-analysis techniques. Our experimental results reveal very impressive efficiency improvements by an average factor of up to 2.6 for test-generation and up to 2.4 for model-checking under stable effectiveness, as compared to variant-by-variant approaches, thus amortizing the additional effort required for merging. In addition, our results show that merging all N variants at once produces, in almost all cases, clearly more precise results than incremental step-wise 2-way merging. Finally, our comparison with major existing N-way merging techniques shows that SiMPOSE constitutes, in most cases, the best efficiency/effectiveness trade-off.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = jul,
articleno = {13},
numpages = {59},
keywords = {Program merging, control flow automata, variability encoding, model matching, quality assurance}
}

@inproceedings{10_1007_11557432_5,
author = {Chauvel, Franck and J\'{e}z\'{e}quel, Jean-Marc},
title = {Code Generation from UML Models with Semantic Variation Points},
year = {2005},
isbn = {3540290109},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1007/11557432_5},
doi = {10.1007/11557432_5},
abstract = {UML semantic variation points provide intentional degrees of freedom for the interpretation of the metamodel semantics. The interest of semantic variation points is that UML now becomes a family of languages sharing lot of commonalities and some variabilities that one can customize for a given application domain. In this paper, we propose to reify the various semantic variation points of UML 2.0 statecharts into models of their own to avoid hardcoding the semantic choices in the tools. We do the same for various implementation choices. Then, along the line of the OMG's Model Driven Architecture, these semantic and implementation models are processed along with a source UML model (that can be seen as a PIM) to provide a target UML model (a PSM) where all semantic and implementation choice are made explicit. This target model can in turn serve as a basis for a consistent use of code generation, simulation, model-checking or test generation tools.},
booktitle = {Proceedings of the 8th International Conference on Model Driven Engineering Languages and Systems},
pages = {54–68},
numpages = {15},
location = {Montego Bay, Jamaica},
series = {MoDELS'05}
}

@inproceedings{10_1145_1368128,
author = {Lauterburg, Steven and Sobeih, Ahmed and Marinov, Darko and Viswanathan, Mahesh},
title = {Incremental State-Space Exploration for Programs with Dynamically Allocated Data},
year = {2008},
isbn = {9781605580791},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1368088.1368128},
doi = {10.1145/1368088.1368128},
abstract = {We present a novel technique that speeds up state-space exploration (SSE) for evolving programs with dynamically allocated data. SSE is the essence of explicit-state model checking and an increasingly popular method for automating test generation. Traditional, non-incremental SSE takes one version of a program and systematically explores the states reachable during the program's executions to find property violations. Incremental SSE considers several versions that arise during program evolution: reusing the results of SSE for one version can speed up SSE for the next version, since state spaces of consecutive program versions can have significant similarities. We have implemented our technique in two model checkers: Java PathFinder and the J-Sim state-space explorer. The experimental results on 24 program evolutions and exploration changes show that for non-initial runs our technique speeds up SSE in 22 cases from 6.43% to 68.62% (with median of 42.29%) and slows down SSE in only two cases for -4.71% and -4.81%.},
booktitle = {Proceedings of the 30th International Conference on Software Engineering},
pages = {291–300},
numpages = {10},
keywords = {state-space exploration, model checking, incremental computation, java pathfinder, j-sim, jpf},
location = {Leipzig, Germany},
series = {ICSE '08}
}

@inproceedings{10_1145_1450087,
author = {Godefroid, Patrice and Levin, Michael Y. and Molnar, David A.},
title = {Active Property Checking},
year = {2008},
isbn = {9781605584683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1450058.1450087},
doi = {10.1145/1450058.1450087},
abstract = {Runtime property checking (as implemented in tools like Purify or Valgrind) checks whether a program execution satisfies a property. Active property checking extends runtime checking by checking whether the property is satisfied by all program executions that follow the same program path. This check is performed on a symbolic execution of the given program path using a constraint solver. If the check fails, the constraint solver generates an alternative program input triggering a new program execution that follows the same program path but exhibits a property violation. Combined with systematic dynamic test generation, which attempts to exercise all feasible paths in a program, active property checking defines a new form of dynamic software model checking (program verification). In this paper, we formalize and study active property checking. We show how static and dynamic type checking can be extended with active type checking. Then, we discuss how to implement active property checking efficiently. Finally, we discuss results of experiments with media playing applications on Windows, where active property checking was able to detect several new security-related bugs.},
booktitle = {Proceedings of the 8th ACM International Conference on Embedded Software},
pages = {207–216},
numpages = {10},
keywords = {symbolic execution, security, software testing},
location = {Atlanta, GA, USA},
series = {EMSOFT '08}
}

@inproceedings{10_1145_2666610,
author = {Devroey, Xavier and Perrouin, Gilles and Cordy, Maxime and Papadakis, Mike and Legay, Axel and Schobbens, Pierre-Yves},
title = {A Variability Perspective of Mutation Analysis},
year = {2014},
isbn = {9781450330565},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/2635868.2666610},
doi = {10.1145/2635868.2666610},
abstract = { Mutation testing is an effective technique for either improving or generating fault-finding test suites. It creates defective or incorrect program artifacts of the program under test and evaluates the ability of test suites to reveal them. Despite being effective, mutation is costly since it requires assessing the test cases with a large number of defective artifacts. Even worse, some of these artifacts are behaviourally ``equivalent'' to the original one and hence, they unnecessarily increase the testing effort. We adopt a variability perspective on mutation analysis. We model a defective artifact as a transition system with a specific feature selected and consider it as a member of a mutant family. The mutant family is encoded as a Featured Transition System, a compact formalism initially dedicated to model-checking of software product lines. We show how to evaluate a test suite against the set of all candidate defects by using mutant families. We can evaluate all the considered defects at the same time and isolate some equivalent mutants. We can also assist the test generation process and efficiently consider higher-order mutants. },
booktitle = {Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
pages = {841–844},
numpages = {4},
keywords = {Mutation Testing, Featured Transition Systems},
location = {Hong Kong, China},
series = {FSE 2014}
}

@inproceedings{10_1145_1273472,
author = {d'Amorim, Marcelo and Lauterburg, Steven and Marinov, Darko},
title = {Delta Execution for Efficient State-Space Exploration of Object-Oriented Programs},
year = {2007},
isbn = {9781595937346},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/1273463.1273472},
doi = {10.1145/1273463.1273472},
abstract = {State-space exploration is the essence of model checking and an increasingly popular approach for automating test generation. A key issue in exploration of object-oriented programs is handling the program state, in particular the heap. Previous research has focused on standard program execution that operates on one state/heap. We present Delta Execution, a technique that simultaneously operates on several states/heaps. It exploits the fact that many execution paths in state-space exploration partially overlap and speeds up the exploration by sharing the common parts across the executions and separately executing only the "deltas" where the executions differ.We have implemented Delta Execution in JPF, a popular general-purpose model checker for Java programs, and in BOX, a specialized model checker that we have developed for efficient exploration of sequential Java programs. We have evaluated Delta Execution for (bounded) exhaustive exploration of ten basic subject programs without errors. The experimental results show that on average Delta Execution improves the exploration time 10.97x (over an order of magnitude) in JPF and 2.07x in BOX. We have also evaluated Delta Execution for one larger case study with errors, where the exploration time improved up to 1.43x.},
booktitle = {Proceedings of the 2007 International Symposium on Software Testing and Analysis},
pages = {50–60},
numpages = {11},
keywords = {model checking, delta execution},
location = {London, United Kingdom},
series = {ISSTA '07}
}

@inproceedings{10_1145_379035,
author = {Dushina, Julia and Benjamin, Mike and Geist, Daniel},
title = {Semi-Formal Test Generation with Genevieve},
year = {2001},
isbn = {1581132972},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org.ez74.periodicos.capes.gov.br/10.1145/378239.379035},
doi = {10.1145/378239.379035},
abstract = {This paper describes the first application of the Genevieve test generation methodology. The Genevieve approach uses semi-for-mal techniques derived from “model-checking” to generate test suites for specific behaviours of the design under test. An “interest-ing” behaviour is claimed to be unreachable. If a path from an ini-tial state to the state of interest does exist, a counter-example is generated. The sequence of states specifies a test for the desired behaviour.To highlight real problems that could appear during test genera-tion, we chose the Store Data Unit (SDU) of the ST100, a new high performance digital signal processor (DSP) developed by STMi-croelectronics. This unit is specifically selected because of the fol-lowing key issues: big data structures that can not be  directly modelled without state explosion, complex control logic that would require an excessive number of tests to exercise exhaustively, a design where it is difficult to determine how to drive the com-plete system to ensure a given behaviour in the unit under test.The Genvieve methodology allowed us to define a coverage model specifically devoted to covering corner cases of the design. Hence the generated test suite achieved very efficient coverage of corner cases, and checked not only functional correctness but also whether the implementation matched design intent. As a result the Genevieve tests discovered some subtle performance bugs which would otherwise be very difficult to find.},
booktitle = {Proceedings of the 38th Annual Design Automation Conference},
pages = {617–622},
numpages = {6},
location = {Las Vegas, Nevada, USA},
series = {DAC '01}
}

﻿
@article{ ISI_000542525900001,
Author = {Bahrampour, Anvar and Rafe, Vahid},
Title = {{Using search-based techniques for testing executable software models
   specified through graph transformations}},
Journal = {{INTERNATIONAL JOURNAL OF MACHINE LEARNING AND CYBERNETICS}},
Abstract = {{Design by contract is a software development methodology that uses
   contracts for defining interfaces among interacting components of a
   software system. Graph transformation system is used to specify the
   behavioral aspects of software components by defining the pre- and
   post-conditions of methods as contracts. In this paper, we focus on
   testing executable software models specified by a graph transformation
   system. A set of model-specific coverage criteria and a cost-aware
   search-based test generation approach are introduced. To evaluate the
   effectiveness of the proposed coverage criteria and the test generation
   approach, a type of mutation analysis is presented at the model level.
   Furthermore, a couple of fault-detection methods are used to assess the
   quality of the generated tests in the model-level mutation analysis. The
   proposed approach is implemented in GROOVE, a toolset for model checking
   graph transformation systems. The empirical results based on some
   well-known case studies demonstrate the efficiency and scalability of
   each proposed coverage criterion and testing approach. The comparison of
   the proposed test generation approach with state-of-the-art techniques
   indicates a significant improvement in terms of fault-detection
   capability and testing costs.}},
Publisher = {{SPRINGER HEIDELBERG}},
Address = {{TIERGARTENSTRASSE 17, D-69121 HEIDELBERG, GERMANY}},
Type = {{Article; Early Access}},
Language = {{English}},
Affiliation = {{Rafe, V (Corresponding Author), Arak Univ, Fac Engn, Dept Comp Engn, Arak 3815688349, Iran.
   Bahrampour, Anvar; Rafe, Vahid, Arak Univ, Fac Engn, Dept Comp Engn, Arak 3815688349, Iran.}},
DOI = {{10.1007/s13042-020-01149-9}},
ISSN = {{1868-8071}},
EISSN = {{1868-808X}},
Keywords = {{Model testing; Graph transformation specification; Specification
   testing; Design by contract; Coverage criteria}},
Keywords-Plus = {{GENERATION; CHECKING; CHECKERS}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Artificial Intelligence}},
Author-Email = {{a-bahrampour@phd.araku.ac.ir
   v-rafe@araku.ac.ir}},
Number-of-Cited-References = {{53}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{1}},
Usage-Count-Since-2013 = {{1}},
Journal-ISO = {{Int. J. Mach. Learn. Cybern.}},
Doc-Delivery-Number = {{MB3SS}},
Unique-ID = {{ISI:000542525900001}},
DA = {{2020-08-28}},
}

@article{ ISI_000496205700002,
Author = {Reuling, Dennis and Kelter, Udo and Buerdek, Johannes and Lochau, Malte},
Title = {{Automated N-way Program Merging for Facilitating Family-based Analyses
   of Variant-rich Software}},
Journal = {{ACM TRANSACTIONS ON SOFTWARE ENGINEERING AND METHODOLOGY}},
Year = {{2019}},
Volume = {{28}},
Number = {{3}},
Month = {{AUG}},
Abstract = {{Nowadays software tends to come in many different, yet similar variants,
   often derived from a common code base via clone-and-own.
   Family-based-analysis strategies have recently shown very promising
   potential for improving efficiency in applying quality-assurance
   techniques to such variant-rich programs, as compared to
   variant-by-variant approaches. Unfortunately, these strategies require a
   single program representation superimposing all program variants in a
   syntactically well-formed, semantically sound, and variant-preserving
   manner, which is usually not available and manually hard to obtain in
   practice. In this article, we present a novel methodology, called
   SIMPOSE, for automatically generating superimpositions of existing
   program variants to facilitate family-based analyses of variant-rich
   software. To this end, we propose a novel N-way model-merging
   methodology to integrate the control-flow automaton (CFA)
   representations of N given variants of a C program into one unified CFA
   representation. CFA constitute a unified program abstraction used by
   many recent software-analysis tools for automated quality assurance. To
   cope with the inherent complexity of N-way model-merging, our approach
   (1) utilizes principles of similarity-propagation to reduce the number
   of potential N-way matches, and (2) enables us to decompose a set of N
   variants into arbitrary subsets and to incrementally derive an N-way
   superimposition from partial superimpositions. We apply our tool
   implementation of SIMPOSE to a selection of realistic C programs,
   frequently considered for experimental evaluation of program-analysis
   techniques. In particular, we investigate applicability and
   efficiency/effectiveness tradeoffs of our approach by applying SIMPOSE
   in the context of family-based unit-test generation as well as
   model-checking as sample program-analysis techniques. Our experimental
   results reveal very impressive efficiency improvements by an average
   factor of up to 2.6 for test-generation and up to 2.4 for model-checking
   under stable effectiveness, as compared to variant-by-variant
   approaches, thus amortizing the additional effort required for merging.
   In addition, our results show that merging all N variants at once
   produces, in almost all cases, clearly more precise results than
   incremental step-wise 2-way merging. Finally, our comparison with major
   existing N-way merging techniques shows that SIMPOSE constitutes, in
   most cases, the best efficiency/effectiveness trade-off.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Reuling, D (Corresponding Author), Univ Siegen, Software Engn Grp, Holderlinstr 3, D-57068 Siegen, Germany.
   Reuling, Dennis; Kelter, Udo, Univ Siegen, Software Engn Grp, Holderlinstr 3, D-57068 Siegen, Germany.
   Buerdek, Johannes; Lochau, Malte, Tech Univ Darmstadt, Real Time Syst Lab, Merckstr 25, D-64283 Darmstadt, Germany.}},
DOI = {{10.1145/3313789}},
Article-Number = {{13}},
ISSN = {{1049-331X}},
EISSN = {{1557-7392}},
Keywords = {{Program merging; control flow automata; model matching; variability
   encoding; quality assurance}},
Keywords-Plus = {{CLONE DETECTION; SIMILARITY; MODELS}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{dreuling@informatik.uni-siegen.de
   kelter@informatik.uni-siegen.de
   johannes.buerdek@es.tu-darmstadt.de
   malte.lochau@es.tu-darmstadt.de}},
Funding-Acknowledgement = {{DFG (German Research Foundation) within the CoMoVa projectGerman
   Research Foundation (DFG) {[}330452222]; DFG (German Research
   Foundation)German Research Foundation (DFG) {[}SPP 1593]; Hessian LOEWE
   initiative within the Software Factory 4.0 project}},
Funding-Text = {{This work was partially supported by the DFG (German Research
   Foundation) within the CoMoVa project (Grant No. 330452222). This work
   was partially supported by the DFG (German Research Foundation) under
   the Priority Programme SPP 1593: Design For Future-Managed Software
   Evolution. This work was funded by the Hessian LOEWE initiative within
   the Software Factory 4.0 project.}},
Number-of-Cited-References = {{69}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Journal-ISO = {{ACM Trans. Softw. Eng. Methodol.}},
Doc-Delivery-Number = {{JM4SI}},
Unique-ID = {{ISI:000496205700002}},
DA = {{2020-08-28}},
}

@article{ ISI_000468230000003,
Author = {Arcaini, Paolo and Gargantini, Angelo and Riccobene, Elvinia},
Title = {{Decomposition-Based Approach for Model-Based Test Generation}},
Journal = {{IEEE TRANSACTIONS ON SOFTWARE ENGINEERING}},
Year = {{2019}},
Volume = {{45}},
Number = {{5}},
Pages = {{507-520}},
Month = {{MAY}},
Abstract = {{Model-based test generation by model checking is a well-known testing
   technique that, however, suffers from the state explosion problem of
   model checking and it is, therefore, not always applicable. In this
   paper, we address this issue by decomposing a system model into suitable
   subsystem models separately analyzable. Our technique consists in
   decomposing that portion of a system model that is of interest for a
   given testing requirement, into a tree of subsystems by exploiting
   information on model variable dependency. The technique generates tests
   for the whole system model by merging tests built from those subsystems.
   We measure and report effectiveness and efficiency of the proposed
   decomposition-based test generation approach, both in terms of coverage
   and time.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Arcaini, P (Corresponding Author), Charles Univ Prague, Fac Math \& Phys, Dept Distributed \& Dependable Syst, CR-11800 Prague, Czech Republic.
   Arcaini, Paolo, Charles Univ Prague, Fac Math \& Phys, Dept Distributed \& Dependable Syst, CR-11800 Prague, Czech Republic.
   Gargantini, Angelo, Univ Bergamo, Dipartimento Ingn, I-24100 Bergamo, Italy.
   Riccobene, Elvinia, Univ Milan, Comp Sci, I-26013 Crema, CR, Italy.}},
DOI = {{10.1109/TSE.2017.2781231}},
ISSN = {{0098-5589}},
EISSN = {{1939-3520}},
Keywords = {{Model-based testing; test case generation; model checking; state
   explosion problem; decomposition}},
Keywords-Plus = {{ASM MODELS; CHECKING}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Engineering, Electrical \&
   Electronic}},
Author-Email = {{arcaini@d3s.mff.cuni.cz
   angelo.gargantini@unibg.it
   elvinia.riccobene@unimi.it}},
ResearcherID-Numbers = {{Arcaini, Paolo/J-3616-2017
   Gargantini, Angelo/E-6060-2012}},
ORCID-Numbers = {{Arcaini, Paolo/0000-0002-6253-4062
   Riccobene, Elvinia/0000-0002-1400-1026
   Gargantini, Angelo/0000-0002-4035-0131}},
Funding-Acknowledgement = {{Czech Science FoundationGrant Agency of the Czech Republic {[}17-12465S]}},
Funding-Text = {{We would like to thank the anonymous reviewers for their suggestions and
   comments that allowed us to greatly improve the paper. The research
   reported in this paper has been partially supported by the Czech Science
   Foundation project number 17-12465S.}},
Number-of-Cited-References = {{41}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{1}},
Usage-Count-Since-2013 = {{4}},
Journal-ISO = {{IEEE Trans. Softw. Eng.}},
Doc-Delivery-Number = {{HY6HC}},
Unique-ID = {{ISI:000468230000003}},
OA = {{Green Published}},
DA = {{2020-08-28}},
}

@article{ ISI_000459366200001,
Author = {Kalaee, Akram and Rafe, Vahid},
Title = {{Model-based test suite generation for graph transformation system using
   model simulation and search-based techniques}},
Journal = {{INFORMATION AND SOFTWARE TECHNOLOGY}},
Year = {{2019}},
Volume = {{108}},
Pages = {{1-29}},
Month = {{APR}},
Abstract = {{Context: Test generation by model checking is a useful technique in
   model-based testing that allows automatic generation of test cases from
   models by utilizing the counter-examples/witnesses produced through a
   model checker. However, generating redundant test cases and state space
   explosion problem are two major obstacles to transfer this technique
   into industrial practice.
   Objective: An idea to cope with these challenges consists in an
   intelligent model checking for exploring only a portion of the state
   space according to the test objectives. Motivated by this idea, we
   propose an approach that exploits meta-heuristic algorithms to adapt a
   model checker when used for integration testing of systems formally
   specified by graph transformations.
   Method: This method is not based on model checking algorithms, but
   rather uses the modeling and simulation features of the underlying model
   checker. In the proposed approach, a population of test suites that each
   of which is a set of paths on the state space, is evolved towards
   satisfying the all def-use test objectives. Consequently, a test suite
   with high coverage is generated.
   Results: To assess the efficiency of our approach, it is implemented in
   GROOVE, an open source toolset for designing and model checking graph
   transformation systems. Empirical results based on some case studies,
   confirm a significant improvement in terms of coverage, speed and memory
   usage, in comparison with the state of the art techniques.
   Conclusion: Our analysis reveals that intelligent model checking can
   appropriately address the challenges of traditional
   model-checking-assisted testing. We further conclude that graph
   transformation specification is an efficient modeling solution to
   behavioral testing and graph transformation tools have a great potential
   for developing a model-based testing tool.}},
Publisher = {{ELSEVIER SCIENCE BV}},
Address = {{PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Rafe, V (Corresponding Author), Arak Univ, Fac Engn, Dept Comp Engn, Arak 3815688349, Iran.
   Kalaee, Akram; Rafe, Vahid, Arak Univ, Fac Engn, Dept Comp Engn, Arak 3815688349, Iran.}},
DOI = {{10.1016/j.infsof.2018.12.001}},
ISSN = {{0950-5849}},
EISSN = {{1873-6025}},
Keywords = {{Model-based testing; Search-based testing; Graph transformation
   specification; Data-flow coverage}},
Keywords-Plus = {{VERIFICATION; CHECKING; CHECKERS}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems; Computer Science, Software
   Engineering}},
Author-Email = {{a-kalaee@arshad.araku.ac.ir
   v-rafe@araku.ac.ir}},
Number-of-Cited-References = {{52}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{7}},
Journal-ISO = {{Inf. Softw. Technol.}},
Doc-Delivery-Number = {{HM3IE}},
Unique-ID = {{ISI:000459366200001}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000543802400012,
Author = {Vinarskii, Evgenii and Lopez, Jorge and Kushik, Natalia and Yevtushenko,
   Nina and Zeghlache, Djamal},
Editor = {{Gaston, C and Kosmatov, N and LeGall, P}},
Title = {{A Model Checking Based Approach for Detecting SDN Races}},
Booktitle = {{TESTING SOFTWARE AND SYSTEMS (ICTSS 2019)}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2019}},
Volume = {{11812}},
Pages = {{194-211}},
Note = {{31st IFIP WG 6.1International Conference on Testing Software and Systems
   (ICTSS), Paris, FRANCE, OCT 15-17, 2019}},
Organization = {{Int Federat Informat Proc Working Grp 6 1; CEA Tech, List Inst;
   CentraleSupelec; Telecom ParisTech; CNRS, French Network Software Engn
   \& Programming; Univ Paris Saclay}},
Abstract = {{The paper is devoted to the verification of Software Defined Networking
   (SDN) components and their compositions. We focus on the interaction
   between three basic entities, an application, a controller, and a
   switch. When the application submits a request to the controller,
   containing a set of rules to configure, these rules are expected to be
   `pushed' and correctly applied by the switch of interest. However, this
   is not always the case, and one of the reasons is the presence of races
   or concurrency issues in SDN components and related interfaces. We
   propose a model checking based approach for deriving test sequences that
   can identify SDN races. The test generation strategy is based on model
   checking, and related formal verification is performed with the use of
   extended automata specifying the behavior of the components of interest;
   Linear Temporal Logic (LTL) formulas are utilized to express the
   properties to check. We generalize the races of interest and propose an
   approach for deriving the corresponding LTL formulas that are later used
   for verifiation. The Spin model checker is used for that purpose and
   thus, Promela specifications for interacting components are also
   provided; those are: the ONOS REST API, the ONOS controller and an
   OpenFlow Switch. An experimental evaluation with the aforementioned
   components showcases the existence of race conditions in their
   compositions.}},
Publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
Address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Lopez, J (Corresponding Author), Univ Paris Saclay, Telecom SudParis, CNRS, SAMOVAR, 9 Rue Charles Fourier, F-91000 Evry, France.
   Vinarskii, Evgenii, Lomonosov Moscow State Univ, 1 Leninskiye Gory St, Moscow 119991, Russia.
   Lopez, Jorge; Kushik, Natalia; Zeghlache, Djamal, Univ Paris Saclay, Telecom SudParis, CNRS, SAMOVAR, 9 Rue Charles Fourier, F-91000 Evry, France.
   Yevtushenko, Nina, Russian Acad Sci, Ivannikov Inst Syst Programming, 25 Alexander Solzhenitsyn St, Moscow 109004, Russia.}},
DOI = {{10.1007/978-3-030-31280-0\_12}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-030-31280-0; 978-3-030-31279-4}},
Keywords = {{Software Defined Networking (SDN); Races; Controller; Switch;
   Verification; Testing}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{vinevg2015@gmail.com
   jorge.lopez@telecom-sudparis.eu
   natalia.kushik@telecom-sudparis.eu
   evtushenko@ispras.ru
   djamal.zeghlache@telecom-sudparis.eu}},
ORCID-Numbers = {{Kushik, Natalia/0000-0002-8691-6655}},
Funding-Acknowledgement = {{Celtic-Plus European project SENDATE {[}C2015/3-1]; Russian Foundation
   for Basic Research (RFBR)Russian Foundation for Basic Research (RFBR)
   {[}18-01-00854]}},
Funding-Text = {{The results in this work were partially funded by the Celtic-Plus
   European project SENDATE, ID C2015/3-1, and the Russian Foundation for
   Basic Research (RFBR), grant No. 18-01-00854.}},
Number-of-Cited-References = {{20}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BP2ME}},
Unique-ID = {{ISI:000543802400012}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000477742600001,
Author = {Arcaini, Paolo and Riccobene, Elvinia},
Book-Group-Author = {{IEEE}},
Title = {{Automatic Refinement of ASM Abstract Test Cases}},
Booktitle = {{2019 IEEE 12TH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING,
   VERIFICATION AND VALIDATION WORKSHOPS (ICSTW 2019)}},
Series = {{IEEE International Conference on Software Testing Verification and
   Validation Workshops}},
Year = {{2019}},
Pages = {{1-10}},
Note = {{12th IEEE International Conference on Software Testing, Verification and
   Validation (ICST), Xian, PEOPLES R CHINA, APR 22-27, 2019}},
Organization = {{IEEE; IEEE Comp Soc; CCF; Xian Jiaotong Univ; Xian Univ Posts \&
   Telecommunicat; Huawei; Beijing Sunwise Informat Technol Ltd; Baidu; www
   360 cn; Netflix; TICPSH; Mooctest; Google}},
Abstract = {{Model refinement is a specification approach widely used in formal
   modeling to deal with the complexity of large and complicated
   requirements. Specific artefacts are usually developed to complement
   specification with validation and verification activities. To avoid
   boresome and time-consuming activities when reusing models, in a model
   refinement specification process, techniques supporting reusability of
   formal development artefacts are highly desirable.
   In this paper, we tackle the problem of defining a technique for
   automatic refinement of abstract test cases for formal models given in
   terms of the Abstract State Machines (ASMs). We present an approach,
   based on a classical test generation technique exploiting model
   checking, able to reuse information of test cases obtained at a given
   level of abstraction in order to define, in an automatic way, the same
   kind of artefacts at a subsequent refinement level. We evaluate our
   approach on real case studies specified in ASMs by a sequence of
   refinement models.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Arcaini, P (Corresponding Author), Natl Inst Informat, Tokyo, Japan.
   Arcaini, Paolo, Natl Inst Informat, Tokyo, Japan.
   Riccobene, Elvinia, Univ Milan, Dipartimento Informat, Milan, Italy.}},
DOI = {{10.1109/ICSTW.2019.00025}},
ISSN = {{2159-4848}},
ISBN = {{978-1-7281-0888-9}},
Keywords = {{Model refinement; Abstract State Machines; Scenario; abstract test case;
   Avalla; AsmetaSMV; Model checking}},
Keywords-Plus = {{MODELS}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{arcaini@nii.ac.jp
   elvinia.riccobene@unimi.it}},
ResearcherID-Numbers = {{Arcaini, Paolo/J-3616-2017}},
ORCID-Numbers = {{Arcaini, Paolo/0000-0002-6253-4062}},
Number-of-Cited-References = {{27}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BN2TK}},
Unique-ID = {{ISI:000477742600001}},
DA = {{2020-08-28}},
}

@article{ ISI_000447363400008,
Author = {Groce, Alex and Ahmed, Iftekhar and Jensen, Carlos and McKenney, Paul E.
   and Holmes, Josie},
Title = {{How verified (or tested) is my code? Falsification-driven verification
   and testing}},
Journal = {{AUTOMATED SOFTWARE ENGINEERING}},
Year = {{2018}},
Volume = {{25}},
Number = {{4, SI}},
Pages = {{917-960}},
Month = {{DEC}},
Abstract = {{Formal verification has advanced to the point that developers can verify
   the correctness of small, critical modules. Unfortunately, despite
   considerable efforts, determining if a ``verification{''} verifies what
   the author intends is still difficult. Previous approaches are difficult
   to understand and often limited in applicability. Developers need
   verification coverage in terms of the software they are verifying, not
   model checking diagnostics. We propose a methodology to allow developers
   to determine (and correct) what it is that they have verified, and tools
   to support that methodology. Our basic approach is based on a novel
   variation of mutation analysis and the idea of verification driven by
   falsification. We use the CBMC model checker to show that this approach
   is applicable not only to simple data structures and sorting routines,
   and verification of a routine in Mozilla's JavaScript engine, but to
   understanding an ongoing effort to verify the Linux kernel
   read-copy-update mechanism. Moreover, we show that despite the
   probabilistic nature of random testing and the tendency to
   incompleteness of testing as opposed to verification, the same
   techniques, with suitable modifications, apply to automated test
   generation as well as to formal verification. In essence, it is the
   number of surviving mutants that drives the scalability of our methods,
   not the underlying method for detecting faults in a program. From the
   point of view of a Popperian analysis where an unkilled mutant is a
   weakness (in terms of its falsifiability) in a ``scientific theory{''}
   of program behavior, it is only the number of weaknesses to be examined
   by a user that is important.}},
Publisher = {{SPRINGER}},
Address = {{ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Groce, A (Corresponding Author), No Arizona Univ, Sch Informat Comp \& Cyber Syst, Flagstaff, AZ 86011 USA.
   Groce, Alex; Holmes, Josie, No Arizona Univ, Sch Informat Comp \& Cyber Syst, Flagstaff, AZ 86011 USA.
   Ahmed, Iftekhar; Jensen, Carlos, Oregon State Univ, Sch Elect Engn \& Comp Sci, Corvallis, OR 97331 USA.
   McKenney, Paul E., IBM Linux Technol Ctr, Beaverton, OR USA.}},
DOI = {{10.1007/s10515-018-0240-y}},
ISSN = {{0928-8910}},
EISSN = {{1573-7535}},
Keywords = {{Formal verification; Random testing; Mutation testing; Philosophy of
   science; Falsification; Oracles}},
Keywords-Plus = {{MUTATION COVERAGE; MODEL}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{agroce@gmail.com
   ahmedi@oregonstate.edu
   cjensen@eecs.oregonstate.edu
   paulmck@linux.vnet.ibm.com
   josie.holmes@nau.edu}},
ORCID-Numbers = {{Ahmed, Iftekhar/0000-0001-8221-5352}},
Funding-Acknowledgement = {{NSFNational Science Foundation (NSF) {[}CCF-1217824, CCF-1054786]}},
Funding-Text = {{A portion of this work was funded by NSF Grants CCF-1217824 and
   CCF-1054786.}},
Number-of-Cited-References = {{94}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{5}},
Journal-ISO = {{Automat. Softw. Eng.}},
Doc-Delivery-Number = {{GW9YB}},
Unique-ID = {{ISI:000447363400008}},
DA = {{2020-08-28}},
}

@article{ ISI_000425572400036,
Author = {Choi, Yunja},
Title = {{A configurable V\&V framework using formal behavioral patterns for
   OSEK/VDX operating systems}},
Journal = {{JOURNAL OF SYSTEMS AND SOFTWARE}},
Year = {{2018}},
Volume = {{137}},
Pages = {{563-579}},
Month = {{MAR}},
Abstract = {{Verification and Validation (V\&V) of small-scale embedded software must
   consider the operating system. Unlike general-purpose systems, the
   underlying operating system is closely coupled with the application
   logic, generating potentially an infinite number of different control
   programs depending on the application configuration and application
   logic. Verifying this software individually is time-consuming and
   costly, especially when the objective is rigorous verification.
   To assist in rigorous V\&V activities for such embedded software, the
   proposed work suggests a pattern-based framework that can be used to
   generate configurable formal OS and test models. At the core of the
   framework, lies a set of predefined behavioral patterns and constraint
   patterns that can be composed for the auto-generation of formal models
   for variously configured operating systems. These configurable formal
   models form the basis of formal validation and verification activities
   such as model checking safety properties, model-based test generation,
   and formal application simulation. We have implemented a prototype tool,
   specially designed for embedded control software based on the OSEK/VDX
   international standard, to demonstrate the benefits of the framework in
   task simulation, test generation, and formal verification. A series of
   experiments and analysis demonstrate that the suggested pattern based
   framework is more efficient in test sequence generation and more
   effective in identifying problems compared to existing approaches. (C)
   2017 Elsevier Inc. All rights reserved.}},
Publisher = {{ELSEVIER SCIENCE INC}},
Address = {{360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Choi, Y (Corresponding Author), Kyungpook Natl Univ, Sch Comp Sci \& Engn, Daegu, South Korea.
   Choi, Yunja, Kyungpook Natl Univ, Sch Comp Sci \& Engn, Daegu, South Korea.}},
DOI = {{10.1016/j.jss.2017.07.040}},
ISSN = {{0164-1212}},
EISSN = {{1873-1228}},
Keywords = {{V\&V framework; Formal patterns; OSEK/VDX; Embedded software}},
Keywords-Plus = {{VERIFICATION}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
Author-Email = {{yuchoi76@knu.ac.kr}},
Funding-Acknowledgement = {{MISP(Ministry of Science, ICT and Future Planning), Korea, under the
   ITRC(Information Technology Research Center)
   {[}IITP-2016-H85011610120001002]; National Research Foundation of
   Korea(NRF) - Ministry of Education {[}NRF-2016R1D1A3B01011685]}},
Funding-Text = {{This work benefited significantly from the prior work performed by
   Taejoon Byun who built the prototype tool for the test generation. This
   research was supported by MISP(Ministry of Science, ICT and Future
   Planning), Korea, under the ITRC(Information Technology Research Center)
   support program (IITP-2016-H85011610120001002) supervised by the
   IITP(Institute for Information \& communications Technology Promotion)
   and Basic Science Research Program through National Research Foundation
   of Korea(NRF) funded by the Ministry of
   Education(NRF-2016R1D1A3B01011685).}},
Number-of-Cited-References = {{42}},
Times-Cited = {{4}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{7}},
Journal-ISO = {{J. Syst. Softw.}},
Doc-Delivery-Number = {{FW8HN}},
Unique-ID = {{ISI:000425572400036}},
DA = {{2020-08-28}},
}

@article{ ISI_000423346100004,
Author = {Holmes, Josie and Groce, Alex and Pinto, Jervis and Mittal, Pranjal and
   Azimi, Pooria and Kellar, Kevin and O'Brien, James},
Title = {{TSTL: the template scripting testing language}},
Journal = {{INTERNATIONAL JOURNAL ON SOFTWARE TOOLS FOR TECHNOLOGY TRANSFER}},
Year = {{2018}},
Volume = {{20}},
Number = {{1}},
Pages = {{57-78}},
Month = {{FEB}},
Abstract = {{A test harness, in automated test generation, defines the set of valid
   tests for a system, as well as their correctness properties. The
   difficulty of writing test harnesses is a major obstacle to the adoption
   of automated test generation and model checking. Languages for writing
   test harnesses are usually tied to a particular tool and unfamiliar to
   programmers, and often limit expressiveness. Writing test harnesses
   directly in the language of the software under test (SUT) is a tedious,
   repetitive, and error-prone task, offers little or no support for test
   case manipulation and debugging, and produces hard-to-read,
   hard-to-maintain code. Using existing harness languages or writing
   directly in the language of the SUT also tends to limit users to one
   algorithm for test generation, with little ability to explore
   alternative methods. In this paper, we present TSTL, the template
   scripting testing language, a domain-specific language (DSL) for writing
   test harnesses. TSTL compiles harness definitions into an interface for
   testing, making generic test generation and manipulation tools for all
   SUTs possible. TSTL includes tools for generating, manipulating, and
   analyzing test cases, including simple model checkers. This paper
   motivates TSTL via a large-scale testing effort, directed by an
   end-user, to find faults in the most widely used geographic information
   systems tool. This paper emphasizes a new approach to automated testing,
   where, rather than focus on developing a monolithic tool to extend, the
   aim is to convert a test harness into a language extension. This
   approach makes testing not a separate activity to be performed using a
   tool, but as natural to users of the language of the system under test
   as is the use of domain-specific libraries such as ArcPy, NumPy, or
   QIIME, in their domains. TSTL is a language and tool infrastructure, but
   is also a way to bring testing activities under the control of an
   existing programming language in a simple, natural way.}},
Publisher = {{SPRINGER HEIDELBERG}},
Address = {{TIERGARTENSTRASSE 17, D-69121 HEIDELBERG, GERMANY}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Groce, A (Corresponding Author), Oregon State Univ, Sch Elect Engn \& Comp Sci, Corvallis, OR 97331 USA.
   Holmes, Josie, Penn State Univ, Dept Geog, State Coll, PA USA.
   Groce, Alex; Pinto, Jervis; Mittal, Pranjal; Azimi, Pooria; Kellar, Kevin, Oregon State Univ, Sch Elect Engn \& Comp Sci, Corvallis, OR 97331 USA.
   O'Brien, James, Macquarie Univ, Risk Frontiers, Sydney, NSW, Australia.}},
DOI = {{10.1007/s10009-016-0445-y}},
ISSN = {{1433-2779}},
EISSN = {{1433-2787}},
Keywords = {{Software testing; Domain-specific languages; Explicit-state model
   checking; End-user testing; Geographic information systems}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{jdh396@psu.edu
   agroce@gmail.com
   James.OBrien@mq.edu.au}},
Funding-Acknowledgement = {{NSFNational Science Foundation (NSF) {[}CCF-1054786, CCF-1217824]}},
Funding-Text = {{The authors would like to thank John Regehr, David R. MacIver, Klaus
   Havelund, our anonymous reviewers, and students in CS362, CS562, and
   CS569, for discussions related to thiswork. A portion of this work was
   funded by NSF Grants CCF-1054786 and CCF-1217824.}},
Number-of-Cited-References = {{84}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Journal-ISO = {{Int. J. Softw. Tools Technol. Transf.}},
Doc-Delivery-Number = {{FT7PX}},
Unique-ID = {{ISI:000423346100004}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000465124200045,
Author = {Ahmed, Alif and Farahmandi, Farimah and Iskander, Yousef and Mishra,
   Prabhat},
Book-Group-Author = {{IEEE}},
Title = {{Scalable Hardware Trojan Activation by Interleaving Concrete Simulation
   and Symbolic Execution}},
Booktitle = {{2018 IEEE INTERNATIONAL TEST CONFERENCE (ITC)}},
Series = {{International Test Conference Proceedings}},
Year = {{2018}},
Note = {{49th IEEE International Test Conference (ITC), Phoenix, AZ, OCT 29-NOV
   01, 2018}},
Organization = {{IEEE; IEEE Philadelphia Sect}},
Abstract = {{Intellectual Property (IP) based System-on-Chip (SoC) design is a widely
   used practice today. The IPs gathered from third-party vendors may not
   be trustworthy since they may contain malicious implants (hardware
   Trojans). To avoid the detection of the Trojan, adversaries usually hide
   it under rare branches or rare assignments triggered under extremely
   rare input sequences. Due to exponential input space complexity,
   state-of-the-art constrained-random test generation methods are not
   suitable for activating these rare scenarios. While existing model
   checking based directed test generation approaches are promising, they
   are not capable of generating tests for large RTL designs due to the
   capacity restrictions of formal methods. In this paper, we propose an
   automated and scalable test generation approach for activation of
   hardware Trojans in RTL designs. This paper makes three important
   contributions. First, it provides a scalable test generation framework
   by effective utilization of symbolic execution and concrete simulation.
   Next, it is a fully automated approach for generating directed tests for
   activating rare branches and rare assignments. Finally, our experimental
   results demonstrate that the generated tests are able to activate
   hard-to-cover Trojans in large and complex RTL benchmarks.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Ahmed, A (Corresponding Author), Univ Florida, Gainesville, FL 32611 USA.
   Ahmed, Alif; Farahmandi, Farimah; Mishra, Prabhat, Univ Florida, Gainesville, FL 32611 USA.
   Iskander, Yousef, Cisco Syst Inc, Knoxville, TN USA.}},
ISSN = {{1089-3539}},
ISBN = {{978-1-5386-8382-8}},
Keywords-Plus = {{TEST-GENERATION; VECTORS}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods; Engineering, Electrical \&
   Electronic}},
Funding-Acknowledgement = {{National Science FoundationNational Science Foundation (NSF)
   {[}CNS-1441667]; Cisco}},
Funding-Text = {{This work was partially supported by grants from National Science
   Foundation (CNS-1441667) and Cisco.}},
Number-of-Cited-References = {{65}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BM5JL}},
Unique-ID = {{ISI:000465124200045}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000450078300016,
Author = {Cruz, Jonathan and Farahmandi, Farimah and Ahmed, Alif and Mishra,
   Prabhat},
Book-Group-Author = {{IEEE}},
Title = {{Hardware Trojan Detection using ATPG and Model Checking}},
Booktitle = {{2018 31ST INTERNATIONAL CONFERENCE ON VLSI DESIGN AND 2018 17TH
   INTERNATIONAL CONFERENCE ON EMBEDDED SYSTEMS (VLSID \& ES)}},
Series = {{International Conference on VLSI Design}},
Year = {{2018}},
Pages = {{91-96}},
Note = {{31st International Conference on VLSI Design / 17th International
   Conference on Embedded Systems (VLSID \& ES)), Pune, INDIA, JAN 06-10,
   2018}},
Organization = {{VLSI Soc India; Assoc Comp Machinery; IEEE; IEEE Comp Soc; Assoc Comp
   Machinery SIGDA; IEEE Council Elect Design Automat; IEEE Circuits \&
   Syst Soc; IEEE Tech Comm VLSI}},
Abstract = {{The threat of hardware Trojans' existence in integrated circuits has
   become a major concern in System-on-Chip (SoC) design industry as well
   as in military/defense organizations. There is an increased emphasis on
   finding effective ways to detect and activate hardware Trojans in
   current research efforts. However, state-of-the-art approaches suffer
   from the lack of completeness and scalability. Moreover, most of the
   existing methods cannot generate efficient tests to activate the
   potential hidden Trojan. In this paper, we propose an effective test
   generation approach which is capable of activating malicious
   functionality hidden in large sequential designs. Automatic test pattern
   generation (ATPG) works well on full-scan designs, whereas model
   checking is suitable for logic blocks without scan chain. Due to
   overhead considerations, partial-scan chain insertion is the standard
   practice today. Unfortunately, neither ATPG nor model checking is
   suitable for partial-scan designs. Our proposed hardware Trojan
   detection technique utilizes the combination of ATPG and model checking
   approaches. We use model checking on a subset of non-scan elements and
   ATPG on scan elements to avoid common pitfalls of running the original
   design using any one of these techniques. Experimental results
   demonstrate the effectiveness of tests generated by our proposed
   approach to detect Trojans on Trust-hub benchmarks.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Cruz, J (Corresponding Author), Univ Florida, Dept Elect \& Comp Engn, Gainesville, FL 32611 USA.
   Cruz, Jonathan, Univ Florida, Dept Elect \& Comp Engn, Gainesville, FL 32611 USA.
   Farahmandi, Farimah; Ahmed, Alif; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL USA.}},
DOI = {{10.1109/VLSID.2018.43}},
ISSN = {{1063-9667}},
ISBN = {{978-1-5386-3692-3}},
Research-Areas = {{Automation \& Control Systems; Engineering}},
Web-of-Science-Categories  = {{Automation \& Control Systems; Engineering, Electrical \& Electronic}},
Funding-Acknowledgement = {{National Science FoundationNational Science Foundation (NSF)
   {[}CNS-1441667]; SRC {[}2014-TS-2554]; Cisco}},
Funding-Text = {{This work was partially supported by grants from National Science
   Foundation (CNS-1441667), SRC (2014-TS-2554), and Cisco.}},
Number-of-Cited-References = {{25}},
Times-Cited = {{6}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BL3XD}},
Unique-ID = {{ISI:000450078300016}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000445822600032,
Author = {Darke, Priyanka and Prabhu, Sumanth and Chimdyalwar, Bharti and Chauhan,
   Avriti and Kumar, Shrawan and Basakchowdhury, Animesh and Venkatesh, R.
   and Datar, Advaita and Medicherla, Raveendra Kumar},
Editor = {{Beyer, D and Huisman, M}},
Title = {{VeriAbs: Verification by Abstraction and Test Generation}},
Booktitle = {{TOOLS AND ALGORITHMS FOR THE CONSTRUCTION AND ANALYSIS OF SYSTEMS, TACAS
   2018, PT II}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2018}},
Volume = {{10806}},
Number = {{II}},
Pages = {{457-462}},
Note = {{24th International Conference on Tools and Algorithms for the
   Construction and Analysis of Systems (TACAS) Held as Part of the 21st
   European Joint Conferences on Theory and Practice of Software (ETAPS),
   Thessaloniki, GREECE, APR 14-20, 2018}},
Organization = {{Aristotle Univ Thessaloniki, Dept Informat}},
Abstract = {{VeriAbs is a portfolio software verifier for ANSI-C programs. To prove
   properties with better efficiency and scalability, this version
   implements output abstraction with k-induction in the presence of
   resets. VeriAbs now generates post conditions over the abstraction to
   find invariants by applying Z3's tactics of quantifier elimination.
   These invariants are then used to generate validation witnesses. To find
   errors in the absence of known program bounds, VeriAbs searches for
   property violating inputs by applying random test generation with fuzz
   testing for a better scalability as compared to bounded model checking.}},
Publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
Address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Darke, P (Corresponding Author), Tata Res Dev \& Design Ctr, Pune, Maharashtra, India.
   Darke, Priyanka; Prabhu, Sumanth; Chimdyalwar, Bharti; Chauhan, Avriti; Kumar, Shrawan; Basakchowdhury, Animesh; Venkatesh, R.; Datar, Advaita; Medicherla, Raveendra Kumar, Tata Res Dev \& Design Ctr, Pune, Maharashtra, India.}},
DOI = {{10.1007/978-3-319-89963-3\_32}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-319-89963-3; 978-3-319-89963-3}},
Keywords-Plus = {{SOLVER}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods}},
Author-Email = {{priyanka.darke@tcs.com
   sumanth.prabhu@tcs.com
   bharti.c@tcs.com
   avriti.chauhan@tcs.com
   shrawan.kumar@tcs.com
   a.basakchowdhury@tcs.com
   r.venky@tcs.com
   advaita.datar@tcs.com
   raveendra.kumar@tcs.com}},
Number-of-Cited-References = {{12}},
Times-Cited = {{4}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BL0HK}},
Unique-ID = {{ISI:000445822600032}},
OA = {{Other Gold}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000426527200012,
Author = {Yao, Jiangyuan and Wang, Zhiliang and Yin, Xia and Shi, Xingang and Li,
   Yahui and Li, Chongrong},
Book-Group-Author = {{IEEE}},
Title = {{Testing Black-Box SDN Applications with Formal Behavior Models}},
Booktitle = {{2017 IEEE 25TH INTERNATIONAL SYMPOSIUM ON MODELING, ANALYSIS, AND
   SIMULATION OF COMPUTER AND TELECOMMUNICATION SYSTEMS (MASCOTS)}},
Series = {{International Symposium on Modeling Analysis and Simulation of Computer
   and Telecommunication Systems Proceedings}},
Year = {{2017}},
Pages = {{110-120}},
Note = {{25th IEEE International Symposium on Modeling, Analysis, and Simulation
   of Computer and Telecommunication Systems (MASCOTS), Banff, CANADA, SEP
   20-22, 2017}},
Organization = {{IEEE; IEEE Comp Soc; Univ Calgary; TCSIM}},
Abstract = {{The programmability of Software-Defined Networking (SDN) challenges the
   correctness and reliability of networks. There may be design flaws as
   well as implementation bugs in SDN applications. White-box testing
   methods with formal models rely on source codes, which limits the
   applicability of these methods. Black-box methods without behavior
   models cannot systematically cover an application's functions. Most
   previous work has mainly focused on design flaws and has ignored
   implementation bugs. In this paper, we propose a new black-box test
   framework to detect both design flaws and implementation bugs. Following
   this test framework, we propose a new model, Information Table Extended
   State Machine (IT-EFSM), combining a group of parallel state machines
   and an abstract topology to specify the SDN applications. We employ a
   model checking tool to generate tests against design flaws and propose a
   test generation based on partial composition, symmetry simplification on
   the topology and topology simulated execution to expose implementation
   bugs. The experimental results of the testing process demonstrate the
   effectiveness and applicability of our method.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Yao, JY (Corresponding Author), Tsinghua Univ, Inst Network Sci \& Cyberspace, Beijing, Peoples R China.
   Yao, JY (Corresponding Author), Hainan Univ, Coll Informat Sci \& Technol, Haikou, Hainan, Peoples R China.
   Yao, JY (Corresponding Author), Tsinghua Natl Lab Informat Sci \& Technol, Beijing, Peoples R China.
   Yao, Jiangyuan; Wang, Zhiliang; Shi, Xingang, Tsinghua Univ, Inst Network Sci \& Cyberspace, Beijing, Peoples R China.
   Yao, Jiangyuan, Hainan Univ, Coll Informat Sci \& Technol, Haikou, Hainan, Peoples R China.
   Yin, Xia; Li, Yahui, Tsinghua Univ, Dept Comp Sci \& Technol, Beijing, Peoples R China.
   Yao, Jiangyuan; Wang, Zhiliang; Yin, Xia; Shi, Xingang; Li, Yahui; Li, Chongrong, Tsinghua Natl Lab Informat Sci \& Technol, Beijing, Peoples R China.}},
ISSN = {{1526-7539}},
ISBN = {{978-1-5386-2763-1}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods; Engineering, Electrical \&
   Electronic}},
Funding-Acknowledgement = {{National High Technology Research and Development Program of China (863
   Program)National High Technology Research and Development Program of
   China {[}2015AA016105]; National Natural Science Foundation of
   ChinaNational Natural Science Foundation of China (NSFC) {[}61402253]}},
Funding-Text = {{This work is partially supported by the National High Technology
   Research and Development Program of China (863 Program, No.
   2015AA016105) and the National Natural Science Foundation of China
   (Grant No. 61402253).}},
Number-of-Cited-References = {{29}},
Times-Cited = {{8}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Doc-Delivery-Number = {{BJ6DS}},
Unique-ID = {{ISI:000426527200012}},
DA = {{2020-08-28}},
}

@article{ ISI_000374974200007,
Author = {Enoiu, Eduard P. and Causevic, Adnan and Ostrand, Thomas J. and Weyuker,
   Elaine J. and Sundmark, Daniel and Pettersson, Paul},
Title = {{Automated test generation using model checking: an industrial evaluation}},
Journal = {{INTERNATIONAL JOURNAL ON SOFTWARE TOOLS FOR TECHNOLOGY TRANSFER}},
Year = {{2016}},
Volume = {{18}},
Number = {{3}},
Pages = {{335-353}},
Month = {{JUN}},
Abstract = {{In software development, testers often focus on functional testing to
   validate implemented programs against their specifications. In
   safety-critical software development, testers are also required to show
   that tests exercise, or cover, the structure and logic of the
   implementation. To achieve different types of logic coverage, various
   program artifacts such as decisions and conditions are required to be
   exercised during testing. Use of model checking for structural test
   generation has been proposed by several researchers. The limited
   application to models used in practice and the state space explosion
   can, however, impact model checking and hence the process of deriving
   tests for logic coverage. Thus, there is a need to validate these
   approaches against relevant industrial systems such that more knowledge
   is built on how to efficiently use them in practice. In this paper, we
   present a tool-supported approach to handle software written in the
   Function Block Diagram language such that logic coverage criteria can be
   formalized and used by a model checker to automatically generate tests.
   To this end, we conducted a study based on industrial use-case scenarios
   from Bombardier Transportation AB, showing how our toolbox CompleteTest
   can be applied to generate tests in software systems used in the
   safety-critical domain. To evaluate the approach, we applied the toolbox
   to 157 programs and found that it is efficient in terms of time required
   to generate tests that satisfy logic coverage and scales well for most
   of the programs.}},
Publisher = {{SPRINGER HEIDELBERG}},
Address = {{TIERGARTENSTRASSE 17, D-69121 HEIDELBERG, GERMANY}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Enoiu, EP (Corresponding Author), Malardalen Univ, Vasteras, Sweden.
   Enoiu, Eduard P.; Causevic, Adnan; Weyuker, Elaine J.; Sundmark, Daniel; Pettersson, Paul, Malardalen Univ, Vasteras, Sweden.
   Sundmark, Daniel, Swedish Inst Comp Sci, Stockholm, Sweden.
   Ostrand, Thomas J., Software Engn Res Consultant, Vasteras, Sweden.}},
DOI = {{10.1007/s10009-014-0355-9}},
ISSN = {{1433-2779}},
EISSN = {{1433-2787}},
Keywords = {{Automated test generation; Software testing; Model checking; UPPAAL;
   Logic coverage safety-critical systems; IEC 1131-3; FBD; Function Block
   Diagram; Structured Text; PLC; Programmable Logic Controllers;
   Model-based testing}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{eduard.paul.enoiu@mdh.se}},
Number-of-Cited-References = {{28}},
Times-Cited = {{10}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{13}},
Journal-ISO = {{Int. J. Softw. Tools Technol. Transf.}},
Doc-Delivery-Number = {{DK5QH}},
Unique-ID = {{ISI:000374974200007}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000390684300022,
Author = {Pal, Deepak and Vain, Jueri},
Book-Group-Author = {{IEEE}},
Title = {{Generating Optimal Test Cases for Real-Time Systems using DIVINE Model
   Checker}},
Booktitle = {{2016 15TH BIENNIAL BALTIC ELECTRONICS CONFERENCE (BEC)}},
Year = {{2016}},
Pages = {{99-102}},
Note = {{15th Biennial Baltic Electronics Conference (BEC), Tallinn, ESTONIA, OCT
   03-05, 2016}},
Organization = {{Tallinn Univ Technol, Thomas Johann Seebeck Dept Elect; Tallinn Univ
   Technol, Dept Comp Engn; Tallinn Univ Technol, Fac Informat Technol;
   Tallinn Univ Technol Mektory; Laulasmaa; IEEE; IEEE Estonia Sect; IEEE
   Circuits \& Syst}},
Abstract = {{The automatic generation of witness and counterexample is considered as
   the key advantage of model checking. It provides a useful source of
   diagnostic information and a basis for automated test generation.
   However, some of the witness traces may be unreasonably long and highly
   redundant that makes achieving test purpose even for small systems
   inefficient. This paper presents a technique for automated generation of
   optimal test cases from the specification model. The proposed technique
   performs reachability analysis using DIVINE (a distributed-memory model
   checker) to generate optimal test cases. It is implemented in the form
   of control guards to guide model on-the-fly towards test goals which are
   constructed offline by statistical analysis based on model and test
   purpose. To prove correctness and performance of the technique, we
   demonstrate a case study on web application which performs several types
   of tests and we compare results against UPPAAL.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Pal, D (Corresponding Author), Elvior LLC, Software Test Automat, Tallinn, Estonia.
   Pal, Deepak, Elvior LLC, Software Test Automat, Tallinn, Estonia.
   Vain, Jueri, Tallinn Univ Technol, Dept Comp Sci, Tallinn, Estonia.}},
ISBN = {{978-1-5090-1393-7}},
Research-Areas = {{Engineering}},
Web-of-Science-Categories  = {{Engineering, Electrical \& Electronic}},
Author-Email = {{deepak.pal@elvior.ee
   juri.vain@ttu.ee}},
ResearcherID-Numbers = {{Vain, Juri/J-4717-2018
   Vain, Juri/Q-9240-2019}},
ORCID-Numbers = {{Vain, Juri/0000-0002-0700-7972
   Vain, Juri/0000-0002-0700-7972}},
Number-of-Cited-References = {{12}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BG6OG}},
Unique-ID = {{ISI:000390684300022}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000379297600018,
Author = {Tekaya, Manel and Bennani, Mohamed Taha and Ebdelli, Nedra and Ben
   Ahmed, Samir},
Editor = {{Albert, E and Lanese, I}},
Title = {{SimAutoGen Tool: Test Vector Generation from Large Scale MATLAB/Simulink
   Models}},
Booktitle = {{FORMAL TECHNIQUES FOR DISTRIBUTED OBJECTS, COMPONENTS, AND SYSTEMS
   (FORTE 2016)}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2016}},
Volume = {{9688}},
Pages = {{267-274}},
Note = {{36th IFIP WG 6.1 International Conference on Formal Techniques for
   Distributed Objects, Components and Systems(FORTE) held as part of the
   11th International Federated Conference on Distributed Computing
   Techniques (DisCoTec), Heraklion, GREECE, JUN 05-07, 2016}},
Organization = {{IFIP WG 6 1; Fdn Res \& Technol, Inst Comp Sci; Univ Ioannina}},
Abstract = {{Safety-critical applications require complete high-coverage testing,
   which is not always guaranteed by model-based test generation
   techniques. Recently, automatic test generation by model checking has
   been reported to improve the efficiency of test suites over conventional
   test generation techniques. This study introduces our novel tool
   SimAutoGen, which employs the model checking technique (as a formal
   verification technique) to derive test vectors from Simulink models of
   automotive controllers according to structural coverage metrics. Model
   checking based on test generation is challenging for two reasons. First,
   the input model to the model checker requires conversion into a formal
   language. Second, standard tools have limited ability to generate test
   vectors for large-scale Simulink models because the state-space explodes
   with increasing model size. Our proposed SimAutoGen avoids the first
   problem by expressing the properties to be verified, which correspond to
   a structural coverage metric, in the Simulink language. To solve the
   state-space explosion problem, we developed a new algorithm that slices
   the Simulink model into hierarchical levels.}},
Publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
Address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Tekaya, M (Corresponding Author), Univ Carthage, TELNET Innovat Labs, Tunis, Tunisia.
   Tekaya, Manel, Univ Carthage, TELNET Innovat Labs, Tunis, Tunisia.
   Ebdelli, Nedra, Univ Mannouba, Manouba, Tunisia.
   Bennani, Mohamed Taha; Ben Ahmed, Samir, Univ Tunis El Manar, Tunis, Tunisia.}},
DOI = {{10.1007/978-3-319-39570-8\_18}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-319-39570-8; 978-3-319-39569-2}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems; Computer Science, Software
   Engineering; Computer Science, Theory \& Methods}},
Author-Email = {{manel.tekaya@gmail.com
   Taha.Bennani@enit.rnu.tn
   Nedra1ebdelli@gmail.com
   Samir.benahmed@fst.rnu.tn}},
ORCID-Numbers = {{Ben Ahmed, Samir/0000-0002-4642-2108
   Bennani, Mohamed Taha/0000-0001-6693-6352}},
Number-of-Cited-References = {{14}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BF0QD}},
Unique-ID = {{ISI:000379297600018}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000374049000003,
Author = {Brucker, Achim D. and Havle, Oto and Nemouchi, Yakoub and Wolff,
   Burkhart},
Editor = {{Gurfinkel, A and Seshia, SA}},
Title = {{Testing the IPC Protocol for a Real-Time Operating System}},
Booktitle = {{VERIFIED SOFTWARE: THEORIES, TOOLS, AND EXPERIMENTS}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2016}},
Volume = {{9593}},
Pages = {{40-60}},
Note = {{7th International Conference on Verified Software - Theories, Tool and
   Experiments (VSTTE), San Francisco, CA, JUL 18-19, 2015}},
Abstract = {{In this paper, we adapt model-based testing techniques to concurrent
   code, namely for test generations of an (industrial) OS kernel called
   PikeOS. Since our data-models are complex, the problem is out of reach
   of conventional model-checking techniques. Our solution is based on
   symbolic execution implemented inside the interactive theorem proving
   environment Isabelle/HOL extended by a plugin with test generation
   facilities called HOL-TestGen.
   As a foundation for our symbolic computing techniques, we refine the
   theory of monads to embed interleaving executions with abort,
   synchronization, and shared memory to a general but still optimized
   behavioral test framework.
   This framework is instantiated by a model of PikeOS inter-process
   communication system-calls. Inheriting a micro-architecture going back
   to the L4 kernel, the system calls of the IPC-API are internally
   structured by atomic actions; according to a security model, these
   actions can fail and must produce error-codes. Thus, our tests reveal
   errors in the enforcement of the security model.}},
Publisher = {{SPRINGER INTERNATIONAL PUBLISHING AG}},
Address = {{GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Brucker, AD (Corresponding Author), SAP SE, Vincenz Priessnitz Str 1, D-76131 Karlsruhe, Germany.
   Brucker, Achim D., SAP SE, Vincenz Priessnitz Str 1, D-76131 Karlsruhe, Germany.
   Nemouchi, Yakoub; Wolff, Burkhart, Univ Saclay, Univ Paris 11, CNRS, LRI,Cent Supelec, Orsay, France.
   Havle, Oto, SYSGO AG, Pfaffenstein 14, D-55270 Klein Winternheim, Germany.}},
DOI = {{10.1007/978-3-319-29613-5\_3}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-319-29613-5; 978-3-319-29612-8}},
Keywords = {{Test program generation; Symbolic test case generations; Black box
   testing; Testing operating systems; Certification; CC; Concurrency;
   Interleaving}},
Keywords-Plus = {{GENERATION}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Artificial Intelligence; Computer Science, Software
   Engineering; Computer Science, Theory \& Methods}},
Author-Email = {{achim.brucker@sap.com
   oto.havle@sysgo.com
   nemouchi@lri.fr
   wolff@lri.fr}},
Number-of-Cited-References = {{20}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{4}},
Doc-Delivery-Number = {{BE6FR}},
Unique-ID = {{ISI:000374049000003}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000373003500013,
Author = {Sun, Yanjun and Memmi, Gerard and Vignes, Sylvie},
Editor = {{Cardin, MA and Fong, SH and Krob, D and Lui, PC and Tan, YH}},
Title = {{A Model-Based Testing Process for Enhancing Structural Coverage in
   Functional Testing}},
Booktitle = {{COMPLEX SYSTEMS DESIGN \& MANAGEMENT ASIA: SMART NATIONS - SUSTAINING
   AND DESIGNING, CSD\&M ASIA 2016}},
Series = {{Advances in Intelligent Systems and Computing}},
Year = {{2016}},
Volume = {{426}},
Pages = {{171-180}},
Note = {{2nd International Asia-Pacific Conference on Complex Systems Design and
   Management (CSD and M), Singapore Univ Technol \& Design, Singapore,
   SINGAPORE, FEB 24-26, 2016}},
Organization = {{Accenture Technol Labs Beijing; Dassault Systemes; DSO Natl Labs; Def
   Sci \& Technol Agcy Singapore; Electricite France; Int Council Syst
   Engn; IRT SystemX; JTC Corp; Mega Int; Obeo; Project Performance Int;
   Sembcorp; Surbana Jurong; Thales; Ctr Excellence Syst Architecture,
   Management, Econ \& Strategy; Ecole Polytechnique; Natl Univ Singapore}},
Abstract = {{Developing complex safety-critical systems usually involves developing
   models as abstractions in the upstream phases of design. It is still
   today often challenging to convince the industry that performing
   functional testing on models of systems may help reducing the cost of
   system testing. This article presents a new model-based testing process.
   Part of the ``CONNEXION{''} French I\&C methodology project, it combines
   a vast number of verification tools. In this article, we focus on the
   integration of a specification-based test generation tool, a
   model-checker and an environment for model test execution to enhance
   structural coverage rate. To this end, we define a novel process
   describing how to extend the functional test bed to enhance structural
   coverage by generating new test cases reaching so far uncovered branches
   using model-checking.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Sun, YJ (Corresponding Author), Telecom ParisTech, CNRS, LTCI, UMR 5141, 46 Rue Barrault, F-75013 Paris, France.
   Sun, Yanjun; Memmi, Gerard; Vignes, Sylvie, Telecom ParisTech, CNRS, LTCI, UMR 5141, 46 Rue Barrault, F-75013 Paris, France.}},
DOI = {{10.1007/978-3-319-29643-2\_13}},
ISSN = {{2194-5357}},
EISSN = {{2194-5365}},
ISBN = {{978-3-319-29643-2; 978-3-319-29642-5}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Artificial Intelligence; Computer Science, Theory \&
   Methods; Engineering, Electrical \& Electronic}},
Author-Email = {{yanjun.sun@telecom-paristech.fr
   gerard.memmi@telecom-paristech.fr
   sylvie.vignesg@telecom-paristech.fr}},
Number-of-Cited-References = {{27}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BE5LY}},
Unique-ID = {{ISI:000373003500013}},
DA = {{2020-08-28}},
}

@article{ ISI_000374192100007,
Author = {Petrov, M. and Gagarski, K. and Belyaev, M. and Itsykson, V.},
Title = {{Using a Bounded Model Checker for Test Generation: How to Kill Two Birds
   with One SMT Solver}},
Journal = {{AUTOMATIC CONTROL AND COMPUTER SCIENCES}},
Year = {{2015}},
Volume = {{49}},
Number = {{7}},
Pages = {{466-472}},
Month = {{DEC}},
Abstract = {{Automated test generation has received a lot of attention in recent
   decades, because it is one possible solution to the problems inherent to
   software testing: the need to write tests in the first place and
   providing test coverage for the human factor. De facto the most
   promising technique to automatically generate a test is dynamic symbolic
   execution assisted by an automated constraint solver, e.g., an SMT
   solver. This process is very similar to bounded model checking, which
   also deals with generating models from source code, asserting logic
   properties in it, and processing the returned model. This paper
   describes a prototype unit test generator for C based on a working
   bounded model checker called Borealis and shows that these two
   techniques are very similar and can be easily implemented using the same
   basic components. The prototype test generator has been evaluated on a
   number of examples and has shown good results in terms of test coverage
   and test excessiveness.}},
Publisher = {{ALLERTON PRESS INC}},
Address = {{18 WEST 27TH ST, NEW YORK, NY 10001 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Petrov, M (Corresponding Author), St Petersburg State Polytech Univ, Ul Politekhnicheskaya 29, St Petersburg 195251, Russia.
   Petrov, M.; Gagarski, K.; Belyaev, M.; Itsykson, V., St Petersburg State Polytech Univ, Ul Politekhnicheskaya 29, St Petersburg 195251, Russia.}},
DOI = {{10.3103/S0146411615070172}},
ISSN = {{0146-4116}},
EISSN = {{1558-108X}},
Keywords = {{automated test generation; dynamic symbolic execution; bounded model
   checking; satisfiability modulo theories; function contracts}},
Research-Areas = {{Automation \& Control Systems}},
Web-of-Science-Categories  = {{Automation \& Control Systems}},
Author-Email = {{vlad@icc.spbstu.ru}},
ResearcherID-Numbers = {{Itsykson, Vladimir M/N-8983-2014
   }},
ORCID-Numbers = {{Beliaev, Mikhail/0000-0003-1260-9211}},
Number-of-Cited-References = {{26}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Journal-ISO = {{Autom. Control Comp. Sci.}},
Doc-Delivery-Number = {{DJ4QL}},
Unique-ID = {{ISI:000374192100007}},
OA = {{Green Published}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000382568700011,
Author = {Arcaini, Paolo and Gargantini, Angelo and Riccobene, Elvinia},
Editor = {{DiNitto, E and Harman, M and Heymans, P}},
Title = {{Improving Model-Based Test Generation by Model Decomposition}},
Booktitle = {{2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE
   AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING
   (ESEC/FSE 2015) PROCEEDINGS}},
Year = {{2015}},
Pages = {{119-130}},
Note = {{10th Joint Meeting of the European Software Engineering Conference
   (ESEC) / ACM SIGSOFT Symposium on the Foundations of Software
   Engineering (FSE), Bergamo, ITALY, AUG 30-SEP 04, 2015}},
Organization = {{ACM SIGSOFT; ABB; Microsoft Res; Fujitsu; CEFRIEL; Google; BTO; ITA STQB
   \& Engn}},
Abstract = {{One of the well-known techniques for model-based test generation
   exploits the capability of model checkers to return counterexamples upon
   property violations. However, this approach is not always optimal in
   practice due to the required time and memory, or even not feasible due
   to the state explosion problem of model checking. A way to mitigate
   these limitations consists in decomposing a system model into suitable
   subsystem models separately analyzable. In this paper, we show a
   technique to decompose a system model into subsystems by exploiting the
   model variables dependency, and then we propose a test generation
   approach which builds tests for the single subsystems and combines them
   later in order to obtain tests for the system as a whole. Such approach
   mitigates the exponential increase of the test generation time and
   memory consumption, and, compared with the same model-based test
   generation technique applied to the whole system, shows to be more
   efficient. We prove that, although not complete, the approach is sound.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Arcaini, P (Corresponding Author), Charles Univ Prague, Fac Math \& Phys, Prague, Czech Republic.
   Arcaini, Paolo, Charles Univ Prague, Fac Math \& Phys, Prague, Czech Republic.
   Gargantini, Angelo, Univ Bergamo, Dipartimento Ingn, Bergamo, Italy.
   Riccobene, Elvinia, Univ Milan, Dipartimento Informat, I-20122 Milan, Italy.}},
DOI = {{10.1145/2786805.2786837}},
ISBN = {{978-1-4503-3675-8}},
Keywords = {{Test case generation; model-based testing; state explosion problem;
   abstraction}},
Keywords-Plus = {{CHECKING; COVERAGE}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods; Engineering, Electrical \& Electronic}},
Author-Email = {{arcaini@d3s.mff.cuni.cz
   angelo.gargantini@unibg.it
   elvinia.riccobene@unimi.it}},
ResearcherID-Numbers = {{Arcaini, Paolo/J-3616-2017}},
ORCID-Numbers = {{Arcaini, Paolo/0000-0002-6253-4062}},
Number-of-Cited-References = {{32}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BF5SI}},
Unique-ID = {{ISI:000382568700011}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000380572600011,
Author = {Quoc-Sang Phan and Malacaria, Pasquale},
Book-Group-Author = {{IEEE}},
Title = {{All-Solution Satisfiability Modulo Theories: applications, algorithms
   and benchmarks}},
Booktitle = {{PROCEEDINGS 10TH INTERNATIONAL CONFERENCE ON AVAILABILITY, RELIABILITY
   AND SECURITY ARES 2015}},
Year = {{2015}},
Pages = {{100-109}},
Note = {{Proceedings 10th International Conference on Availability, Reliability
   and Security ARES 2015, Toulouse, FRANCE, AUG 24-28, 2015}},
Organization = {{SBA Res; U Toulouse III Paul Sabatier; Tech U Wien Vienna U Tech; IRIT;
   SOC ICT KNOWLEDGE TRANSFER}},
Abstract = {{Satisfiability Modulo Theories (SMT) is a decision problem for logical
   formulas over one or more first-order theories. In this paper, we study
   the problem of finding all solutions of an SMT problem with respect to a
   set of Boolean variables, henceforth All-SMT. First, we show how an
   All-SMT solver can benefit various domains of application: Bounded Model
   Checking, Automated Test Generation, Reliability analysis, and
   Quantitative Information Flow. Secondly, we then propose algorithms to
   design an All-SMT solver on top of an existing SMT solver, and implement
   it into a prototype tool, called aZ3. Thirdly, we create a set of
   benchmarks for All-SMT in the theory of linear integer arithmetic
   QF\_LIA and the theory of bit vectors with arrays and uninterpreted
   functions QF\_AUFBV. We compare aZ3 against MathSAT, the only existing
   All-SMT solver, on our benchmarks. Experimental results show that aZ3 is
   more precise than MathSAT.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Phan, QS (Corresponding Author), Queen Mary Univ London, Sch Elect Engn \& Comp Sci, Mile End Rd, London E1 4NS, England.
   Quoc-Sang Phan; Malacaria, Pasquale, Queen Mary Univ London, Sch Elect Engn \& Comp Sci, Mile End Rd, London E1 4NS, England.}},
DOI = {{10.1109/ARES.2015.14}},
ISBN = {{978-1-4673-6590-1}},
Keywords = {{Satisfiability Modulo Theories; Symbolic Execution; Bounded Model
   Checking; Automated Test Generation; Reliability Analysis; Quantitative
   Information Flow}},
Keywords-Plus = {{CLAUSE FORM TRANSLATION; PROGRAM}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems; Computer Science, Software
   Engineering; Computer Science, Theory \& Methods}},
Author-Email = {{q.phan@qmul.ac.uk
   p.malacaria@qmul.ac.uk}},
ResearcherID-Numbers = {{Phan, Quoc-Sang/E-7995-2013}},
ORCID-Numbers = {{Phan, Quoc-Sang/0000-0002-1661-044X}},
Number-of-Cited-References = {{39}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BF3SD}},
Unique-ID = {{ISI:000380572600011}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000380430300022,
Author = {Ahn, Sunha and Malik, Sharad and Gupta, Aarti},
Book-Group-Author = {{IEEE}},
Title = {{Completeness Bounds and Sequentialization for Model Checking of
   Interacting Firmware and Hardware}},
Booktitle = {{2015 INTERNATIONAL CONFERENCE ON HARDWARE/SOFTWARE CODESIGN AND SYSTEM
   SYNTHESIS (CODES+ISSS)}},
Year = {{2015}},
Pages = {{202-211}},
Note = {{IEEE/ACM International Conference on Hardware/Software Codesign and
   System Synthesis (CODES+ISSS), Amsterdam, NETHERLANDS, OCT 04-09, 2015}},
Organization = {{IEEE; ACM; RECORE; NEC; Univ Leiden; Univ Amsterdam; NXP; Synopsys;
   Daedalus Fdn; Solid Sands}},
Abstract = {{An emerging trend in system design is to implement complex system
   management functions in firmware ( FW). This changing design scenario
   requires support for verifying FW in the context of its hardware ( HW)
   environment. As shown in previous work, there is value in a unified
   HW-FW model for driving the verification tasks. This model can help
   identify specific commonly-occurring interaction patterns between the HW
   and FW. These patterns enable pruning the verification search space as
   demonstrated in previous work in automating FW test generation using
   concolic testing.
   In this work, we introduce a bounded model checking ( BMC)-based
   methodology for FW verification. Although BMC is effective for finding
   bugs by unrolling the underlying transition system up to some bound, it
   requires a completeness threshold on the bound to ensure complete
   verification. We show how commonly occurring FW code patterns can be
   exploited, using inexpensive static analysis techniques, to determine
   this completeness bound. Further, we show how this bound analysis,
   combined with the interaction patterns in the unified HW-FW model, is
   used to sequentialize the concurrent FW and HW code, i. e., to derive a
   sequential program that represents the parallel interaction of the FW
   and HW. This enables the direct application of standard software model
   checkers such as CBMC on this sequentialized program.
   We have automated this process by implementing: ( i) a static
   completeness bound analyzer on top of the tool Frama-C, and ( ii) a
   sequentializer to generate code for verification by the CBMC model
   checker. We evaluate the resulting tool using three real FW benchmarks,
   each consisting of a Linux device driver and its interacting
   QEMU-emulated HW code with multiple correctness properties. We
   successfully computed the BMC completeness bounds for 41 out of 46
   properties and completed model checking for 12 out of 16 FW
   transactions.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Ahn, S (Corresponding Author), Princeton Univ, Princeton, NJ 08544 USA.
   Ahn, Sunha; Malik, Sharad; Gupta, Aarti, Princeton Univ, Princeton, NJ 08544 USA.}},
ISBN = {{978-1-4673-8321-9}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science, Software
   Engineering; Engineering, Electrical \& Electronic}},
Author-Email = {{sahn@princeton.edu
   sharad@princeton.edu
   aartig@cs.princeton.edu}},
Number-of-Cited-References = {{21}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BF1RJ}},
Unique-ID = {{ISI:000380430300022}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000380426000026,
Author = {Hilken, Christoph and Peleska, Jan and Wille, Robert},
Editor = {{Hammoudi, S and Pires, LF and Desfray, P and Filipe, J}},
Title = {{A Unified Formulation of Behavioral Semantics for SysML Models}},
Booktitle = {{MODELSWARD 2015 PROCEEDINGS OF THE 3RD INTERNATIONAL CONFERENCE ON
   MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT}},
Year = {{2015}},
Pages = {{263-271}},
Note = {{3rd International Conference on Model-Driven Engineering and Software
   Development (MODELSWARD), Angers, FRANCE, FEB 09-11, 2015}},
Organization = {{Inst Syst \& Technol Informat Control \& Commu; Ecole Superieure
   Electronique Ouest; ACM Special Interest Grp Management Informat Syst;
   ACM Special Interest Grp Software Engn; Open Grp SOA Work Grp; Inst
   Elect Informat \& Commun Engineers; Inst Elect Informat \& Commun
   Engineers, Special Interest Grp Software Enterprise Modeling; AIS
   Special Interest Grp Modeling \& Simulat; IEEE Comp Soc Tech Council
   Software Engn; IEEE Tech Comm Business Informat \& Syst}},
Abstract = {{In order to cope with the complexity of today's system designs, higher
   levels of abstraction are considered. Modeling languages such as SysML
   provide adequate description means for an abstract specification of the
   structure and the behavior of a system to be implemented. Due to its
   sufficient degree of formality, SysML additionally allows for performing
   several automated test and verification tasks. For these tasks, however,
   a formal encoding of the behavioral model semantics is required; this is
   typically achieved by generating initial state conditions as well as the
   transition relation from the model. Since SysML provides a multitude of
   alternative or complementary notations, this poses a significant
   challenge to the development of corresponding tool support. In this
   paper, we therefore propose an alternative approach to the generation of
   transition relations: In a first step, a model-to-model transformation
   is applied which unifies the behavioral descriptions into one single
   notation, namely operations allocated in blocks and specified by pre-and
   post-conditions. Afterwards, only pre-and post-conditions as well as
   some auxiliary constraints for fixing semantic variation points need to
   be considered when generating the transition relation. The approach
   presented here has been evaluated in the development of industrial tools
   supporting bounded model checking and model-based test generation.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Hilken, C (Corresponding Author), Univ Bremen, Inst Comp Sci, D-28359 Bremen, Germany.
   Hilken, Christoph; Peleska, Jan; Wille, Robert, Univ Bremen, Inst Comp Sci, D-28359 Bremen, Germany.
   Wille, Robert, DFKI GmbH, Cyber Phys Syst, D-28359 Bremen, Germany.}},
ISBN = {{978-9-8975-8136-6}},
Keywords = {{SysML; State Machines; Transition Relation; Model Checking; Model-based
   Testing}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{chilken@informatik.uni-bremen.de
   jp@informatik.uni-bremen.de
   rwille@informatik.uni-bremen.de}},
ResearcherID-Numbers = {{Launay, David/A-5270-2018
   Wille, Robert/D-9055-2013}},
ORCID-Numbers = {{Launay, David/0000-0003-1840-1817
   Wille, Robert/0000-0002-4993-7860}},
Number-of-Cited-References = {{12}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BF1PQ}},
Unique-ID = {{ISI:000380426000026}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000361839900001,
Author = {Chang, Longhui and Miao, Huaikou and Lu, Gongzheng},
Editor = {{Liu, S and Duan, Z}},
Title = {{An Implementation Framework for Optimizing Test Case Generation Using
   Model Checking}},
Booktitle = {{STRUCTURED OBJECT-ORIENTED FORMAL LANGUAGE AND METHOD}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2015}},
Volume = {{8979}},
Pages = {{3-16}},
Note = {{4th International Workshop on Structured Object-Oriented Formal Language
   (SOFL) + Modeling, Simulation, and Verification Language (MSVL), Hosei
   Univ, Shaoying Liu Res Grp, Luxembourg, LUXEMBOURG, NOV 06, 2014}},
Organization = {{Xidian Univ, Zhenhua Duan Res Grp}},
Abstract = {{Model checking based automated software testing has gained a great
   popularity in the field of software test. However, during the process of
   test cases generation, the redundant trap properties lead to calling the
   model checker frequently and generating redundant test cases. This paper
   presents an implementation framework for optimizing test cases
   generation based on satisfiability solving. After a new test case is
   generated, the SAT solver is employed to determine whether the generated
   test case covers the rest trap properties. If the trap properties are
   covered by the generated test case, they will be removed from the trap
   properties set. The bound model checker is used as the test generation
   engine, which effectively limits the length of counterexamples and
   ensures covering the same test goals with shorter total length. Our
   approach can not only decrease the times of calling the model checker,
   but also help to realize the automatic optimization of model checking
   based test cases generation.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Chang, LH (Corresponding Author), Shanghai Univ, Sch Comp Engn \& Sci, Shanghai 200444, Peoples R China.
   Chang, Longhui; Miao, Huaikou, Shanghai Univ, Sch Comp Engn \& Sci, Shanghai 200444, Peoples R China.
   Chang, Longhui; Miao, Huaikou; Lu, Gongzheng, Shanghai Key Lab Comp Software Testing \& Evaluati, Shanghai 201112, Peoples R China.}},
DOI = {{10.1007/978-3-319-17404-4\_1}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-319-17404-4; 978-3-319-17403-7}},
Keywords = {{Bound model checking; Satisfiability; Test case generation;
   Trap-properties reduction}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
Author-Email = {{changlh@shu.edu.cn
   hkmiao@shu.edu.cn
   lugz@shu.edu.cn}},
Number-of-Cited-References = {{12}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BD5WI}},
Unique-ID = {{ISI:000361839900001}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000382380700008,
Author = {Toman, John and Pernsteiner, Stuart and Torlak, Emina},
Book-Author = {{Cohen, M
   Grunske, L
   Whalen, M}},
Title = {{CRUST: A Bounded Verifier for Rust}},
Booktitle = {{2015 30TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE
   ENGINEERING (ASE)}},
Series = {{IEEE ACM International Conference on Automated Software Engineering}},
Year = {{2015}},
Pages = {{75-80}},
Note = {{30th IEEE/ACM International Conference on Automated Software Engineering
   Workshops (ASEW), Lincoln, NE, NOV 09-13, 2015}},
Organization = {{IEEE; IEEE Comp Soc; ACM; ACM Special Interest Grp Software Engn; IEEE
   Comp Soc Tech Council Software Engn; ACM SIGAI}},
Abstract = {{Rust is a modern systems language that provides guaranteed memory safety
   through static analysis. However, Rust includes an escape hatch in the
   form of ``unsafe code,{''} which the compiler assumes to be memory safe
   and to preserve crucial pointer aliasing invariants. Unsafe code appears
   in many data structure implementations and other essential libraries,
   and bugs in this code can lead to memory safety violations in parts of
   the program that the compiler otherwise proved safe.
   We present CRUST, a tool combining exhaustive test generation and
   bounded model checking to detect memory safety errors, as well as
   violations of Rust's pointer aliasing invariants within unsafe library
   code. CRUST requires no programmer annotations, only an indication of
   the modules to check. We evaluate CRUST on data structures from the Rust
   standard library. It detects memory safety bugs that arose during the
   library's development and remained undetected for several months.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Toman, J (Corresponding Author), Univ Washington, Dept Comp Sci \& Engn, Seattle, WA 98195 USA.
   Toman, John; Pernsteiner, Stuart; Torlak, Emina, Univ Washington, Dept Comp Sci \& Engn, Seattle, WA 98195 USA.}},
DOI = {{10.1109/ASE.2015.77}},
ISSN = {{1527-1366}},
ISBN = {{978-1-5090-0025-8}},
Keywords = {{SMT-based verification; test generation; memory safety}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{jtoman@cs.washington.edu
   spernste@cs.washington.edu
   emina@cs.washington.edu}},
Number-of-Cited-References = {{10}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BF5OE}},
Unique-ID = {{ISI:000382380700008}},
DA = {{2020-08-28}},
}

@article{ ISI_000343879800006,
Author = {Zeng, Bolong and Tan, Li},
Title = {{A unified framework for evaluating test criteria in
   model-checking-assisted test case generation}},
Journal = {{INFORMATION SYSTEMS FRONTIERS}},
Year = {{2014}},
Volume = {{16}},
Number = {{5, SI}},
Pages = {{823-834}},
Month = {{NOV}},
Abstract = {{Testing is often cited as one of the most costly operations in testing
   dependable systems (Heimdahl et al. 2001). A particular challenging task
   in testing is test-case generation. To improve the efficiency of
   test-case generation and reduce its cost, recently automated formal
   verification techniques such as model checking are extended to automate
   test-case generation processes. In model-checking-assisted test-case
   generation, a test criterion is formulated as temporal logical formulae,
   which are used by a model checker to generate test cases satisfying the
   test criterion. Traditional test criteria such as branch coverage
   criterion and newer temporal-logic-inspired criteria such as property
   coverage criteria (Tan et al. 2004) are used with
   model-checking-assisted test generation. Two key questions in
   model-checking-assisted test generation are how efficiently a model
   checker may generate test suites for these criteria and how effective
   these test suites are. To answer these questions, we developed a unified
   framework for evaluating (1) the effectiveness of the test criteria used
   with model-checking-assisted test-case generation and (2) the efficiency
   of test-case generation for these criteria. The benefits of this work
   are three-fold: first, the computational study carried out in this work
   provides some measurements of the effectiveness and efficiency of
   various test criteria used with model-checking-assisted test case
   generation. These performance measurements are important factors to
   consider when a practitioner selects appropriate test criteria for an
   application of model-checking-assisted test generation. Second, we
   propose a unified test generation framework based on generalized Buchi
   automata. The framework uses the same model checker, in this case, SPIN
   model checker (Holzmann 1997), to generate test cases for different
   criteria and compare them on a consistent basis. Last but not least, we
   describe in great details the methodology and automated test generation
   environment that we developed on the basis of our unified framework.
   Such details would be of interest to researchers and practitioners who
   want to use and extend this unified framework and its accompanying
   tools.}},
Publisher = {{SPRINGER}},
Address = {{VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Tan, L (Corresponding Author), Washington State Univ, Sch Elect Engn \& Comp Sci, Richland, WA 99352 USA.
   Zeng, Bolong; Tan, Li, Washington State Univ, Sch Elect Engn \& Comp Sci, Richland, WA 99352 USA.}},
DOI = {{10.1007/s10796-013-9424-y}},
ISSN = {{1387-3326}},
EISSN = {{1572-9419}},
Keywords = {{Test case generation; Model checking; Performance evaluation; Test
   criteria}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems; Computer Science, Theory \&
   Methods}},
Author-Email = {{bzeng@wsu.edu
   litan@tricity.wsu.edu}},
Number-of-Cited-References = {{31}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{12}},
Journal-ISO = {{Inf. Syst. Front.}},
Doc-Delivery-Number = {{AR9GB}},
Unique-ID = {{ISI:000343879800006}},
DA = {{2020-08-28}},
}

@article{ ISI_000348907400010,
Author = {Uhler, Richard and Dave, Nirav},
Title = {{Smten with Satisfiability-Based Search}},
Journal = {{ACM SIGPLAN NOTICES}},
Year = {{2014}},
Volume = {{49}},
Number = {{10}},
Pages = {{157-176}},
Month = {{OCT}},
Note = {{2014 ACM International Conference on
   Object-Oriented-Programming-Systems-Languages-and-Applications (OOPSLA
   14), Portland, OR, OCT 20-24, 2014}},
Abstract = {{Satisfiability (SAT) and Satisfiability Modulo Theories (SMT) have been
   used in solving a wide variety of important and challenging problems,
   including automatic test generation, model checking, and program
   synthesis. For these applications to scale to larger problem instances,
   developers cannot rely solely on the sophistication of SAT and SMT
   solvers to efficiently solve their queries; they must also optimize
   their own orchestration and construction of queries. We present Smten, a
   high-level language for orchestrating and constructing
   satisfiability-based search queries. We show that applications developed
   using Smten require significantly fewer lines of code and less developer
   effort to achieve results comparable to standard SMT-based tools.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Uhler, R (Corresponding Author), MIT CSAIL, Cambridge, MA 02139 USA.
   Uhler, Richard, MIT CSAIL, Cambridge, MA 02139 USA.
   Dave, Nirav, SRI Int, Menlo Pk, CA USA.}},
DOI = {{10.1145/2714064.2660208}},
ISSN = {{0362-1340}},
EISSN = {{1558-1160}},
Keywords = {{Satisfiability; Satisfiability Modulo Theories; Domain-Specific
   Language; Haskell}},
Keywords-Plus = {{OPTIMIZATION; CHECKING}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{ruhler@csail.mit.edu
   ndave@csl.sri.com}},
Funding-Acknowledgement = {{Defense Advanced Research Projects Agency (DARPA)United States
   Department of DefenseDefense Advanced Research Projects Agency (DARPA);
   Air Force Research Laboratory (AFRL)United States Department of
   DefenseUS Air Force Research Laboratory {[}FA8750-10-C-0237]; National
   Science FoundationNational Science Foundation (NSF) {[}CCF-1217498]}},
Funding-Text = {{This work was sponsored by the Defense Advanced Research Projects Agency
   (DARPA) and the Air Force Research Laboratory (AFRL), under contract
   FA8750-10-C-0237 and supported by National Science Foundation under
   Grant No. CCF-1217498. The views, opinions, and/or findings contained in
   this report are those of the authors and should not be interpreted as
   representing the official views or policies, either expressed or
   implied, of the Defense Advanced Research Projects Agency or the
   Department of Defense.}},
Number-of-Cited-References = {{36}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{3}},
Journal-ISO = {{ACM Sigplan Not.}},
Doc-Delivery-Number = {{CA4WJ}},
Unique-ID = {{ISI:000348907400010}},
DA = {{2020-08-28}},
}

@article{ ISI_000341338500012,
Author = {Gorschek, Tony and Tempero, Ewan and Angelis, Lefteris},
Title = {{On the use of software design models in software development practice:
   An empirical investigation}},
Journal = {{JOURNAL OF SYSTEMS AND SOFTWARE}},
Year = {{2014}},
Volume = {{95}},
Pages = {{176-193}},
Month = {{SEP}},
Abstract = {{Research into software design models in general, and into the UML in
   particular, focuses on answering the question how design models are
   used, completely ignoring the question if they are used. There is an
   assumption in the literature that the UML is the de facto standard, and
   that use of design models has had a profound and substantial effect on
   how software is designed by virtue of models giving the ability to do
   model-checking, code generation, or automated test generation. However
   for this assumption to be true, there has to be significant use of
   design models in practice by developers.
   This paper presents the results of a survey summarizing the answers of
   3785 developers answering the simple question on the extent to which
   design models are used before coding. We relate their use of models with
   (i) total years of programming experience, (ii) open or closed
   development, (iii) educational level, (iv) programming language used,
   and (v) development type.
   The answer to our question was that design models are not used very
   extensively in industry, and where they are used, the use is informal
   and without tool support, and the notation is often not UML. The use of
   models decreased with an increase in experience and increased with
   higher level of qualification. Overall we found that models are used
   primarily as a communication and collaboration mechanism where there is
   a need to solve problems and/or get a joint understanding of the overall
   design in a group. We also conclude that models are seldom updated after
   initially created and are usually drawn on a whiteboard or on paper. (C)
   2014 Elsevier Inc. All rights reserved.}},
Publisher = {{ELSEVIER SCIENCE INC}},
Address = {{STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Gorschek, T (Corresponding Author), Blekinge Inst Technol, Karlskrona, Sweden.
   Gorschek, Tony, Blekinge Inst Technol, Karlskrona, Sweden.
   Tempero, Ewan, Univ Auckland, Auckland 1, New Zealand.
   Angelis, Lefteris, Aristotle Univ Thessaloniki, GR-54006 Thessaloniki, Greece.}},
DOI = {{10.1016/j.jss.2014.03.082}},
ISSN = {{0164-1212}},
EISSN = {{1873-1228}},
Keywords = {{Software design models; Empirical industrial survey; Model-driven
   engineering (MOD, MDE, UML)}},
Keywords-Plus = {{UML; METHODOLOGIES; VISUALIZATION; EXPERIENCES}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
Author-Email = {{tony.gorschek@bth.se
   e.tempero@auckland.ac.nz
   lef@csd.auth.gr}},
Number-of-Cited-References = {{61}},
Times-Cited = {{27}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{12}},
Journal-ISO = {{J. Syst. Softw.}},
Doc-Delivery-Number = {{AO4VC}},
Unique-ID = {{ISI:000341338500012}},
DA = {{2020-08-28}},
}

@article{ ISI_000209673200007,
Author = {Guo, Hai-Feng and Subramaniam, Mahadevan},
Title = {{Model-based test generation using extended symbolic grammars}},
Journal = {{INTERNATIONAL JOURNAL ON SOFTWARE TOOLS FOR TECHNOLOGY TRANSFER}},
Year = {{2014}},
Volume = {{16}},
Number = {{4}},
Pages = {{437-455}},
Month = {{AUG}},
Abstract = {{A novel, model-based test case generation approach for validating
   reactive systems, especially those supporting richly structured data
   inputs and/or interactions, is presented. Given an executable system
   model and an extended symbolic grammar specifying plausible system
   inputs, the approach performs a model-based simulation to (i) ensure the
   consistency of the model with respect to the specified inputs, and (ii)
   generate corresponding test cases for validating the system. The
   model-based simulation produces a state transition diagram (STD)
   automatically justifying the model runtime behaviors within the test
   case coverage. The STD can further be transformed to produce an evolved
   symbolic grammar, which can then be used to incrementally generate a
   refined set of test cases. As a case study, we present a live sequence
   chart (LSC) model-based test generator, named LCT in short, for LSC
   simulation and consistency testing. The evolved symbolic grammar
   produced by the simulator can either be used to generate practical test
   cases for software testing, or be further refined by applying our
   model-based test generation approach again with additional test coverage
   criteria. We further show that LSCs can also be used to specify and test
   certain temporal system properties during the model simulation. Their
   satisfaction, reflected in the STD, can either be served as a directive
   for selective test generation, or a basis for further temporal property
   model checking.}},
Publisher = {{SPRINGER HEIDELBERG}},
Address = {{TIERGARTENSTRASSE 17, D-69121 HEIDELBERG, GERMANY}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Guo, HF (Corresponding Author), Univ Nebraska, Dept Comp Sci, Omaha, NE 68182 USA.
   Guo, Hai-Feng; Subramaniam, Mahadevan, Univ Nebraska, Dept Comp Sci, Omaha, NE 68182 USA.}},
DOI = {{10.1007/s10009-014-0316-3}},
ISSN = {{1433-2779}},
EISSN = {{1433-2787}},
Keywords = {{Model-based test generation; Symbolic grammar; Live sequence chart}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{haifengguo@unomaha.edu
   msubramaniam@unomaha.edu}},
Number-of-Cited-References = {{45}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Journal-ISO = {{Int. J. Softw. Tools Technol. Transf.}},
Doc-Delivery-Number = {{V43HT}},
Unique-ID = {{ISI:000209673200007}},
DA = {{2020-08-28}},
}

@article{ ISI_000339372600004,
Author = {Chen, Mingsong and Qin, Xiaoke and Mishra, Prabhat},
Title = {{Learning-oriented Property Decomposition for Automated Generation of
   Directed Tests}},
Journal = {{JOURNAL OF ELECTRONIC TESTING-THEORY AND APPLICATIONS}},
Year = {{2014}},
Volume = {{30}},
Number = {{3}},
Pages = {{287-306}},
Month = {{JUN}},
Abstract = {{SAT-based Bounded Model Checking (BMC) is promising for automated
   generation of directed tests. Due to the state space explosion problem,
   SAT-based BMC is unsuitable to handle complex properties with large SAT
   instances or large bounds. In this paper, we propose a framework to
   automatically scale down the SAT falsification complexity by utilizing
   the decision ordering based learning from decomposed sub-properties. Our
   framework makes three important contributions: i) it proposes
   learning-oriented decomposition techniques for complex property
   falsification, ii) it proposes an efficient approach to accelerate the
   complex property falsification using the learning from decomposed
   sub-properties, and iii) it combines the advantages of both property
   decomposition and property clustering to reduce the overall test
   generation time. The experimental results using both software and
   hardware benchmarks demonstrate the effectiveness of our framework.}},
Publisher = {{SPRINGER}},
Address = {{ONE NEW YORK PLAZA, SUITE 4600, NEW YORK, NY, UNITED STATES}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Chen, MS (Corresponding Author), E China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
   Chen, Mingsong, E China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
   Qin, Xiaoke; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
DOI = {{10.1007/s10836-014-5452-x}},
ISSN = {{0923-8174}},
EISSN = {{1573-0727}},
Keywords = {{Property decomposition; Bounded model checking; SAT; Test generation}},
Keywords-Plus = {{MODEL CHECKING; SAT; SEARCH}},
Research-Areas = {{Engineering}},
Web-of-Science-Categories  = {{Engineering, Electrical \& Electronic}},
Author-Email = {{mschen@sei.ecnu.edu.cn
   xqin@cise.ufl.edu
   prabhat@cise.ufl.edu}},
Funding-Acknowledgement = {{NSF of ChinaNational Natural Science Foundation of China (NSFC)
   {[}61202103, 91118007]; Innovation Program of Shanghai Municipal
   Education CommissionInnovation Program of Shanghai Municipal Education
   Commission {[}14ZZ047]; SW/HW Co-design Engineering Research Center of
   MoE {[}2013001]; Shanghai Knowledge Service Platform Project {[}ZF1213];
   NSFNational Science Foundation (NSF) {[}CNS-0746261, CCF-1218629]}},
Funding-Text = {{This work was partially supported by NSF of China 61202103 and 91118007,
   Innovation Program of Shanghai Municipal Education Commission 14ZZ047,
   Open Project of SW/HW Co-design Engineering Research Center of MoE
   2013001, and Shanghai Knowledge Service Platform Project ZF1213. This
   work was also partially supported by NSF grants CNS-0746261 and
   CCF-1218629. A preliminary version {[}7] of this paper appeared in the
   proceedings of Design, Automation and Test in Europe (DATE) 2011.}},
Number-of-Cited-References = {{30}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{7}},
Journal-ISO = {{J. Electron. Test.-Theory Appl.}},
Doc-Delivery-Number = {{AL8FE}},
Unique-ID = {{ISI:000339372600004}},
DA = {{2020-08-28}},
}

@article{ ISI_000335555500003,
Author = {Nogueira, Sidney and Sampaio, Augusto and Mota, Alexandre},
Title = {{Test generation from state based use case models}},
Journal = {{FORMAL ASPECTS OF COMPUTING}},
Year = {{2014}},
Volume = {{26}},
Number = {{3}},
Pages = {{441-490}},
Month = {{MAY}},
Abstract = {{We present a strategy for the automatic generation of test cases from
   parametrised use case templates that capture control flow, state, input
   and output. Our approach allows test scenario selection based on
   particular traces or states of the model. The templates are internally
   represented as CSP processes with explicit input and output alphabets,
   and test generation is expressed as counter-examples of refinement
   checking, mechanised using the FDR tool. Soundness is addressed through
   an input-output conformance relation formally defined in the CSP traces
   model. This purely process algebraic characterisation of testing has
   some potential advantages, mainly an easy automation of conformance
   verification and test case generation via model checking, without the
   need to develop any explicit algorithm.}},
Publisher = {{SPRINGER}},
Address = {{233 SPRING ST, NEW YORK, NY 10013 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Nogueira, S (Corresponding Author), Mobile Devices R\&D Motorola Ind Ltda, Rod SP 340,Km 128,7 A, BR-13820000 Jaguariuna, SP, Brazil.
   Nogueira, Sidney, Mobile Devices R\&D Motorola Ind Ltda, BR-13820000 Jaguariuna, SP, Brazil.
   Nogueira, Sidney; Sampaio, Augusto; Mota, Alexandre, Univ Fed Pernambuco, Ctr Informat, BR-50732970 Recife, PE, Brazil.}},
DOI = {{10.1007/s00165-012-0258-z}},
ISSN = {{0934-5043}},
EISSN = {{1433-299X}},
Keywords = {{Natural language; Test model; Use cases; CSP; Test generation;
   Conformance testing}},
Keywords-Plus = {{ABSTRACTION; REFINEMENT}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{scn@cin.ufpe.br}},
ORCID-Numbers = {{Mota, Alexandre/0000-0003-4416-8123}},
Funding-Acknowledgement = {{CAPESCAPES; CNPqNational Council for Scientific and Technological
   Development (CNPq)}},
Funding-Text = {{We thank Bill Roscoe for discussions concerning the design of an
   efficient memory model in CSP for analysis using FDR. We also thank the
   Brazilian research agencies CAPES and CNPq for financial support, and
   particularly CNPq for the grant that supports the INES project. Finally,
   we thank the anonymous referees for several comments and corrections
   that significantly contributed to improve this paper.}},
Number-of-Cited-References = {{59}},
Times-Cited = {{14}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{6}},
Journal-ISO = {{Form. Asp. Comput.}},
Doc-Delivery-Number = {{AG6VB}},
Unique-ID = {{ISI:000335555500003}},
DA = {{2020-08-28}},
}

@article{ ISI_000336365800002,
Author = {Groce, Alex and Havelund, Klaus and Holzmann, Gerard and Joshi, Rajeev
   and Xu, Ru-Gang},
Title = {{Establishing flight software reliability: testing, model checking,
   constraint-solving, monitoring and learning}},
Journal = {{ANNALS OF MATHEMATICS AND ARTIFICIAL INTELLIGENCE}},
Year = {{2014}},
Volume = {{70}},
Number = {{4, SI}},
Pages = {{315-349}},
Month = {{APR}},
Abstract = {{In this paper we discuss the application of a range of techniques to the
   verification of mission-critical flight software at NASA's Jet
   Propulsion Laboratory. For this type of application we want to achieve a
   higher level of confidence than can be achieved through standard
   software testing. Unfortunately, given the current state of the art,
   especially when efforts are constrained by the tight deadlines and
   resource limitations of a flight project, it is not feasible to produce
   a rigorous formal proof of correctness of even a well-specified
   stand-alone module such as a file system (much less more tightly coupled
   or difficult-to-specify modules). This means that we must look for a
   practical alternative in the area between traditional testing and proof,
   as we attempt to optimize rigor and coverage. The approaches we describe
   here are based on testing, model checking, constraint-solving,
   monitoring, and finite-state machine learning, in addition to static
   code analysis. The results we have obtained in the domain of file
   systems are encouraging, and suggest that for more complex properties of
   programs with complex data structures, it is possibly more beneficial to
   use constraint solvers to guide and analyze execution (i.e., as in
   testing, even if performed by a model checking tool) than to translate
   the program and property into a set of constraints, as in
   abstraction-based and bounded model checkers. Our experience with
   non-file-system flight software modules shows that methods even further
   removed from traditional static formal methods can be assisted by formal
   approaches, yet readily adopted by test engineers and software
   developers, even as the key problem shifts from test generation and
   selection to test evaluation.}},
Publisher = {{SPRINGER}},
Address = {{VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Groce, A (Corresponding Author), Oregon State Univ, Sch Elect Engn \& Comp Sci, Corvallis, OR 97331 USA.
   Groce, Alex, Oregon State Univ, Sch Elect Engn \& Comp Sci, Corvallis, OR 97331 USA.
   Havelund, Klaus; Holzmann, Gerard; Joshi, Rajeev, CALTECH, Jet Prop Lab, Lab Reliable Software, Pasadena, CA 91109 USA.
   Xu, Ru-Gang, Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90095 USA.}},
DOI = {{10.1007/s10472-014-9408-8}},
ISSN = {{1012-2443}},
EISSN = {{1573-7470}},
Keywords = {{File systems; Testing; Model checking; Verification; Flight software;
   Formal proof}},
Keywords-Plus = {{RULE SYSTEMS; VERIFICATION; COMPILER; EAGLE}},
Research-Areas = {{Computer Science; Mathematics}},
Web-of-Science-Categories  = {{Computer Science, Artificial Intelligence; Mathematics, Applied}},
Author-Email = {{agroce@gmail.com}},
Funding-Acknowledgement = {{National Aeronautics and Space AdministrationNational Aeronautics \&
   Space Administration (NASA); NASA ESAS 6G}},
Funding-Text = {{The research described in this publication was carried out at the Jet
   Propulsion Laboratory, California Institute of Technology, under a
   contract with the National Aeronautics and Space Administration. Funding
   was also provided by NASA ESAS 6G. (C) 2008. All Rights Reserved}},
Number-of-Cited-References = {{102}},
Times-Cited = {{10}},
Usage-Count-Last-180-days = {{1}},
Usage-Count-Since-2013 = {{15}},
Journal-ISO = {{Ann. Math. Artif. Intell.}},
Doc-Delivery-Number = {{AH8DZ}},
Unique-ID = {{ISI:000336365800002}},
DA = {{2020-08-28}},
}

@article{ ISI_000333020600004,
Author = {Mohalik, Swarup and Gadkari, Ambar A. and Yeolekar, Anand and
   Shashidhar, K. C. and Ramesh, S.},
Title = {{Software Testing, Verification and Reliability}},
Journal = {{SOFTWARE TESTING VERIFICATION \& RELIABILITY}},
Year = {{2014}},
Volume = {{24}},
Number = {{2}},
Pages = {{155-180}},
Month = {{MAR}},
Abstract = {{Model-based test generation techniques based on random input generation
   and guided simulation do not satisfy the demands of high test coverage
   and completeness guarantees as required by safety-critical applications.
   Recently, test generation techniques based on model checking have been
   reported to bridge this gap. To evaluate the effectiveness of these
   techniques, an in-house tool suite, AutoMOTGen, has been developed for
   Simulink/Stateflow and applied on real-life case studies at General
   Motors. This paper outlines the test generation methodology of
   AutoMOTGen and gives a comparative study with a commercial, primarily
   random input-based, test generation tool on the same set of examples.
   The results indicate that in terms of coverage, model checking-based
   techniques complement the random input-based techniques. In addition,
   they provide proofs for unreachability that can aid in debugging the
   models. Therefore, it is recommended that model checking-based tools be
   utilized to complement and enhance the effectiveness of model-based
   testing methods in safety-critical systems engineering. Copyright (c)
   2013 John Wiley \& Sons, Ltd.}},
Publisher = {{WILEY}},
Address = {{111 RIVER ST, HOBOKEN 07030-5774, NJ USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Gadkari, AA (Corresponding Author), GM Tech Ctr India Pvt Ltd, Gen Motors Global Res \& Dev, India Sci Lab, Creator Bldg,Int Tech Pk Ltd,Whitefield Rd, Bangalore 560066, Karnataka, India.
   Mohalik, Swarup; Gadkari, Ambar A.; Yeolekar, Anand; Shashidhar, K. C.; Ramesh, S., GM Tech Ctr India Pvt Ltd, Gen Motors Global Res \& Dev, India Sci Lab, Bangalore 560066, Karnataka, India.}},
DOI = {{10.1002/stvr.1489}},
ISSN = {{0960-0833}},
EISSN = {{1099-1689}},
Keywords = {{model-based testing; automatic test generation; model checking; model
   translation; test coverage; Simulink; Stateflow}},
Keywords-Plus = {{TEST-CASE GENERATION; MODEL CHECKING; INDUCTION; LANGUAGE; SIMULINK}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{ambar.gadkari@gmail.com}},
Number-of-Cited-References = {{55}},
Times-Cited = {{20}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{18}},
Journal-ISO = {{Softw. Test. Verif. Reliab.}},
Doc-Delivery-Number = {{AD1VA}},
Unique-ID = {{ISI:000333020600004}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000343013000007,
Author = {Gregorio-Rodriguez, Carlos and Llana, Luis and Martinez-Torres, Rafael},
Editor = {{Abraham, E and Palamidessi, C}},
Title = {{Effectiveness for Input Output Conformance Simulation ioco(s)under-bar}},
Booktitle = {{FORMAL TECHNIQUES FOR DISTRIBUTED OBJECTS, COMPONENTS, AND SYSTEMS}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2014}},
Volume = {{8461}},
Pages = {{100-116}},
Note = {{34th IFIP WG 6.1 International Conference on Formal Techniques for
   Distributed Objects, Components and Systems (FORTE), Berlin, GERMANY,
   JUN 03-05, 2014}},
Organization = {{Int Federat Informat Proc Working Grp 6 1}},
Abstract = {{In this paper we continue the study of the input-output conformance
   simulation (iocos). In particular, we focus on implementation aspects to
   show that iocos is indeed an interesting semantic relation for formal
   methods. We address two complementary issues: a) In the context of model
   based testing (MBT) we present an online, also called on-the-fly,
   testing algorithm that checks whether an implementation conforms a given
   specification. Online testing combines test generation and execution and
   avoids the generation of the complete test suite for the specification.
   We prove both soundness and completeness of the online algorithm with
   respect to the iocos relation. b) In the context of formal verification
   and model checking minimisation a key issue is to efficiently compute
   the considered semantic relations; we show how the coinductive flavour
   of our conformance relation iocos makes it appropriate to be cast into
   an instance of the Generalised Coarsest Partition Problem (GCPP) and
   thus it can be efficiently computed.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Gregorio-Rodriguez, C (Corresponding Author), Univ Complutense Madrid, Dept Sistemas Informat \& Comp, E-28040 Madrid, Spain.
   Gregorio-Rodriguez, Carlos; Llana, Luis; Martinez-Torres, Rafael, Univ Complutense Madrid, Dept Sistemas Informat \& Comp, E-28040 Madrid, Spain.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-662-43613-4; 978-3-662-43612-7}},
Keywords = {{Model Based Testing; Online Testing; Simulation Algorithm; Input Output
   Conformance Simulation; Model Checking Minimisation; Verification;
   Generalised Coarsest Partition Problem; Formal Methods}},
Keywords-Plus = {{BISIMULATION}},
Research-Areas = {{Computer Science; Science \& Technology - Other Topics}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods; Logic}},
Author-Email = {{cgr@sip.ucm.es
   llana@ucm.es
   rmartine@fdi.ucm.es}},
ORCID-Numbers = {{GREGORIO RODRIGUEZ, CARLOS/0000-0001-7612-899X
   LLANA DIAZ, LUIS FERNANDO/0000-0003-1962-1504}},
Number-of-Cited-References = {{29}},
Times-Cited = {{4}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BB3SD}},
Unique-ID = {{ISI:000343013000007}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000350732700027,
Author = {Qin, Xiaoke and Mishra, Prabhat},
Book-Group-Author = {{IEEE}},
Title = {{Scalable Test Generation by Interleaving Concrete and Symbolic Execution}},
Booktitle = {{2014 27TH INTERNATIONAL CONFERENCE ON VLSI DESIGN AND 2014 13TH
   INTERNATIONAL CONFERENCE ON EMBEDDED SYSTEMS (VLSID 2014)}},
Series = {{International Conference on VLSI Design}},
Year = {{2014}},
Pages = {{104-109}},
Note = {{27th International Conference on VLSI Design / 13th International
   Conference on Embedded Systems (VLSID), Mumbai, INDIA, JAN 05-09, 2014}},
Organization = {{Assoc Comp Machinery; IEEE Circuits \& Syst Soc; IEEE Comp Soc; IEEE
   Council Elect Design Automat; VLSI Soc India; IEEE}},
Abstract = {{Functional validation is widely acknowledged as a major challenge for
   System-on-Chip (SoC) designs. Directed tests are superior compared to
   random tests since a significantly less number of directed tests can
   achieve the same coverage goal. Existing test generation techniques have
   inherent limitations due to use of formal methods. First, these
   approaches expect formal specification and do not directly support
   Hardware Description Language (HDL) models. Most importantly, the
   complexity of real world designs usually exceeds the capacity of model
   checking tools. In this paper, we propose a scalable technique to enable
   directed test generation for HDL models by combining static analysis and
   simulation based validation. Unlike existing approaches that support a
   limited set of HDL features, our approach covers a wide variety of
   features including dynamic array references. We have compared our
   approach with existing hybrid as well as random test generation
   techniques using various fault models. Our experimental results
   demonstrate that our proposed technique is scalable, and enables
   directed test generation for large designs.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Qin, XK (Corresponding Author), Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Qin, Xiaoke; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
DOI = {{10.1109/VLSID.2014.25}},
ISSN = {{1063-9667}},
ISBN = {{978-1-4799-2512-4}},
Keywords-Plus = {{MODEL CHECKING}},
Research-Areas = {{Automation \& Control Systems; Engineering}},
Web-of-Science-Categories  = {{Automation \& Control Systems; Engineering, Electrical \& Electronic}},
Author-Email = {{xqin@cise.ufl.edu
   prabhat@cise.ufl.edu}},
Number-of-Cited-References = {{14}},
Times-Cited = {{10}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BC2CE}},
Unique-ID = {{ISI:000350732700027}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000380450500008,
Author = {Tan, Li and Zeng, Bolong},
Editor = {{Joshi, J and Bertino, E and Thuraisingham, B and Liu, L}},
Title = {{Specification-Based Testing with Buchi Automata: Transition Coverage
   Criteria and Property Refinement}},
Booktitle = {{2014 IEEE 15TH INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND
   INTEGRATION (IRI)}},
Year = {{2014}},
Pages = {{52-61}},
Note = {{15th IEEE International Conference on Information Reuse and Integration
   (IEEE IRI) / IRI-HI / FMI / DIM / EM-RITE / WICSOC / SocialSec / IICPC /
   NatSec, San Francisco, CA, AUG 13-15, 2014}},
Organization = {{IEEE Comp Soc; IEEE Syst, Man Cybernet Soc; Soc Informat Reuse Integrat;
   Virginia Mil Inst; Univ Pittsburgh, Sch Informat Sci}},
Abstract = {{Buchi automaton is instrumental in linear-temporal logic model checking.
   It has been used in formalizing linear temporal requirements as well as
   in designing model checking algorithms. In this work we extend Buchi
   automaton to the domain of specification-based testing. We developed
   test criteria and techniques essential for testing a system with formal
   requirements in Buchi automata. At the core of our approach are two
   Buchi-automaton-based test criteria that select test cases based on
   their relevancy to a requirement in Buchi automaton. The relevancy is
   based on the notion of transition coverage on Buchi automaton. We define
   ``weak{''} and ``strong{''} variants of transition coverage criteria
   that reflect the non-deterministic nature of a Buchi automaton. Our
   experiment demonstrates the effectiveness of the proposed transition
   coverage criteria by measuring cross-coverage of these transition
   coverage criteria versus other existing test criteria. To improve test
   efficiency, we provide model-checking-assisted algorithms that fully
   automate test vector generations for the transition coverage criteria.
   In addition, we propose property refinement using the feedback from the
   test generation algorithm. The benefits of our approach are two-fold:
   (1) it enables the effective and efficient testing with formal
   requirements in Buchi automata; and, (2) our approach is capable of not
   only finding bugs in a system, but also identifying deficiency in its
   requirements via property refinement.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Tan, L (Corresponding Author), Washington State Univ, Sch Elect Engn \& Comp Sci, Richland, WA 99354 USA.
   Tan, Li; Zeng, Bolong, Washington State Univ, Sch Elect Engn \& Comp Sci, Richland, WA 99354 USA.}},
ISBN = {{978-1-4799-5879-5; 978-1-4799-5880-1}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems}},
Author-Email = {{litan@wsu.edu
   bzeng@wsu.edu}},
Number-of-Cited-References = {{27}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BF2AL}},
Unique-ID = {{ISI:000380450500008}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000452049800096,
Author = {Devroey, Xavier and Perrouin, Gilles and Cordy, Maxime and Papadakis,
   Mike and Legay, Axel and Schobbens, Pierre-Yves},
Book-Author = {{Cheung, SC
   Orso, A
   Storey, MA}},
Title = {{A Variability Perspective of Mutation Analysis}},
Booktitle = {{22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE
   ENGINEERING (FSE 2014)}},
Year = {{2014}},
Pages = {{841-844}},
Note = {{22nd ACM SIGSOFT International Symposium on the Foundations of Software
   Engineering (FSE), Hong Kong, HONG KONG, NOV 16-21, 2014}},
Organization = {{Assoc Comp Machinery Special Interest Grp Software Engn; CVIC SE; NSF;
   Microsoft Res; Huawei; Neusoft; Siemens; Yonyou; Hong Kong Univ Sci \&
   Technol; Google; Radica; Samsung Res Amer; IBM Res; TCL; CCC}},
Abstract = {{Mutation testing is an effective technique for either improving or
   generating fault-finding test suites. It creates defective or incorrect
   program artifacts of the program under test and evaluates the ability of
   test suites to reveal them. Despite being effective, mutation is costly
   since it requires assessing the test cases with a large number of
   defective artifacts. Even worse, some of these artifacts are
   behaviourally ``equivalent{''} to the original one and hence, they
   unnecessarily increase the testing effort. We adopt a variability
   perspective on mutation analysis. We model a defective artifact as a
   transition system with a specific feature selected and consider it as a
   member of a mutant family. The mutant family is encoded as a Featured
   Transition System, a compact formalism initially dedicated to
   model-checking of software product lines. We show how to evaluate a test
   suite against the set of all candidate defects by using mutant families.
   We can evaluate all the considered defects at the same time and isolate
   some equivalent mutants. We can also assist the test generation process
   and efficiently consider higher-order mutants.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Devroey, X (Corresponding Author), Univ Namur, PReCISE Res Ctr, Namur, Belgium.
   Devroey, Xavier; Perrouin, Gilles; Cordy, Maxime; Schobbens, Pierre-Yves, Univ Namur, PReCISE Res Ctr, Namur, Belgium.
   Papadakis, Mike, Univ Luxembourg, SERVAL Team, SnT, Luxembourg, Luxembourg.
   Legay, Axel, INRIA Rennes, Rennes, France.}},
DOI = {{10.1145/2635868.2666610}},
ISBN = {{978-1-4503-3056-5}},
Keywords = {{Mutation Testing; Featured Transition Systems}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{xde@info.fundp.ac.be
   gpe@info.fundp.ac.be
   mcr@info.fundp.ac.be
   mike.papadakis@uni.lu
   axel.legay@inria.fr
   pys@info.fundp.ac.be}},
ResearcherID-Numbers = {{Devroey, Xavier/I-3918-2019
   Perrouin, Gilles/I-1621-2019
   Schobbens, Pierre Yves/I-3402-2019
   Cordy, Maxime/O-3328-2019}},
ORCID-Numbers = {{Devroey, Xavier/0000-0002-0831-7606
   Perrouin, Gilles/0000-0002-8431-0377
   Schobbens, Pierre Yves/0000-0001-8677-4485
   Cordy, Maxime/0000-0001-8312-1358}},
Number-of-Cited-References = {{30}},
Times-Cited = {{10}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BL5LE}},
Unique-ID = {{ISI:000452049800096}},
OA = {{Green Published}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000332185600028,
Author = {Enoiu, Eduard Paul and Sundmark, Daniel and Pettersson, Paul},
Book-Group-Author = {{IEEE Comp Soc}},
Title = {{Model-Based Test Suite Generation for Function Block Diagrams using the
   UPPAAL Model Checker}},
Booktitle = {{IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION
   AND VALIDATION WORKSHOPS (ICSTW 2013)}},
Series = {{IEEE International Conference on Software Testing Verification and
   Validation Workshops}},
Year = {{2013}},
Pages = {{158-167}},
Note = {{6th IEEE International Conference on Software Testing, Verification and
   Validation (ICST), Luxembourg, LUXEMBOURG, MAR 18-22, 2013}},
Organization = {{IEEE; P\&T Luxembourg; IEE; SES; Fonds Natl Rech Luxembourg;
   Luxinnovation; Secur \& Trust; Univ Luxembourg, Comp Sci \& Commun Res
   Unit; Lab Adv Software Syst; IEEE Comp Soc}},
Abstract = {{A method for model-based test generation of safety-critical embedded
   applications using Programmable Logic Controllers and implemented in a
   programming language such as Function Block Diagram (FBD) is described.
   The FBD component model is based on the IEC 1131 standard and it is used
   primarily for embedded systems, in which timeliness is an important
   property to be tested. Our method involves the transformation of FBD
   programs with timed annotations into timed automata models which are
   used to automatically generate test suites. Specifically we demonstrate
   how to use model transformation for formalization and model-checking of
   FBD programs using the UPPAAL tool. Many benefits emerge from this
   method, including the ability to automatically generate test suites from
   a formal model in order to ensure compliance to strict quality
   requirements including unit testing and specific coverage measurements.
   The approach is experimentally assessed on a train control system in
   terms of consumed resources.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Enoiu, EP (Corresponding Author), Malardalen Univ, Malardalen Real Time Res Ctr MRTC, Vasteras, Sweden.
   Enoiu, Eduard Paul; Sundmark, Daniel; Pettersson, Paul, Malardalen Univ, Malardalen Real Time Res Ctr MRTC, Vasteras, Sweden.}},
DOI = {{10.1109/ICSTW.2013.27}},
ISSN = {{2159-4848}},
ISBN = {{978-0-7695-4993-4; 978-1-4799-1324-4}},
Keywords = {{function block diagram; plc; model-based testing; timed automata;
   test-suite generation; structural coverage}},
Keywords-Plus = {{TEST COVERAGE; VALIDATION}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Engineering, Electrical \&
   Electronic}},
Author-Email = {{eduard.paul.enoiu@mdh.se
   daniel.sundmark@mdh.se
   paul.pettersson@mdh.se}},
ORCID-Numbers = {{Pettersson, Paul/0000-0003-4040-3480}},
Number-of-Cited-References = {{23}},
Times-Cited = {{23}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Doc-Delivery-Number = {{BA0SM}},
Unique-ID = {{ISI:000332185600028}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000332046000017,
Author = {Scilingo, Gaston and Marta Novaira, Maria and Degiovanni, Renzo and
   Aguirre, Nazareno},
Editor = {{Aguilar, J and Cerqueira, E}},
Title = {{Analyzing Formal Requirements Specifications using an Off-The-Shelf
   Model Checker}},
Booktitle = {{PROCEEDINGS OF THE 2013 XXXIX LATIN AMERICAN COMPUTING CONFERENCE (CLEI)}},
Series = {{Proceedings of the Latin American Computing Conference}},
Year = {{2013}},
Note = {{39th Latin American Computing Conference (CLEI), Naiguata, VENEZUELA,
   OCT 07-11, 2013}},
Organization = {{Univ Simon Bolivar; Univ Cent Venezuela; UCAB; UBV}},
Abstract = {{We study the use of an off-the-shelf formal verification tool, namely
   the explicit-state model checker SPIN, for various analyses related to
   SCR (Software Cost Reduction) formal requirements specifications. Unlike
   other studies, where model checking is used for a specific purpose in
   the context of SCR analysis (e.g., test generation or invariant
   verification), we use the model checker as the only analysis tool, for
   consistency checking, completeness analysis, property verification, etc.
   Moreover, to assess our characterization of the various analyses in
   terms of model checking, we develop a case study (a pacemaker
   specification), more complex than those typically found in the SCR
   literature.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Scilingo, G (Corresponding Author), Univ Nacl Rio Cuarto, FCEFQyN, Dept Comp, Rio Cuarto, Argentina.
   Scilingo, Gaston; Marta Novaira, Maria; Degiovanni, Renzo; Aguirre, Nazareno, Univ Nacl Rio Cuarto, FCEFQyN, Dept Comp, Rio Cuarto, Argentina.}},
ISSN = {{2381-1609}},
ISBN = {{978-1-4799-1340-4; 978-1-4799-2957-3}},
Keywords = {{Formal Methods; Requirements Specification; SCR Method; Model Checking}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Interdisciplinary Applications}},
Author-Email = {{gaston@dc.exa.unrc.edu.ar
   mnovaira@dc.exa.unrc.edu.ar
   rdegiovanni@dc.exa.unrc.edu.ar
   naguirre@dc.exa.unrc.edu.ar}},
Number-of-Cited-References = {{17}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BA0PB}},
Unique-ID = {{ISI:000332046000017}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000330230800043,
Author = {Gent, Kelson and Hsiao, Michael S.},
Book-Group-Author = {{IEEE}},
Title = {{Functional Test Generation at the RTL Using Swarm Intelligence and
   Bounded Model Checking}},
Booktitle = {{2013 22ND ASIAN TEST SYMPOSIUM (ATS)}},
Series = {{Asian Test Symposium Proceedings}},
Year = {{2013}},
Pages = {{233-238}},
Note = {{22nd Asian Test Symposium (ATS), Yilan, TAIWAN, NOV 18-21, 2013}},
Organization = {{IEEE Comp Soc; Ind Technol Res Inst; Mentor Graph; Cloud Testing Serv;
   Cadence; Synopsys; IEEE; Test Technol Tech Council; Natl Sci Council;
   Bur Foreign Trade}},
Abstract = {{Although stochastic search techniques have shown promise in test
   generation and design validation, they often fail when there is a
   specific, random-resistant sequence of vectors required to exercise a
   target. In order to combat this, deterministic techniques are added,
   resulting in a hybrid solution to maintain high speed of execution while
   improving metric performance. This paper presents a formal hybridization
   that combines a Register Transfer Level (RTL) stochastic
   swarm-intelligence based test vector generation with the Verilator
   Verilog-to-C++ source-to-source compiler. Verilator generates a fast
   cycle accurate C++ simulation unit for Verilog descriptions and provides
   instrumentation for branch and toggle coverage metrics. This RTL model
   can also be used to generate a bounded model checking (BMC) instance.
   During the stochastic search, the bounded model checker is launched to
   expand the unexplored search frontier and aid in the navigation of
   narrow paths. Additionally, an inductive reachability test is applied in
   order to eliminate unreachable branches from our search space. These
   additions have significantly improved branch coverage, reaching 100\% in
   several ITC99 benchmarks. Additionally, compared to previous functional
   test generation methods, we achieve substantial speedup achieved with
   purely stochastic methods.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Gent, K (Corresponding Author), Virginia Tech, Bradley Dept Elect \& Comp Engn, Blacksburg, VA 24061 USA.
   Gent, Kelson; Hsiao, Michael S., Virginia Tech, Bradley Dept Elect \& Comp Engn, Blacksburg, VA 24061 USA.}},
DOI = {{10.1109/ATS.2013.51}},
ISSN = {{1081-7735}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science, Theory \&
   Methods; Engineering, Electrical \& Electronic}},
Author-Email = {{kelsong@vt.edu
   mhsiao@vt.edu}},
Number-of-Cited-References = {{17}},
Times-Cited = {{10}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BJT62}},
Unique-ID = {{ISI:000330230800043}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000326724500007,
Author = {Yang, Jing and Ghazel, Mohamed and El-Koursi, El-Miloudi},
Editor = {{Abed, M and Benaissa, M}},
Title = {{From Formal Specifications to Efficient Test Scenarios Generation}},
Booktitle = {{2013 INTERNATIONAL CONFERENCE ON ADVANCED LOGISTICS AND TRANSPORT
   (ICALT)}},
Year = {{2013}},
Pages = {{35-40}},
Note = {{International Conference on Advanced Logistics and Transport (ICALT),
   Sousse, TUNISIA, MAY 29-31, 2013}},
Organization = {{Tunisian Minister Transport; Lab Automatique Mecanique \& Informatique
   Ind \& Humaines; LMATT; LOGIQ; OASIS; Res Grp Intelligent Machines Lab;
   IEEE Intelligent Transportat Syst Soc; IEEE Ind Applicat Soc, Tunisia
   Chapter; IEEE Syst, Man, \& Cybernet Soc, Tunisia Chapter; IEEE Sfax
   Subsect; L Electrode; Tunisair; Univ Sfax; Univ Valenciennes; Univ Le
   Havre; Sci Assoc Support Res \& Technol Innovat; Assoc Sustainable
   Innovat Tunisia}},
Abstract = {{Various formal testing methods have been developed in the past decades.
   Most of them are based on graphical notations such as finite state
   machines, labelled transitions systems, etc., which remain quite
   intuitive for users to perform black box testing. In addition, testing
   methods based on temporal logics have been also investigated, such as
   the testing methods inspired by model checking. However, testing with
   model checkers often needs a model of System Under Test (SUT) to be
   known. This paper discusses a method for generating test cases from
   specifications expressed in CTL{*} temporal logic, under a black-box
   framework. The test generation process from CTL{*} is inspired by
   Banerjee et al.'s work {[}1] which has developed a technique to generate
   non-vacuous test scenarios from LTL properties. The essential step of
   our test generation method is to rewrite a pertinent CTL{*} property in
   terms of present state Boolean propositions and X(Next)-guarded temporal
   properties. The generated test benches are implemented within the
   ControlBuild tool.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Yang, J (Corresponding Author), Univ Lille Nord France, IFSTTAR, ESTAS, F-59650 Villeneuve Dascq, France.
   Yang, Jing; Ghazel, Mohamed; El-Koursi, El-Miloudi, Univ Lille Nord France, IFSTTAR, ESTAS, F-59650 Villeneuve Dascq, France.}},
ISBN = {{978-1-4799-0313-9; 978-1-4799-0314-6}},
Keywords = {{formal specification; test scenario generation; CTL{*}; black box
   testing}},
Research-Areas = {{Engineering; Operations Research \& Management Science; Transportation}},
Web-of-Science-Categories  = {{Engineering, Electrical \& Electronic; Operations Research \& Management
   Science; Transportation Science \& Technology}},
Author-Email = {{jing.yang@ifsttar.fr
   mohamed.ghazel@ifsttar.fr
   el-miloudi.el-koursi@ifsttar.fr}},
ResearcherID-Numbers = {{Ghazel, Mohamed/Z-2994-2019}},
ORCID-Numbers = {{Ghazel, Mohamed/0000-0002-1160-7997}},
Number-of-Cited-References = {{12}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BHV12}},
Unique-ID = {{ISI:000326724500007}},
DA = {{2020-08-28}},
}

@article{ ISI_000307079000006,
Author = {Qin, Xiaoke and Mishra, Prabhat},
Title = {{Directed Test Generation for Validation of Multicore Architectures}},
Journal = {{ACM TRANSACTIONS ON DESIGN AUTOMATION OF ELECTRONIC SYSTEMS}},
Year = {{2012}},
Volume = {{17}},
Number = {{3}},
Month = {{JUN}},
Abstract = {{Functional validation is widely acknowledged as a major challenge for
   multicore architectures. Directed tests are promising since a
   significantly smaller number of directed tests can achieve the same
   coverage goal compared to constrained-random tests. SAT-based bounded
   model checking is effective for automated generation of directed tests
   (counterexamples). While existing approaches focus on clause forwarding
   between different bounds to reduce the test generation time, this
   article proposes a novel technique that exploits temporal, structural,
   and spatial symmetry in multicore designs at the same time. Our proposed
   technique enables the reuse of the knowledge learned from one core to
   the remaining cores in multicore architectures (structural symmetry),
   from one bound to the next for a give property (temporal symmetry), as
   well as from one property to other properties (spatial symmetry). The
   experimental results demonstrate that our approach can significantly
   (3-10 times) reduce overall test generation time compared to existing
   approaches.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Qin, XK (Corresponding Author), Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Qin, Xiaoke; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
DOI = {{10.1145/2209291.2209297}},
Article-Number = {{24}},
ISSN = {{1084-4309}},
EISSN = {{1557-7309}},
Keywords = {{Algorithms; Verification; Multicore architecture; bounded model
   checking; SAT solving; test generation}},
Keywords-Plus = {{BOUNDED MODEL CHECKING; SYMMETRY}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science, Software
   Engineering}},
Author-Email = {{xqin@cise.ufl.edu}},
Funding-Acknowledgement = {{NSFNational Science Foundation (NSF) {[}0746261]}},
Funding-Text = {{This work was partially supported by NSF CAREER award 0746261.}},
Number-of-Cited-References = {{27}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Journal-ISO = {{ACM Transact. Des. Automat. Electron. Syst.}},
Doc-Delivery-Number = {{982XP}},
Unique-ID = {{ISI:000307079000006}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000312540300007,
Author = {Liu, Songqing and Li, Liping and Guo, Hai-Feng},
Editor = {{Zhang, C and Joshi, J and Bertino, E and Thuraisingham, B}},
Title = {{Generating Test Cases via Model-based Simulation}},
Booktitle = {{2012 IEEE 13TH INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND
   INTEGRATION (IRI)}},
Year = {{2012}},
Pages = {{17-24}},
Note = {{13th IEEE International Conference on Information Reuse and Integration
   (IEEE IRI) / DIM / WICSOC / IEEE EM- RITE / IRI-HI, Las Vegas, NV, AUG
   08-10, 2012}},
Organization = {{IEEE Syst Man \& Cybernet Soc (IEEE SMC); Soc Informat Reuse \& Integrat
   (SIRI); IEEE}},
Abstract = {{We present a new model-based test case generation approach, which takes
   inputs an executable system model and preliminary test case coverage,
   performs an automated model simulation, and eventually generates refined
   test cases for software testing. We adopt Live Sequence Charts to
   specify an executable system model, and present a logic-based model
   simulator for consistency testing. As a result, our model simulator
   produces a state transition diagram(STD) justifying the model's runtime
   behaviors, where each state is labeled with a set of runtime properties
   that are true in the state. The STD can then be automatically
   transformed into a refined set of test cases, in a form of a
   context-free grammar. Finally, we show that LSCs can also be used to
   specify and test certain temporal system properties during the model
   simulation. Their satisfaction, reflected in the STD, can either be
   served as a directive for selective test generation, or a basis for
   further temporal property model checking.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Liu, SQ (Corresponding Author), Univ Nebraska, Dept Comp Sci, Omaha, NE 68182 USA.
   Liu, Songqing; Guo, Hai-Feng, Univ Nebraska, Dept Comp Sci, Omaha, NE 68182 USA.
   Li, Liping, Second Polytechn Univ, Comp \& Informat Inst, Shanghai 201209, Peoples R China.}},
ISBN = {{978-1-4673-2284-3}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods; Engineering, Electrical \&
   Electronic}},
Author-Email = {{songqinliu@unomaha.edu
   llping2000@yahoo.com.cn
   haifengguo@unomaha.edu}},
Number-of-Cited-References = {{21}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BDC08}},
Unique-ID = {{ISI:000312540300007}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000312540300086,
Author = {Zeng, Bolong and Tan, Li},
Editor = {{Zhang, C and Joshi, J and Bertino, E and Thuraisingham, B}},
Title = {{Test Criteria for Model-Checking-Assisted Test Case Generation: A
   Computational Study}},
Booktitle = {{2012 IEEE 13TH INTERNATIONAL CONFERENCE ON INFORMATION REUSE AND
   INTEGRATION (IRI)}},
Year = {{2012}},
Pages = {{600-607}},
Note = {{13th IEEE International Conference on Information Reuse and Integration
   (IEEE IRI) / DIM / WICSOC / IEEE EM- RITE / IRI-HI, Las Vegas, NV, AUG
   08-10, 2012}},
Organization = {{IEEE Syst Man \& Cybernet Soc (IEEE SMC); Soc Informat Reuse \& Integrat
   (SIRI); IEEE}},
Abstract = {{Test case generation is often cited as one of the most challenging tasks
   in testing dependable systems {[}9]. Besides benefits as a verification
   technique by its own right, model checking is emerging as an efficient
   method for automating test case generation. Existing testing criteria
   and a range of new criteria, namely the vacuity-based ones, inspired by
   formal requirements have been used in model-checking-assisted test
   generation. This paper reviews some of these existing and new test
   criteria. We developed a unified framework for evaluating the
   effectiveness of these test criteria and the efficiency of
   model-checking-assisted test generation for these criteria. The benefits
   of this work are three-fold: first, the computational study carried out
   in this work assesses the practical effectiveness and efficiency of
   model-checking-assisted test case generation, which are important
   metrics to consider for selecting the right test criteria and test
   generation approach. Second, we propose a unified test generation
   framework based on generalized Buchi automata. The framework uses the
   same off-the-shelf model checker, in this case, SPIN model checker
   {[}10], to generate test cases for different criteria and compare them
   on a consistent basis. Last but not least, we describe in great details
   the methodology and automated test generation environment that we
   developed on the basis of our unified framework. Such details are of
   interest to researchers who needs to carry out their own experimental
   study on test criteria, and to practitioners who want to integrate
   model-checking-assisted test generation into their testing process.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Tan, L (Corresponding Author), Washington State Univ, Sch Elect Engn \& Comp Sci, Richland, WA 99354 USA.
   Zeng, Bolong; Tan, Li, Washington State Univ, Sch Elect Engn \& Comp Sci, Richland, WA 99354 USA.}},
ISBN = {{978-1-4673-2284-3}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods; Engineering, Electrical \&
   Electronic}},
Author-Email = {{bzeng@wsu.edu
   litan@wsu.edu}},
Number-of-Cited-References = {{26}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Doc-Delivery-Number = {{BDC08}},
Unique-ID = {{ISI:000312540300086}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000332765100002,
Author = {Sun, Haiying and Liu, Jing and Du, Dehui},
Editor = {{Leung, KRPH and Muenchaisri, P}},
Title = {{Integration of Safety Verification with Conformance Testing in Real-time
   Reactive System}},
Booktitle = {{2012 19TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE (APSEC), VOL 1}},
Series = {{Asia-Pacific Software Engineering Conference}},
Year = {{2012}},
Pages = {{10-19}},
Note = {{19th Asia-Pacific Software Engineering Conference (APSEC), Hong Kong,
   PEOPLES R CHINA, DEC 04-07, 2012}},
Organization = {{IEEE Hong Kong Sect Comp Soc Chapter; ACM Hong Kong Chapter; IEEE Comp
   Soc}},
Abstract = {{In the paper, we propose a method that can be applied to verify
   implementation in real-time reactive system. Different from other
   software model checking approaches, our method is based on testing. This
   approach allows the verification of safety property to be conducted
   directly on real code instead of models extracted from final
   implementation. Verifying that kind of models is a hard work and can
   only be applied to parts of the implementation. The method is done by
   establishing a connection between safety verification and conformance
   testing in real-time system. We first prove a theorem that in real-time
   system, under the input enabled precondition, if an implementation
   conforms to its specification and the specification satisfies the safety
   properties, the implementation satisfies it either. Then, based on
   contropositivity of the former conclusion, we present a test case
   generation framework which forms basis for generating test cases that
   can be used to detect violations of safety properties in the
   implementation. In addition, this test generation framework can also
   detect more nonconformance defects when compared with other real time
   test generation methods. The method is illustrated with a train gate
   control system.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Sun, HY (Corresponding Author), E China Normal Univ, Inst Software Engn, Shanghai 200062, Peoples R China.
   Sun, Haiying; Du, Dehui, E China Normal Univ, Inst Software Engn, Shanghai 200062, Peoples R China.
   Liu, Jing, E China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.}},
DOI = {{10.1109/APSEC.2012.92}},
ISSN = {{1530-1362}},
ISBN = {{978-0-7695-4922-4}},
Keywords = {{real-time system; safety verification; conformance testing; test
   generation}},
Keywords-Plus = {{FORMAL VERIFICATION; TEST-GENERATION; MODEL CHECKING}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{hysun@sei.ecnu.edu.cn
   jliu@sei.ecnu.edu.cn
   dhdu@sei.ecnu.edu.cn}},
Funding-Acknowledgement = {{National Basic Research and Development 973 Program of ChinaNational
   Basic Research Program of China {[}2009CB320702]; National Natural
   Science Foundation of ChinaNational Natural Science Foundation of China
   (NSFC) {[}61170084, 61021004]; National 863 High-tech Project of
   ChinaNational High Technology Research and Development Program of China
   {[}2011AA010101]; Youth Foundation of National Natural Science
   Foundation {[}60903021]}},
Funding-Text = {{The authors would like to thank anonymous reviewers for their comments
   and suggestions. This work is supported by the National Basic Research
   and Development 973 Program of China (No.2009CB320702), National Natural
   Science Foundation of China (No.61170084), National Natural Science
   Foundation of China Creative Team 61021004, National 863 High-tech
   Project of China(Grant No.2011AA010101) and Youth Foundation of National
   Natural Science Foundation(No.60903021).}},
Number-of-Cited-References = {{23}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Doc-Delivery-Number = {{BA1OO}},
Unique-ID = {{ISI:000332765100002}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000316917202001,
Author = {Dutertre, Bruno and Easwaran, Arvind and Hall, Brendan and Steiner,
   Wilfried},
Book-Group-Author = {{IEEE}},
Title = {{MODEL-BASED ANALYSIS OF TIMED-TRIGGERED ETHERNET}},
Booktitle = {{2012 IEEE/AIAA 31ST DIGITAL AVIONICS SYSTEMS CONFERENCE (DASC)}},
Series = {{IEEE-AIAA Digital Avionics Systems Conference}},
Year = {{2012}},
Note = {{IEEE/AIAA 31st Digital Avionics Systems Conference (DASC), Williamsburg,
   VA, OCT 14-18, 2012}},
Organization = {{IEEE; AIAA; Avionics; AESS; DATC; Boeing}},
Abstract = {{Timed-Triggered Ethernet (TTEthernet) is a communication infrastructure
   that enables the use of Ethernet networks in real-time, distributed
   applications. The core of TTEthernet is a set of fault-tolerant
   protocols for clock synchronization, startup, and clique detection and
   resolution. We present recent work on model-based analysis of the
   TTEthernet startup and synchronization protocols.
   We first use automated test-generation tools to drive high-coverage
   testing of prototype TTEthernet hardware, based on a state-machine model
   of the TTEthernet protocols. With almost no human guidance, this
   technique enables us to achieve MC/DC coverage of the startup protocol
   under valid fault scenarios.
   We then focus on the TTEthernet clock-synchronization protocol. We
   develop correctness proofs of key properties of this protocol using the
   PVS interactive theorem prover {[}1]. As a result of this formalization,
   we have identified a suboptimal design choice in the clock-compression
   function defined in the TTEthernet draft standard {[}2]. We propose an
   alternative definition and, using model-checking tools, we show that the
   new function achieves better clock precision than the original.
   These results demonstrate effective use of modeling and formal
   techniques in proof and test of a fault-tolerant network infrastructure
   relevant to avionics and other embedded systems.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Dutertre, B (Corresponding Author), SRI Int, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
   Dutertre, Bruno, SRI Int, Menlo Pk, CA 94025 USA.}},
DOI = {{10.1109/DASC.2012.6382445}},
ISSN = {{2155-7195}},
ISBN = {{978-1-4673-1700-9}},
Research-Areas = {{Engineering}},
Web-of-Science-Categories  = {{Engineering, Aerospace}},
ResearcherID-Numbers = {{Easwaran, Arvind/X-3093-2019
   Easwaran, Arvind/A-5316-2018}},
ORCID-Numbers = {{Easwaran, Arvind/0000-0002-9628-3847
   Easwaran, Arvind/0000-0002-9628-3847}},
Number-of-Cited-References = {{14}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BEJ49}},
Unique-ID = {{ISI:000316917202001}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000415126300062,
Author = {Peranandam, P. and Raviram, S. and Satpathy, M. and Yeolekar, A. and
   Gadkari, A. and Ramesh, S.},
Book-Group-Author = {{IEEE}},
Title = {{An Integrated Test Generation Tool for Enhanced Coverage of
   Simulink/Stateflow Models}},
Booktitle = {{DESIGN, AUTOMATION \& TEST IN EUROPE (DATE 2012)}},
Series = {{Design Automation and Test in Europe Conference and Exhibition}},
Year = {{2012}},
Pages = {{308-311}},
Note = {{Design, Automation and Test in Europe Conference and Exhibition (DATE),
   European Design \& Automat Assoc, Dresden, GERMANY, MAR 12-16, 2012}},
Organization = {{EDA Consortium; IEEE Council Elect Design Automat; ECSI; ACM Special
   Interest Grp Design Automat; RAS}},
Abstract = {{Simulink/Stateflow (SL/SF) is the primary modeling notation for the
   development of control systems in automotive and aerospace industries.
   In model based testing, test cases derived from a design model are used
   to show model-code conformance. Safety standards such as ISO 26262
   recommend model based testing to show the conformance of a software with
   the corresponding model. From our experiments with various test
   generation techniques, we have observed that their coverage capabilities
   are complementary in nature. With this observation in mind, we have
   developed a new tool called SmartTestGen which integrates different test
   generation techniques. In this paper, we discuss SmartTestGen and the
   different test generation techniques utilized-random testing, constraint
   solving, model checking and heuristics. We experimented with 20
   productionquality SL/SF models and compared the performance of our tool
   with that of two prominent commercial tools.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Peranandam, P (Corresponding Author), GM Tech Ctr India, Gen Motors Global R\&D, India Sci Lab, Bangalore 560066, Karnataka, India.
   Peranandam, P.; Satpathy, M.; Yeolekar, A.; Gadkari, A.; Ramesh, S., GM Tech Ctr India, Gen Motors Global R\&D, India Sci Lab, Bangalore 560066, Karnataka, India.
   Raviram, S., GM Tech Ctr India, Gen Motors Powertrain India, Bangalore 560066, Karnataka, India.}},
ISSN = {{1530-1591}},
ISBN = {{978-3-9810801-8-6}},
Research-Areas = {{Automation \& Control Systems; Computer Science; Engineering}},
Web-of-Science-Categories  = {{Automation \& Control Systems; Computer Science, Hardware \&
   Architecture; Engineering, Electrical \& Electronic}},
Author-Email = {{prakash.peranandam@gm.com
   sachin.raviram@gm.com
   manoranjan.satpathy@gm.com
   avyeolekar@gmail.com
   ambar.gadkari@gmail.com
   ramesh.s@gm.com}},
Number-of-Cited-References = {{5}},
Times-Cited = {{14}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BI8GB}},
Unique-ID = {{ISI:000415126300062}},
DA = {{2020-08-28}},
}

@article{ ISI_000297871500006,
Author = {Mammar, Amel and Mallouli, Wissam and Cavalli, Ana},
Title = {{A systematic approach to integrate common timed security rules within a
   TEFSM-based system specification}},
Journal = {{INFORMATION AND SOFTWARE TECHNOLOGY}},
Year = {{2012}},
Volume = {{54}},
Number = {{1}},
Pages = {{87-98}},
Month = {{JAN}},
Abstract = {{Context: Formal methods are very useful in the software industry and are
   becoming of paramount importance in practical engineering techniques.
   They involve the design and modeling of various system aspects expressed
   usually through different paradigms. These different formalisms make the
   verification of global developed systems more difficult.
   Objective: In this paper, we propose to combine two modeling formalisms,
   in order to express both functional and security timed requirements of a
   system to obtain all the requirements expressed in a unique formalism.
   Method: First, the system behavior is specified according to its
   functional requirements using Timed Extended Finite State Machine
   (TEFSM) formalism. Second, this model is augmented by applying a set of
   dedicated algorithms to integrate timed security requirements specified
   in Nomad language. This language is adapted to express security
   properties such as permissions, prohibitions and obligations with time
   considerations.
   Results: The proposed algorithms produce a global TEFSM specification of
   the system that includes both its functional and security timed
   requirements.
   Conclusion: It is concluded that it is possible to merge several
   requirement aspects described with different formalisms into a global
   specification that can be used for several purposes such as code
   generation, specification correctness proof, model checking or automatic
   test generation. In this paper, we applied our approach to a France
   Telecom Travel service to demonstrate its scalability and feasibility.
   (C) 2011 Elsevier B.V. All rights reserved.}},
Publisher = {{ELSEVIER}},
Address = {{RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Mammar, A (Corresponding Author), Inst Telecom SudParis, CNRS SAMOVAR, Paris, France.
   Mammar, Amel; Cavalli, Ana, Inst Telecom SudParis, CNRS SAMOVAR, Paris, France.
   Mallouli, Wissam, Montimage EURL, F-75013 Paris, France.}},
DOI = {{10.1016/j.infsof.2011.07.004}},
ISSN = {{0950-5849}},
EISSN = {{1873-6025}},
Keywords = {{Formal methods; Timed extended finite state machines; Nomad language;
   Test generation}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems; Computer Science, Software
   Engineering}},
Author-Email = {{amel.mammar@it-sudparis.eu
   wissam.mallou-li@montimage.com
   ana.cavalli@it-sudparis.eu}},
Funding-Acknowledgement = {{European CommunityEuropean Community (EC) {[}215995]}},
Funding-Text = {{The research leading to these results has received funding from the
   European Community's Seventh Framework Program (FP 7/2007-203) under the
   Grant agreement number 215995 (http://www.shields-project.eu/).}},
Number-of-Cited-References = {{23}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{3}},
Journal-ISO = {{Inf. Softw. Technol.}},
Doc-Delivery-Number = {{859JA}},
Unique-ID = {{ISI:000297871500006}},
DA = {{2020-08-28}},
}

@article{ ISI_000289900300008,
Author = {Chen, Mingsong and Mishra, Prabhat},
Title = {{Property Learning Techniques for Efficient Generation of Directed Tests}},
Journal = {{IEEE TRANSACTIONS ON COMPUTERS}},
Year = {{2011}},
Volume = {{60}},
Number = {{6}},
Pages = {{852-864}},
Month = {{JUN}},
Abstract = {{Property falsification in model checking is widely used for automated
   generation of directed tests. Due to state space explosion problem,
   traditional model checking techniques cannot handle large scale designs.
   SAT-based bounded model checking is promising to address the
   prohibitively large time and resource requirements during the property
   falsification. This article presents several efficient learning
   techniques that can improve the overall test generation time for a
   single property as well as a cluster of similar properties. The goal is
   to exploit both variable assignments and common conflict clauses of the
   prechecked partial or similar SAT instances for property falsification.
   Our method makes three novel contributions: 1) investigates the decision
   ordering-based learnings for a single SAT instance; 2) applies the
   decision ordering learnings between similar SAT instances; and 3)
   exploits the relation between the decision ordering-based learning and
   conflict clauses-based learning. Our experimental results using both
   software and hardware benchmarks demonstrate that our approach can
   drastically reduce the overall test generation time.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Chen, MS (Corresponding Author), E China Normal Univ, Inst Software Engn, Room 211 E,Math Bldg,Zhongshan N Campus, Shanghai 200062, Peoples R China.
   Chen, Mingsong, E China Normal Univ, Inst Software Engn, Shanghai 200062, Peoples R China.
   Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
DOI = {{10.1109/TC.2011.49}},
ISSN = {{0018-9340}},
EISSN = {{1557-9956}},
Keywords = {{Bounded model checking; directed test generation; conflict clause
   forwarding; decision ordering}},
Keywords-Plus = {{MODEL CHECKING}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Engineering, Electrical \&
   Electronic}},
Author-Email = {{mschen@sei.ecnu.edu.cn
   prabhat@cise.ufl.edu}},
Funding-Acknowledgement = {{US National Science Foundation (NSF)National Science Foundation (NSF)
   {[}0746261]; National Natural Science Foundation of ChinaNational
   Natural Science Foundation of China (NSFC) {[}61021004, 90818024];
   National Grand Fundamental Research 973 Program of ChinaNational Basic
   Research Program of China {[}2009CB320702]}},
Funding-Text = {{This work was partially supported by grants from US National Science
   Foundation (NSF) CAREER award 0746261, National Natural Science
   Foundation of China (No. 61021004 and No. 90818024), and National Grand
   Fundamental Research 973 Program of China (No. 2009CB320702). A
   preliminary version {[}26] of this paper has appeared in Design,
   Automation, and Test in Europe (DATE) 2010.}},
Number-of-Cited-References = {{39}},
Times-Cited = {{9}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{3}},
Journal-ISO = {{IEEE Trans. Comput.}},
Doc-Delivery-Number = {{755AZ}},
Unique-ID = {{ISI:000289900300008}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000303027200007,
Author = {Dinca, Ionut and Stefanescu, Alin and Ipate, Florentin and Lefticaru,
   Raluca and Tudose, Cristina},
Editor = {{Zain, JM and Mohd, WMB and ElQawasmeh, E}},
Title = {{Test Data Generation for Event-B Models Using Genetic Algorithms}},
Booktitle = {{SOFTWARE ENGINEERING AND COMPUTER SYSTEMS, PT 3}},
Series = {{Communications in Computer and Information Science}},
Year = {{2011}},
Volume = {{181}},
Pages = {{76-90}},
Note = {{2nd International Conference on Software Engineering and Computing
   Systems (ICSECS 2011), Univ Malaysia Pahang, Kuantan, MALAYSIA, JUN
   27-29, 2011}},
Organization = {{Springer}},
Abstract = {{Event-B is a formal modeling language having set theory as its
   mathematical foundation and abstract state machines as its behavioral
   specifications. The language has very good tool support based on theorem
   proving and model checking technologies, but very little support for
   test generation. Motivated by industrial interest in the latter domain,
   this paper presents an approach based on genetic algorithms that
   generates test data for Event-B test paths. For that, new fitness
   functions adapted to the set-theoretic nature of Event-B are devised.
   The approach was implemented and its efficiency was proven on a
   carefully designed benchmark using statistically sound evaluations.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Dinca, I (Corresponding Author), Univ Pitesti, Dept Comp Sci, Str Targu din Vale 1, Pitesti 110040, Romania.
   Dinca, Ionut; Stefanescu, Alin; Ipate, Florentin; Lefticaru, Raluca; Tudose, Cristina, Univ Pitesti, Dept Comp Sci, Pitesti 110040, Romania.}},
ISSN = {{1865-0929}},
ISBN = {{978-3-642-22202-3}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems; Computer Science, Software
   Engineering; Computer Science, Theory \& Methods}},
Author-Email = {{ionut.dinca@upit.ro
   alin.stefanescu@upit.ro
   florentin.ipate@upit.ro
   raluca.lefticaru@upit.ro
   cristina.tudose@upit.ro}},
ResearcherID-Numbers = {{Ipate, Florentin/D-4565-2011
   Lefticaru, Raluca/C-4071-2011
   Stefanescu, Alin/B-8580-2012}},
ORCID-Numbers = {{Ipate, Florentin/0000-0001-8777-3425
   Lefticaru, Raluca/0000-0001-5289-0162
   Stefanescu, Alin/0000-0002-8418-2643}},
Number-of-Cited-References = {{20}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{7}},
Doc-Delivery-Number = {{BZV27}},
Unique-ID = {{ISI:000303027200007}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000296687000005,
Author = {Holzer, Andreas and Tautschnig, Michael and Schallhart, Christian and
   Veith, Helmut},
Editor = {{Barner, S and Harris, I and Kroening, D and Raz, O}},
Title = {{An Introduction to Test Specification in FQL}},
Booktitle = {{HARDWARE AND SOFTWARE: VERIFICATION AND TESTING}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2011}},
Volume = {{6504}},
Pages = {{9+}},
Note = {{6th Haifa Verification Conference, Haifa, ISRAEL, OCT 04-07, 2010}},
Organization = {{IBM; Cadence Israel; CRI}},
Abstract = {{In a recent series of papers, we introduced a new framework for
   white-box testing which aims at a separation of concerns between test
   specifications and test generation engines. We believe that establishing
   a common language for test criteria will have similar benefits to
   testing as temporal logic had to model checking and SQL had to
   databases. The main challenge was to find a specification language which
   is expressive, simple, and precise. This paper gives an introduction to
   the test specification language FQL and its tool environment.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Holzer, A (Corresponding Author), Vienna Univ Technol, Vienna, Austria.
   Holzer, Andreas; Tautschnig, Michael; Veith, Helmut, Vienna Univ Technol, Vienna, Austria.
   Schallhart, Christian, Univ Oxford, Oxford, England.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-642-19582-2}},
Keywords-Plus = {{TEST COVERAGE; GENERATION}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science, Software
   Engineering; Computer Science, Theory \& Methods}},
Author-Email = {{holzer@forsyte.at
   tautschnig@forsyte.at
   veith@forsyte.at
   christian.schallhart@comlab.ox.ac.uk}},
Funding-Acknowledgement = {{BMWIFederal Ministry for Economic Affairs and Energy (BMWi)
   {[}20H0804B]; DFGGerman Research Foundation (DFG); FORTAS {[}VE 455/1-1]}},
Funding-Text = {{Supported by BMWI grant 20H0804B in the frame of LuFo IV-2 project
   INTECO and by DFG grant FORTAS Formal Timing Analysis Suite for Real
   Time Programs (VE 455/1-1).}},
Number-of-Cited-References = {{34}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{4}},
Doc-Delivery-Number = {{BXP89}},
Unique-ID = {{ISI:000296687000005}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000299054300043,
Author = {Qin, Xiaoke and Mishra, Prabhat},
Book-Group-Author = {{IEEE}},
Title = {{Efficient Directed Test Generation for Validation of Multicore
   Architectures}},
Booktitle = {{2011 12TH INTERNATIONAL SYMPOSIUM ON QUALITY ELECTRONIC DESIGN (ISQED)}},
Series = {{International Symposium on Quality Electronic Design}},
Year = {{2011}},
Pages = {{276-283}},
Note = {{12th International Symposium on Quality Electronic Design (ISQED), Santa
   Clara, CA, MAR 14-16, 2011}},
Organization = {{IEEE Electron Devices Soc (EDS); IEEE Reliabil Soc; Synopsys; Mentor
   Graph; Cadence Design Syst; M\&E Tech; Chip Design Magazine; EDACafe;
   Embedded Comp Design; Int Soc Qual Elect Design}},
Abstract = {{Functional verification of multicore architectures is widely
   acknowledged as a major challenge. Directed tests are promising since a
   significantly smaller number of directed tests can achieve the same
   coverage goal compared to constrained-random tests. SAT-based bounded
   model checking is effective for automated generation of directed tests
   (counterexamples). While existing approaches focus on clause forwarding
   between different bounds to reduce the test generation time, this paper
   proposes a novel technique that exploits the structural similarity
   within the same bound as well as between different bounds. Our proposed
   technique enables the reuse of the knowledge learned from one core to
   the remaining cores in multicore architectures. The experimental results
   demonstrate that our approach can significantly (2-10 times) reduce
   overall test generation time compared to existing approaches.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Qin, XK (Corresponding Author), Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Qin, Xiaoke; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
ISSN = {{1948-3287}},
ISBN = {{978-1-61284-914-0}},
Keywords-Plus = {{BOUNDED MODEL CHECKING; SYMMETRY}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Engineering, Electrical \&
   Electronic}},
Author-Email = {{xqin@cise.ufl.edu
   prabhat@cise.ufl.edu}},
Number-of-Cited-References = {{19}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BYJ83}},
Unique-ID = {{ISI:000299054300043}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000392155000003,
Author = {Aguirre, Nazareno M. and Bengolea, Valeria S. and Frias, Marcelo F. and
   Galeotti, Juan P.},
Editor = {{Gogolla, M and Wolff, B}},
Title = {{Incorporating Coverage Criteria in Bounded Exhaustive Black Box Test
   Generation of Structural Inputs}},
Booktitle = {{TESTS AND PROOFS, TAP 2011}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2011}},
Volume = {{6706}},
Pages = {{15-32}},
Note = {{5th International Conference on Tests and Proofs (TAP), ETH Zurich,
   Zurich, SWITZERLAND, JUN 30-JUL 01, 2011}},
Organization = {{Univ Malaga, E T S Ingn Informatica, Sch Informat}},
Abstract = {{The automated generation of test cases for heap allocated, complex,
   structures is particularly difficult. Various state of the art tools
   tackle this problem by bounded exhaustive exploration of potential test
   cases, using constraint solving mechanisms based on techniques such as
   search, model checking, symbolic execution and combinations of these.
   In this article we present a technique for improving the bounded
   exhaustive constraint based test case generation of structurally complex
   inputs, for ``filtering{''} approaches. The technique works by guiding
   the search considering a given black box test criterion. Such a test
   criterion is incorporated in the constraint based mechanism so that the
   exploration of potential test cases can be pruned without missing
   coverable classes of inputs, corresponding to the test criterion.
   We present the technique, together with some case studies illustrating
   its performance for some black box testing criteria. The experimental
   results associated with these case studies are shown in the context of
   Korat, a state of the art tool for constraint based test case
   generation, but the approach is applicable in other contexts using a
   filtering approach to test generation.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Aguirre, NM (Corresponding Author), Univ Nacl Rio Cuarto, FCEFQyN, Dept Comp, Cordoba, Argentina.
   Aguirre, Nazareno M.; Bengolea, Valeria S., Univ Nacl Rio Cuarto, FCEFQyN, Dept Comp, Cordoba, Argentina.
   Aguirre, Nazareno M.; Bengolea, Valeria S.; Frias, Marcelo F.; Galeotti, Juan P., Consejo Nacl Invest Cient \& Tecn, Cordoba, Argentina.
   Frias, Marcelo F., Inst Tecnol Buenos Aires, Dept Ingn Informat, Buenos Aires, DF, Argentina.
   Galeotti, Juan P., Univ Buenos Aires, FCEyN, Dept Comp, Buenos Aires, DF, Argentina.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-642-21768-5}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods}},
Author-Email = {{naguirre@dc.exa.unrc.edu.ar
   vbengolea@dc.exa.unrc.edu.ar
   mfrias@itba.edu.ar
   jgaleotti@dc.uba.ar}},
Funding-Acknowledgement = {{Argentinian Agency for Scientific and Technological Promotion (ANPCyT)
   {[}2484]; ANPCyTANPCyT {[}2772]}},
Funding-Text = {{This work was partially supported by the Argentinian Agency for
   Scientific and Technological Promotion (ANPCyT), through grant PICT 2006
   No. 2484. The first author's participation was also supported through
   ANPCyT grant PICT PAE 2007 No. 2772.}},
Number-of-Cited-References = {{16}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BG8AS}},
Unique-ID = {{ISI:000392155000003}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000392155000008,
Author = {Degiovanni, Renzo and Ponzio, Pablo and Aguirre, Nazareno and Frias,
   Marcelo},
Editor = {{Gogolla, M and Wolff, B}},
Title = {{Abstraction Based Automated Test Generation from Formal Tabular
   Requirements Specifications}},
Booktitle = {{TESTS AND PROOFS, TAP 2011}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2011}},
Volume = {{6706}},
Pages = {{84-101}},
Note = {{5th International Conference on Tests and Proofs (TAP), ETH Zurich,
   Zurich, SWITZERLAND, JUN 30-JUL 01, 2011}},
Organization = {{Univ Malaga, E T S Ingn Informatica, Sch Informat}},
Abstract = {{We propose an automated approach for generating tests from formal
   tabular requirements specifications, such as SCR specifications. The
   technique is based on counterexample guided abstraction refinement and
   the use of SMT solving. Moreover, in order to effectively perform
   automated test generation, we take advantage of particular
   characteristics of tabular requirements descriptions to aid the
   abstraction and abstraction refinement processes. The exploited
   characteristics are, most notably, the organisation of the requirements
   specification in modes, which is used to build an initial abstraction,
   and the execution model of tabular specifications, which is directed by
   changes observed in environment variables and is exploited for
   modularising the transition relation associated with tables, simplifying
   the calculation of abstractions. These characteristics enable us to
   effectively perform automated test generation achieving good levels of
   coverage for different criteria relevant to this context.
   We compare our approach with a standard abstraction analysis, showing
   the benefits that exploiting the mentioned characteristics of tables
   provide. We also compare the approach with model checking based
   generation, using several model checking tools. Our experiments show
   that the presented approach is able to generate test cases from models
   whose complexity, with respect to the sizes of variables and data
   domains, cannot be coped with well by the model checkers we used.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Degiovanni, R (Corresponding Author), Univ Nacl Rio Cuarto, FCEFQyN, Dept Comp, Cordoba, Argentina.
   Degiovanni, Renzo; Ponzio, Pablo; Aguirre, Nazareno, Univ Nacl Rio Cuarto, FCEFQyN, Dept Comp, Cordoba, Argentina.
   Degiovanni, Renzo; Ponzio, Pablo; Aguirre, Nazareno; Frias, Marcelo, Consejo Nacl Invest Cient \& Tecn, Cordoba, Argentina.
   Frias, Marcelo, Inst Tecnol Buenos Aires, Dept Ingn Informat, Buenos Aires, DF, Argentina.}},
ISSN = {{0302-9743}},
ISBN = {{978-3-642-21768-5}},
Keywords-Plus = {{MODEL CHECKING}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods}},
Author-Email = {{rdegiovanni@dc.exa.unrc.edu.ar
   pponzio@dc.exa.unrc.edu.ar
   naguirre@dc.exa.unrc.edu.ar
   mfrias@itba.edu.ar}},
Funding-Acknowledgement = {{Argentinian Agency for Scientific and Technological Promotion (ANPCyT)
   {[}2484]; ANPCyTANPCyT {[}2772]}},
Funding-Text = {{This work was partially supported by the Argentinian Agency for
   Scientific and Technological Promotion (ANPCyT), through grant PICT 2006
   No. 2484. The third author's participation was also supported through
   ANPCyT grant PICT PAE 2007 No. 2772.}},
Number-of-Cited-References = {{21}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Doc-Delivery-Number = {{BG8AS}},
Unique-ID = {{ISI:000392155000008}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000392155000013,
Author = {Tan, Li},
Editor = {{Gogolla, M and Wolff, B}},
Title = {{State Coverage Metrics for Specification-Based Testing with Buchi
   Automata}},
Booktitle = {{TESTS AND PROOFS, TAP 2011}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2011}},
Volume = {{6706}},
Pages = {{171-186}},
Note = {{5th International Conference on Tests and Proofs (TAP), ETH Zurich,
   Zurich, SWITZERLAND, JUN 30-JUL 01, 2011}},
Organization = {{Univ Malaga, E T S Ingn Informatica, Sch Informat}},
Abstract = {{Buchi automata have been widely used for specifying linear temporal
   properties of reactive systems and they are also instrumental for
   designing efficient model-checking algorithms. In this paper we extend
   specification-based testing to Buchi automata. A key question in
   specification-based testing is how to measure the quality (relevancy) of
   test cases with respect to system specification. We propose two state
   coverage metrics for measuring how well a test suite covers a
   Buchi-automaton-based requirement. We also develop test generation
   algorithms that use counter-example generation capability of an
   off-the-shelf model checker to generate test cases for the coverage
   criteria inferred by these metrics. In our experiment we demonstrate the
   feasibility and performance of the coverage criteria and test generation
   algorithms for these criteria. In {[}13] we proposed testing coverage
   metrics and criteria for properties in Linear Temporal Logic (LTL) and
   referred to the new approach as property-coverage testing. This research
   shares the same motivation as in {[}13] and it extends property-coverage
   testing to specifications in Buchi automata. Since automaton
   minimization techniques can be used to reduce the structural diversity
   of semantically equivalent Buchi automata, we argue that a coverage
   metric based on Buchi automata is less susceptible to syntactic changes
   of a property than a LTL-based coverage metric, and hence the proposed
   coverage metrics measure the relevancy of a test suite to the semantics
   of a linear temporal property. We also discuss an algorithm for refining
   a Buchi-automaton-based requirement based on its strong state coverage
   metric. Our experiment demonstrates the feasibility and performance of
   our coverage criteria and test generation algorithms.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Tan, L (Corresponding Author), Washington State Univ, Sch Elect Engn \& Comp Sci, Richland, WA 99354 USA.
   Tan, Li, Washington State Univ, Sch Elect Engn \& Comp Sci, Richland, WA 99354 USA.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-642-21768-5}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods}},
Author-Email = {{litan@wsu.edu}},
Number-of-Cited-References = {{15}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BG8AS}},
Unique-ID = {{ISI:000392155000013}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000398858400007,
Author = {Napoli, Margherita and Parente, Mimmo},
Editor = {{Wainer, G and Himmelspach, J and Traore, M and Heikel, R}},
Title = {{Graded CTL Model Checking for Test Generation}},
Booktitle = {{THEORY OF MODELING \& SIMULATION: DEVS INTEGRATIVE M\&S SYMPOSIUM 2011
   (TMS-DEVS 2011) - 2011 SPRING SIMULATION}},
Series = {{Simulation Series}},
Year = {{2011}},
Volume = {{43}},
Number = {{1}},
Pages = {{59-66}},
Note = {{Theory of Modeling and Simulation: DEVS Integrative M and S Symposium
   (TMS-DEVS 2011) / Spring Simulation Multiconference (SpringSim `11),
   Boston, MA, APR 03-07, 2011}},
Organization = {{Soc Model \& Simulat}},
Abstract = {{Recently there has been a great attention from the scientific community
   towards the use of the model-checking technique as a tool for test
   generation in the simulation field. This paper aims to provide a useful
   mean to get more insights along these lines. By applying recent results
   in the field of graded temporal logics, we present a new efficient
   model-checking algorithm for Hierarchical Finite State Machines (HSM), a
   well established symbolism long and widely used for representing
   hierarchical models of discrete systems. Performing model checking
   against specifications expressed using graded temporal logics has the
   peculiarity of returning more counterexamples within a unique run. We
   think that this can greatly improve the efficacy of automatically
   getting test cases. In particular we verify two different models of HSM
   against branching time temporal properties.}},
Publisher = {{SOC MODELING SIMULATION INT-SCS}},
Address = {{PO BOX 17900, SAN DIEGO, CA 92177 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Napoli, M (Corresponding Author), Univ Salerno, Dipto Informat \& Applicaz, Fisciano, SA, Italy.
   Napoli, Margherita; Parente, Mimmo, Univ Salerno, Dipto Informat \& Applicaz, Fisciano, SA, Italy.}},
ISSN = {{0735-9276}},
ISBN = {{978-1-61782-838-6}},
Keywords = {{Model Checking; Test Generation; Graded Temporal Logics; Hierarchical
   Finite State Machines}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Interdisciplinary Applications; Computer Science,
   Theory \& Methods}},
Author-Email = {{napoli@unisa.it
   parente@unisa.it}},
ORCID-Numbers = {{Parente, Mimmo/0000-0002-4935-6003
   NAPOLI, Margherita/0000-0001-6969-8273}},
Number-of-Cited-References = {{16}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BH2DW}},
Unique-ID = {{ISI:000398858400007}},
DA = {{2020-08-28}},
}

@article{ ISI_000280976300008,
Author = {Ipate, Florentin and Gheorghe, Marian and Lefticaru, Raluca},
Title = {{Test generation from P systems using model checking}},
Journal = {{JOURNAL OF LOGIC AND ALGEBRAIC PROGRAMMING}},
Year = {{2010}},
Volume = {{79}},
Number = {{6, SI}},
Pages = {{350-362}},
Month = {{AUG}},
Abstract = {{This paper presents some testing approaches based on model checking and
   using different testing criteria. First, test sets are built from
   different Kripke structure representations. Second, various rule
   coverage criteria for transitional, non-deterministic, cell-like P
   systems, are considered in order to generate adequate test sets. Rule
   based coverage criteria (simple rule coverage, context-dependent rule
   coverage and variants) are defined and, for each criterion, a set of LTL
   (Linear Temporal Logic) formulas is provided. A codification of a P
   system as a Kripke structure and the sets of LTL properties are used in
   test generation: for each criterion, test cases are obtained from the
   counterexamples of the associated LTL formulas, which are automatically
   generated from the Kripke structure codification of the P system. The
   method is illustrated with an implementation using a specific model
   checker, NuSMV. (C) 2010 Elsevier Inc. All rights reserved.}},
Publisher = {{ELSEVIER SCIENCE INC}},
Address = {{STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Ipate, F (Corresponding Author), Univ Pitesti, Dept Comp Sci, Str Targu Din Vale 1, Pitesti 110040, Romania.
   Ipate, Florentin; Gheorghe, Marian; Lefticaru, Raluca, Univ Pitesti, Dept Comp Sci, Pitesti 110040, Romania.
   Gheorghe, Marian, Univ Sheffield, Dept Comp Sci, Sheffield S1 4DP, S Yorkshire, England.}},
DOI = {{10.1016/j.jlap.2010.03.007}},
ISSN = {{1567-8326}},
EISSN = {{1873-5940}},
Keywords = {{P systems; Kripke structures; Model checking; Test generation}},
Author-Email = {{florentin.ipate@ifsoft.ro
   M.Gheorghe@dcs.shef.ac.uk
   raluca.lefticaru@gmail.com}},
ResearcherID-Numbers = {{Ipate, Florentin/D-4565-2011
   Lefticaru, Raluca/C-4071-2011}},
ORCID-Numbers = {{Ipate, Florentin/0000-0001-8777-3425
   Lefticaru, Raluca/0000-0001-5289-0162}},
Funding-Acknowledgement = {{CNCSIS - UEFISCSUConsiliul National al Cercetarii Stiintifice din
   Invatamantul Superior (CNCSIS) {[}PNII - IDEI 643/2008]}},
Funding-Text = {{This work was supported by CNCSIS - UEFISCSU, project number PNII - IDEI
   643/2008. The authors thank the anonymous reviewers for their valuable
   comments and suggestions.}},
Number-of-Cited-References = {{25}},
Times-Cited = {{9}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{4}},
Journal-ISO = {{J. Logic. Algebr. Program}},
Doc-Delivery-Number = {{639LM}},
Unique-ID = {{ISI:000280976300008}},
OA = {{Green Accepted, Bronze}},
DA = {{2020-08-28}},
}

@article{ ISI_000280347600003,
Author = {Artzi, Shay and Kiezun, Adam and Dolby, Julian and Tip, Frank and Dig,
   Danny and Paradkar, Amit and Ernst, Michael D.},
Title = {{Finding Bugs in Web Applications Using Dynamic Test Generation and
   Explicit-State Model Checking}},
Journal = {{IEEE TRANSACTIONS ON SOFTWARE ENGINEERING}},
Year = {{2010}},
Volume = {{36}},
Number = {{4}},
Pages = {{474-494}},
Month = {{JUL-AUG}},
Note = {{International Symposium on Software Testing and Analysis, Seattle, WA,
   JUL 20-24, 2008}},
Abstract = {{Web script crashes and malformed dynamically generated webpages are
   common errors, and they seriously impact the usability of Web
   applications. Current tools for webpage validation cannot handle the
   dynamically generated pages that are ubiquitous on today's Internet. We
   present a dynamic test generation technique for the domain of dynamic
   Web applications. The technique utilizes both combined concrete and
   symbolic execution and explicit-state model checking. The technique
   generates tests automatically, runs the tests capturing logical
   constraints on inputs, and minimizes the conditions on the inputs to
   failing tests so that the resulting bug reports are small and useful in
   finding and fixing the underlying faults. Our tool Apollo implements the
   technique for the PHP programming language. Apollo generates test inputs
   for a Web application, monitors the application for crashes, and
   validates that the output conforms to the HTML specification. This paper
   presents Apollo's algorithms and implementation, and an experimental
   evaluation that revealed 673 faults in six PHP Web applications.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Artzi, S (Corresponding Author), IBM Corp, Thomas J Watson Res Ctr, Yorktown Hts, NY 10598 USA.
   Artzi, Shay; Dolby, Julian; Tip, Frank; Paradkar, Amit, IBM Corp, Thomas J Watson Res Ctr, Yorktown Hts, NY 10598 USA.
   Kiezun, Adam, Harvard Univ, Sch Med, Brigham \& Womens Hosp, Cambridge, MA 02138 USA.
   Dig, Danny, Univ Illinois, Urbana, IL 61820 USA.
   Ernst, Michael D., Univ Washington, Seattle, WA 98195 USA.}},
DOI = {{10.1109/TSE.2010.31}},
ISSN = {{0098-5589}},
EISSN = {{1939-3520}},
Keywords = {{Software testing; Web applications; dynamic analysis; PHP; reliability;
   verification}},
Keywords-Plus = {{TOOL}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Engineering, Electrical \&
   Electronic}},
Author-Email = {{artzi@us.ibm.com
   akiezun@rics.bwh.harvard.edu
   dolby@us.ibm.com
   ftip@us.ibm.com
   dig@illinois.edu
   paradkar@us.ibm.com
   mernst@cs.washington.edu}},
Number-of-Cited-References = {{47}},
Times-Cited = {{51}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{7}},
Journal-ISO = {{IEEE Trans. Softw. Eng.}},
Doc-Delivery-Number = {{631LE}},
Unique-ID = {{ISI:000280347600003}},
DA = {{2020-08-28}},
}

@article{ ISI_000274992600006,
Author = {Chen, Mingsong and Mishra, Prabhat},
Title = {{Functional Test Generation Using Efficient Property Clustering and
   Learning Techniques}},
Journal = {{IEEE TRANSACTIONS ON COMPUTER-AIDED DESIGN OF INTEGRATED CIRCUITS AND
   SYSTEMS}},
Year = {{2010}},
Volume = {{29}},
Number = {{3}},
Pages = {{396-404}},
Month = {{MAR}},
Abstract = {{Functional verification is one of the major bottlenecks in
   system-on-chip design due to the combined effects of increasing
   complexity and lack of automated techniques for generating efficient
   tests. Several promising ideas using bounded model checking are proposed
   over the years to efficiently generate counterexamples (tests). The
   existing researchers have used incremental satisfiability to improve the
   counterexample generation, involving only one property by sharing
   knowledge across instance@inproceedings{ISI_000266158500030,
  Author = {Lauterburg, Steven and Sobeih, Ahmed and Marinov, Darko and Viswanathan, Mahesh},
  Book-Group-Author = {{ACM}},
  Title = {{Incremental State-Space Exploration for Programs with Dynamically Allocated Data}},
  Booktitle = {{ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING}},
  Year = {{2008}},
  Pages = {{291-300}},
  Note = {{30th International Conference on Software Engineering, Leipzig, GERMANY, MAY 10-18, 2008}},
  Organization = {{ACM SIGSOFT; IEEE CSE; Univ Paderborn; Univ Leipzig; SIEMENS; Zuhlke; Adesso; Deutsch Telekom Labs; sd\&m; Werum; Microsoft Res; IBM; i nemis; dSPACE}},
  Abstract = {{We present a novel technique that speeds up state-space exploration (SSE) for evolving programs with dynamically allocated data. SSE is the essence of explicit-state model checking and an increasingly popular method for automating test generation. Traditional, non-incremental SSE takes one version of a program and systematically explores the states reachable during the program's executions to find property violations. Incremental SSE considers several versions that arise during program evolution: reusing the results of SSE for one version can speed up SSE for the next version, since state spaces of consecutive program versions can have significant similarities. We have implemented our technique in two model checkers: Java PathFinder and the J-Sim state-space explorer. The experimental results on 24 program evolutions and exploration changes show that for non-initial runs our technique speeds up SSE in 22 cases from 6.43\% to 68.62\% (with median of 42.29\%) and slows down SSE in only two cases for -4.71\% and -4.81\%.}},
  Publisher = {{ASSOC COMPUTING MACHINERY}},
  Address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
  Type = {{Proceedings Paper}},
  Language = {{English}},
  Affiliation = {{Lauterburg, S (Corresponding Author), Univ Illinois, Dept Comp Sci, 1304 W Springfield Ave, Urbana, IL 61801 USA. Lauterburg, Steven; Sobeih, Ahmed; Marinov, Darko; Viswanathan, Mahesh, Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.}},
  ISBN = {{978-1-60558-079-1}},
  Keywords = {{State-space exploration; incremental computation; model checking; Java PathFinder; JPF; J-Sim}},
  Research-Areas = {{Computer Science}},
  Web-of-Science-Categories = {{Computer Science, Software Engineering}},
  Author-Email = {{slauter2@cs.uiuc.edu sobeih@cs.uiuc.edu marinov@cs.uiuc.edu vmahesh@cs.uiuc.edu}},
  Number-of-Cited-References = {{50}},
  Times-Cited = {{15}},
  Usage-Count-Last-180-days = {{0}},
  Usage-Count-Since-2013 = {{0}},
  Doc-Delivery-Number = {{BJI63}},
  Unique-ID = {{ISI:000266158500030}},
  OA = {{Green Published}},
  DA = {{2020-08-28}},
}
s of the same property with incremental bounds.
   In this paper, we present a framework that can efficiently reduce the
   overall test generation time by exploiting the similarity among
   different properties. This paper makes two primary contributions: 1) it
   proposes novel methods to cluster similar properties; and 2) it develops
   efficient learning techniques that can significantly reduce the overall
   test generation time for the properties in a cluster by sharing
   knowledge across similar test generation instances. Our experimental
   results using both software and hardware benchmarks demonstrate that our
   approach can drastically reduce (on average three to five times) the
   overall test generation time compared to existing methods.}},
Publisher = {{IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC}},
Address = {{445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA}},
Type = {{Article}},
Language = {{English}},
Affiliation = {{Chen, MS (Corresponding Author), Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Chen, Mingsong; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
DOI = {{10.1109/TCAD.2010.2041846}},
ISSN = {{0278-0070}},
EISSN = {{1937-4151}},
Keywords = {{Bounded model checking; functional verification; property clustering;
   SAT; test generation}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science,
   Interdisciplinary Applications; Engineering, Electrical \& Electronic}},
Author-Email = {{mchen@cise.ufl.edu
   prabhat@cise.ufl.edu}},
Funding-Acknowledgement = {{National Science FoundationNational Science Foundation (NSF) {[}0746261]}},
Funding-Text = {{Manuscript received April 14, 2009; revised August 10, 2009. Current
   version published February 24, 2010. This work was supported in part by
   the National Science Foundation Faculty Early Career Development Award
   0746261. This paper was recommended by Associate Editor T. Lynch.}},
Number-of-Cited-References = {{22}},
Times-Cited = {{17}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Journal-ISO = {{IEEE Trans. Comput-Aided Des. Integr. Circuits Syst.}},
Doc-Delivery-Number = {{561QE}},
Unique-ID = {{ISI:000274992600006}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000397468600093,
Author = {Chen, Mingsong and Qin, Xiaoke and Mishra, Prabhat},
Book-Group-Author = {{IEEE}},
Title = {{Efficient Decision Ordering Techniques for SAT-based Test Generation}},
Booktitle = {{2010 DESIGN, AUTOMATION \& TEST IN EUROPE (DATE 2010)}},
Series = {{Design Automation and Test in Europe Conference and Exhibition}},
Year = {{2010}},
Pages = {{490-495}},
Note = {{Design, Automation and Test in Europe Conference and Exhibition (DATE),
   Dresden, GERMANY, MAR 08-12, 2010}},
Organization = {{ACM SIGDA; EDA Consortium; European Design \& Automat Assoc; ECSI; IEEE
   Comp Soc TTTC; IEEE Council Elect Design Automat; RAS; ACM SIGBED; IEEE
   Solid State Circuits Soc; IFIP; Inst Engn \& Technol}},
Abstract = {{Model checking techniques are promising for automated generation of
   directed tests. However, due to the prohibitively large time and
   resource requirements, conventional model checking techniques do not
   scale well when checking complex designs. In SAT- based BMC, many
   variable ordering heuristics have been investigated to improve
   counterexample (test) generation involving only one property. This paper
   presents efficient decision ordering techniques that can improve the
   overall test generation time of a cluster of similar properties. Our
   method exploits the assignments of previously generated tests and
   incorporates it in the decision ordering heuristic for current test
   generation. Our experimental results using both software and hardware
   benchmarks demonstrate that our approach can drastically reduce the
   overall test generation time.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Chen, MS (Corresponding Author), Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Chen, Mingsong; Qin, Xiaoke; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
ISSN = {{1530-1591}},
ISBN = {{978-3-9810801-6-2}},
Research-Areas = {{Automation \& Control Systems; Engineering}},
Web-of-Science-Categories  = {{Automation \& Control Systems; Engineering, Electrical \& Electronic}},
Author-Email = {{mchen@cise.ufl.edu
   xqin@cise.ufl.edu
   prabhat@cise.ufl.edu}},
Funding-Acknowledgement = {{NSF CAREER awardNational Science Foundation (NSF)NSF - Office of the
   Director (OD) {[}0746261]}},
Funding-Text = {{This work was partially supported by NSF CAREER award 0746261.}},
Number-of-Cited-References = {{12}},
Times-Cited = {{5}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BH1AP}},
Unique-ID = {{ISI:000397468600093}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000283803200060,
Author = {Qin, Xiaoke and Chen, Mingsong and Mishra, Prabhat},
Book-Group-Author = {{IEEE}},
Title = {{Synchronized Generation of Directed Tests using Satisfiability Solving}},
Booktitle = {{23RD INTERNATIONAL CONFERENCE ON VLSI DESIGN}},
Year = {{2010}},
Pages = {{351-356}},
Note = {{23rd International Conference on VLSI Design/9th International
   Conference on Embedded Systems, Bangalore, INDIA, JAN 03-07, 2010}},
Organization = {{IEEE Circuits \& Syst Soc; ACM Special Interest Grp Design Automation}},
Abstract = {{Directed test generation is important for the functional verification of
   complex system-on-chip designs SAT based bounded model checking is
   promising for counterexample generation which can be used in directed
   testing Existing research has explored two directions to accelerate the
   SAT solving process learning during solving of one property with
   different bounds, or solving multiple properties with known bounds This
   paper combines the advantages of both approaches by introducing a novel
   SAT-solving technique which exploits the similarities among SAT
   instances for multiple properties and bounds on the same design The
   proposed technique ensures that the knowledge obtained in previous
   solving iterations be shared across different bounds as well as between
   different properties Our experimental results demonstrate that our
   approach can significantly reduce overall test generation time (on
   average 10 times) compared to existing methods}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Qin, XK (Corresponding Author), Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Qin, Xiaoke; Chen, Mingsong; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
DOI = {{10.1109/VLSI.Design.2010.47}},
ISBN = {{978-1-4244-5541-6}},
Keywords-Plus = {{BOUNDED MODEL CHECKING}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods; Engineering, Electrical \&
   Electronic}},
Number-of-Cited-References = {{15}},
Times-Cited = {{7}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BRW78}},
Unique-ID = {{ISI:000283803200060}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000281446200010,
Author = {McMillan, Kenneth L.},
Editor = {{Touili, T and Cook, B and Jackson, P}},
Title = {{Lazy Annotation for Program Testing and Verification}},
Booktitle = {{COMPUTER AIDED VERIFICATION, PROCEEDINGS}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2010}},
Volume = {{6174}},
Pages = {{104-118}},
Note = {{22nd International Conference on Computer Aided Verification, Edinburgh,
   SCOTLAND, JUL 15-19, 2010}},
Abstract = {{We describe an interpolant-based approach to test generation and model
   checking for sequential programs. The method generates Floyd/Hoare style
   annotations of the program on demand, as a result of failure to achieve
   goals, in a manner analogous to conflict clause learning in a DPLL style
   SAT solver.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{McMillan, KL (Corresponding Author), Cadence Berkeley Labs, Berkeley, CA USA.
   Cadence Berkeley Labs, Berkeley, CA USA.}},
ISSN = {{0302-9743}},
ISBN = {{978-3-642-14294-9}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods}},
Number-of-Cited-References = {{9}},
Times-Cited = {{52}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BQO38}},
Unique-ID = {{ISI:000281446200010}},
OA = {{Bronze}},
DA = {{2020-08-28}},
}

@article{ ISI_000291700300005,
Author = {Lefticaru, Raluca and Ipate, Florentin and Gheorghe, Marian},
Title = {{Model Checking Based Test Generation from P Systems Using P-Lingua}},
Journal = {{ROMANIAN JOURNAL OF INFORMATION SCIENCE AND TECHNOLOGY}},
Year = {{2010}},
Volume = {{13}},
Number = {{2}},
Pages = {{153-168}},
Note = {{8th Brainstorming Week on Membrane Computing (BWMC8), Seville, SPAIN,
   FEB 01-05, 2010}},
Organization = {{Sevilla Univ, Dept Comp Sci \& Artific Intelligence}},
Abstract = {{This paper presents an approach for P system testing, that uses
   model-checking for automatic test generation and P-Lingua as
   specification language. This approach is based on a transformation of
   the transitional, non-deterministic, cell-like P system into a Kripke
   structure, which is further used for test generation, by adding
   convenient temporal logic specifications. This paper extends our
   previous work in this field to multi-membrane, transitional P system,
   having cooperative rules, communication between membranes and membrane
   dissolution. A tool, which takes as input a P system specified in
   P-Lingua and translates it into the language accepted by the model
   checker NuSMV has been developed and used for test case generation. Some
   hints regarding the automatic test generation using NuSMV and P-Lingua
   are also given.}},
Publisher = {{EDITURA ACAD ROMANE}},
Address = {{CALEA 13 SEPTEMBRIE NR 13, SECTOR 5, BUCURESTI 050711, ROMANIA}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Lefticaru, R (Corresponding Author), Univ Pitesti, Dept Comp Sci, Pitesti, Romania.
   Lefticaru, Raluca; Ipate, Florentin; Gheorghe, Marian, Univ Pitesti, Dept Comp Sci, Pitesti, Romania.
   Gheorghe, Marian, Univ Sheffield, Dept Comp Sci, Sheffield S10 2TN, S Yorkshire, England.}},
ISSN = {{1453-8245}},
Research-Areas = {{Computer Science; Instruments \& Instrumentation; Physics}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods; Instruments \& Instrumentation;
   Physics, Applied}},
Author-Email = {{raluca.lefticaru@gmail.com
   florentin.ipate@ifsoft.ro
   M.Gheorghe@dcs.shef.ac.uk}},
ResearcherID-Numbers = {{Ipate, Florentin/D-4565-2011
   Lefticaru, Raluca/C-4071-2011}},
ORCID-Numbers = {{Ipate, Florentin/0000-0001-8777-3425
   Lefticaru, Raluca/0000-0001-5289-0162}},
Number-of-Cited-References = {{22}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{7}},
Journal-ISO = {{Rom. J. Inform. Sci. Technol.}},
Doc-Delivery-Number = {{778JP}},
Unique-ID = {{ISI:000291700300005}},
DA = {{2020-08-28}},
}

@article{ ISI_000269273800008,
Author = {Koo, Heon-Mo and Mishra, Prabhat},
Title = {{Functional Test Generation Using Design and Property Decomposition
   Techniques}},
Journal = {{ACM TRANSACTIONS ON EMBEDDED COMPUTING SYSTEMS}},
Year = {{2009}},
Volume = {{8}},
Number = {{4}},
Month = {{JUL}},
Note = {{Conference on Languages, Compilers and Tools for Embedded Systems, San
   Diego, CA, JUN 13-15, 2007}},
Organization = {{ACM SIGPLAN; ACM SIGBED; ACM SIGDA; ACM SIGMICRO; ACM SIGARCH}},
Abstract = {{Functional verification of microprocessors is one of the most complex
   and expensive tasks in the current system-on-chip design methodology.
   Simulation using functional test vectors is the most widely used form of
   processor validation. A significant bottleneck in the validation of such
   systems is the lack of automated techniques for directed test
   generation. While existing model checking-based approaches have proposed
   several promising ideas for automated test generation, many challenges
   remain in applying them to industrial microprocessors. The time and
   resources required for test generation using existing model
   checking-based techniques can be prohibitively large. This article
   presents an efficient test generation technique using decompositional
   model checking. The contribution of the article is the development of
   both property and design decomposition procedures for efficient test
   generation of pipelined processors. Our experimental results using a
   multi-issue MIPS processor and an industrial processor based on Power
   Architecture(TM) Technology demonstrate several orders-of-magnitude
   reduction in validation effort by drastically reducing both test
   generation time and test program length.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Koo, HM (Corresponding Author), Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Koo, Heon-Mo; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
DOI = {{10.1145/1550987.1550995}},
Article-Number = {{32}},
ISSN = {{1539-9087}},
EISSN = {{1558-3465}},
Keywords = {{Verification; Algorithms; Model checking; test generation; pipelined
   processor; design decomposition; property decomposition; functional
   validation}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science, Software
   Engineering}},
Author-Email = {{hkoo@cise.ufl.edu
   prabhat@cise.ufl.edu}},
Number-of-Cited-References = {{49}},
Times-Cited = {{11}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Journal-ISO = {{ACM Trans. Embed. Comput. Syst.}},
Doc-Delivery-Number = {{487KU}},
Unique-ID = {{ISI:000269273800008}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000274650100019,
Author = {Adjir, Noureddine and De Saqui-Sannes, Pierre and Rahmouni, Mustapha
   Kamel},
Editor = {{Alimohammad, A and Meixner, A and Popescu, M}},
Title = {{Time-optimal Real-Time Test Case Generation Using Prioritized Time Petri
   Nets}},
Booktitle = {{2009 FIRST INTERNATIONAL CONFERENCE ON ADVANCES IN SYSTEM TESTING AND
   VALIDATION LIFECYCLE}},
Year = {{2009}},
Pages = {{110+}},
Note = {{1st International Conference on Advances in System Testing and
   Validation Lifecycle, Oporto, PORTUGAL, SEP 20-25, 2009}},
Abstract = {{This paper discusses the application of model checking to test
   generation from specifications written in Prioritized Time Petri Nets.
   We demonstrate how to automatically generate conformance test cases,
   specially timed test cases with optimal execution time, using the model
   checker selt and the path analysis tool plan of the TINA toolbox.
   Properties are described in the SE-LTL temporal logic. Test cases are
   generated using manually formulated test purposes or automatically from
   various coverage criteria of the model.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Adjir, N (Corresponding Author), Univ Toulouse ISAE, 31 Ave Edward Belin,BP 44032, F-31055 Toulouse 4, France.
   Adjir, Noureddine; De Saqui-Sannes, Pierre, Univ Toulouse ISAE, 31 Ave Edward Belin,BP 44032, F-31055 Toulouse 4, France.
   De Saqui-Sannes, Pierre, Univ Toulouse, F-31055 Toulouse, France.
   Rahmouni, Mustapha Kamel, Univ Oran, Hangzhou 31000, Zhejiang, Peoples R China.}},
DOI = {{10.1109/VALID.2009.31}},
ISBN = {{978-1-4244-4862-3}},
Keywords = {{real-time system; Prioritzed Time petri Nets; conformance testing; time
   optimal test cases}},
Keywords-Plus = {{ABSTRACT STATE-SPACES; AUTOMATA; TOOL}},
Research-Areas = {{Automation \& Control Systems; Engineering}},
Web-of-Science-Categories  = {{Automation \& Control Systems; Engineering, Electrical \& Electronic}},
Author-Email = {{adjir-nourd@yahoo.fr
   pdss@isae.fr
   kamel\_rahmouni@yahoo.fr}},
ResearcherID-Numbers = {{de Saqui-Sannes, Pierre/L-2723-2017}},
ORCID-Numbers = {{de Saqui-Sannes, Pierre/0000-0002-1404-0148}},
Number-of-Cited-References = {{40}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BNI85}},
Unique-ID = {{ISI:000274650100019}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000275317200059,
Author = {Mallouli, Wissam and Mammar, Amel and Cavalli, Ana},
Editor = {{Sulaiman, S and Noor, NMM}},
Title = {{A Formal Framework to Integrate Timed Security Rules within a
   TEFSM-Based System Specification}},
Booktitle = {{APSEC 09: SIXTEENTH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE,
   PROCEEDINGS}},
Series = {{Asia-Pacific Software Engineering Conference}},
Year = {{2009}},
Pages = {{489-496}},
Note = {{16th Asia-Pacific Software Engineering Conference, Bat Ferringhi,
   MALAYSIA, DEC 01-03, 2009}},
Organization = {{Malaysian Software Interest Grp; Univ Sains Malaysia, Sch Comp Sci; Univ
   Teknol Malaysian, Ctr Adv Software Engn; Univ Teknol Malaysian, Fac Comp
   Sci \& Informat Syst; Univ Putra Malaysia, Fac Comp Sci Informat
   Technol; Univ Malaysian Terengganu, Fac Sci \& Technol; Univ Tenaga
   Nasl, Coll Informat Technol}},
Abstract = {{Formal methods are very useful in software industry and are becoming of
   paramount importance in practical engineering techniques. They involve
   the design and the modeling of various system aspects expressed usually
   through different paradigms. In this paper, we propose to combine two
   modeling formalisms in order to express both functional and security
   timed requirements of a system. First, the system behavior is specified
   based on its functional requirements using TEFSM (Timed Extended Finite
   State Machine) formalism. Second, this model is augmented by applying a
   set of dedicated algorithms to integrate timed security requirements
   specified in Nomad language. This language is well adapted to express
   security properties such as permissions, prohibitions and obligations
   with time considerations. The resulting secure model can be used for
   several purposes such as code generation, specification correctness
   proof, model checking or automatic test generation. In this paper, we
   applied our approach to a France Telecom(France Telecom is the main
   telecommunication company in France) Travel service in order to
   demonstrate its feasibility.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Mallouli, W (Corresponding Author), Montimage EURL, 39 Rue Bobillot, F-75013 Paris, France.
   Mallouli, Wissam, Montimage EURL, F-75013 Paris, France.}},
DOI = {{10.1109/APSEC.2009.52}},
ISSN = {{1530-1362}},
ISBN = {{978-0-7695-3909-6}},
Keywords = {{Formal Methods; Timed Extended Finite State Machines; Nomad Language;
   Test Generation}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Engineering, Electrical \&
   Electronic}},
Author-Email = {{wissam.mallouli@montimage.com
   amel.mammar@it-sudparis.eu
   ana.cavalli@it-sudparis.eu}},
Number-of-Cited-References = {{15}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BNR42}},
Unique-ID = {{ISI:000275317200059}},
DA = {{2020-08-28}},
}

@article{ ISI_000259456600003,
Author = {d'Amorim, Marcelo and Lauterburg, Steven and Marinov, Darko},
Title = {{Delta execution for efficient state-space exploration of object-oriented
   programs}},
Journal = {{IEEE TRANSACTIONS ON SOFTWARE ENGINEERING}},
Year = {{2008}},
Volume = {{34}},
Number = {{5}},
Pages = {{597-613}},
Month = {{SEP-OCT}},
Note = {{International Symposium on Software Testing and Analysis (ISSTA), Univ
   London Sch Oriental \& African Studies, Brunei Gallery, London, ENGLAND,
   2007}},
Abstract = {{We present Delta Execution, a technique that speeds up state-space
   exploration of object-oriented programs. State-space exploration is the
   essence of model checking and an increasingly popular approach for
   automating test generation. A key issue in exploration of
   object-oriented programs is handling the program state, in particular,
   the heap. We exploit the fact that many execution paths in state-space
   exploration partially overlap. Delta Execution simultaneously operates
   on several states/heaps and shares the common parts across the
   executions, separately executing only the ``deltas{''} where the
   executions differ. We implemented Delta Execution in two model checkers:
   JPF, a popular general-purpose model checker for Java programs, and BOX,
   a specialized model checker that we developed for efficient exploration
   of sequential Java programs. The results of bounded-exhaustive
   exploration of 10 basic subject programs and one larger case study show
   that Delta Execution reduces exploration time from 1.06x to 126.80x
   (with median 5.60x) in JPF and from 0.58x to 4.16x (with median 2.23x)
   in BOX. The results of nonexhaustive exploration in JPF show that Delta
   Execution reduces exploration time from 0.92x to 6.28x (with median
   4.52x).}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{d'Amorim, M (Corresponding Author), Univ Fed Pernambuco, Ctr Informat, Caixa Postal 7851, BR-50732970 Recife, PE, Brazil.
   d'Amorim, Marcelo, Univ Fed Pernambuco, Ctr Informat, BR-50732970 Recife, PE, Brazil.
   Lauterburg, Steven; Marinov, Darko, Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.}},
DOI = {{10.1109/TSE.2008.37}},
ISSN = {{0098-5589}},
EISSN = {{1939-3520}},
Keywords = {{software/program verification; model checking; testing and debugging;
   performance; Delta Execution}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Engineering, Electrical \&
   Electronic}},
Author-Email = {{damorim@cin.ufpe.br
   slauter2@cs.uiuc.edu
   marinov@cs.uiuc.edu}},
ResearcherID-Numbers = {{d'Amorim, Marcelo/D-1703-2017}},
ORCID-Numbers = {{d'Amorim, Marcelo/0000-0002-1323-8769}},
Number-of-Cited-References = {{49}},
Times-Cited = {{4}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{3}},
Journal-ISO = {{IEEE Trans. Softw. Eng.}},
Doc-Delivery-Number = {{351WM}},
Unique-ID = {{ISI:000259456600003}},
DA = {{2020-08-28}},
}

@article{ ISI_000258205900006,
Author = {Mishra, Prabhat and Dutt, Nikil},
Title = {{Specification-driven directed test generation for validation of
   pipelined processors}},
Journal = {{ACM TRANSACTIONS ON DESIGN AUTOMATION OF ELECTRONIC SYSTEMS}},
Year = {{2008}},
Volume = {{13}},
Number = {{3}},
Month = {{JUL}},
Note = {{44th ACM/IEEE Design Automation Conference, San Diego, CA, JUN 04-08,
   2007}},
Organization = {{ACM; IEEE}},
Abstract = {{Functional validation is a major bottleneck in pipelined processor
   design due to the combined effects of increasing design complexity and
   lack of efficient techniques for directed test generation. Directed test
   vectors can reduce overall validation effort, since shorter tests can
   obtain the same coverage goal compared to the random tests. This article
   presents a specification-driven directed test generation methodology.
   The proposed methodology makes three important contributions. First, a
   general graph model is developed that can capture the structure and
   behavior (instruction set) of a wide variety of pipelined processors.
   The graph model is generated from the processor specification. Next, we
   propose a functional fault model that is used to define the functional
   coverage for pipelined architectures. Finally, we propose two
   complementary test generation techniques: test generation using model
   checking, and test generation using template-based procedures. These
   test generation techniques accept the graph model of the architecture as
   input and generate test programs to detect all the faults in the
   functional fault model. Our experimental results on two pipelined
   processor models demonstrate several orders-of-magnitude reduction in
   overall validation effort by drastically reducing both test-generation
   time and number of test programs required to achieve a coverage goal.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Mishra, P (Corresponding Author), Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Dutt, Nikil, Univ Calif Irvine, Donald Bren Sch Informat \& Comp Sci, Irvine, CA 92697 USA.}},
DOI = {{10.1145/1367045.1367051}},
Article-Number = {{42}},
ISSN = {{1084-4309}},
EISSN = {{1557-7309}},
Keywords = {{verification; algorithms; model checking; test generation; functional
   validation}},
Keywords-Plus = {{VERIFICATION}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science, Software
   Engineering}},
Author-Email = {{prabhat@cise.ufl.edu
   dutt@ics.uci.edu}},
Number-of-Cited-References = {{38}},
Times-Cited = {{5}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Journal-ISO = {{ACM Transact. Des. Automat. Electron. Syst.}},
Doc-Delivery-Number = {{334EU}},
Unique-ID = {{ISI:000258205900006}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000266158500030,
Author = {Lauterburg, Steven and Sobeih, Ahmed and Marinov, Darko and Viswanathan,
   Mahesh},
Book-Group-Author = {{ACM}},
Title = {{Incremental State-Space Exploration for Programs with Dynamically
   Allocated Data}},
Booktitle = {{ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON
   SOFTWARE ENGINEERING}},
Year = {{2008}},
Pages = {{291-300}},
Note = {{30th International Conference on Software Engineering, Leipzig, GERMANY,
   MAY 10-18, 2008}},
Organization = {{ACM SIGSOFT; IEEE CSE; Univ Paderborn; Univ Leipzig; SIEMENS; Zuhlke;
   Adesso; Deutsch Telekom Labs; sd\&m; Werum; Microsoft Res; IBM; i nemis;
   dSPACE}},
Abstract = {{We present a novel technique that speeds up state-space exploration
   (SSE) for evolving programs with dynamically allocated data. SSE is the
   essence of explicit-state model checking and an increasingly popular
   method for automating test generation. Traditional, non-incremental SSE
   takes one version of a program and systematically explores the states
   reachable during the program's executions to find property violations.
   Incremental SSE considers several versions that arise during program
   evolution: reusing the results of SSE for one version can speed up SSE
   for the next version, since state spaces of consecutive program versions
   can have significant similarities. We have implemented our technique in
   two model checkers: Java PathFinder and the J-Sim state-space explorer.
   The experimental results on 24 program evolutions and exploration
   changes show that for non-initial runs our technique speeds up SSE in 22
   cases from 6.43\% to 68.62\% (with median of 42.29\%) and slows down SSE
   in only two cases for -4.71\% and -4.81\%.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Lauterburg, S (Corresponding Author), Univ Illinois, Dept Comp Sci, 1304 W Springfield Ave, Urbana, IL 61801 USA.
   Lauterburg, Steven; Sobeih, Ahmed; Marinov, Darko; Viswanathan, Mahesh, Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA.}},
ISBN = {{978-1-60558-079-1}},
Keywords = {{State-space exploration; incremental computation; model checking; Java
   PathFinder; JPF; J-Sim}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{slauter2@cs.uiuc.edu
   sobeih@cs.uiuc.edu
   marinov@cs.uiuc.edu
   vmahesh@cs.uiuc.edu}},
Number-of-Cited-References = {{50}},
Times-Cited = {{15}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BJI63}},
Unique-ID = {{ISI:000266158500030}},
OA = {{Green Published}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000249725800038,
Author = {Vardi, Moshe Y.},
Book-Group-Author = {{IEEE}},
Title = {{Formal techniques for SystemC verification - Position paper}},
Booktitle = {{2007 44TH ACM/IEEE DESIGN AUTOMATION CONFERENCE, VOLS 1 AND 2}},
Series = {{Design Automation Conference DAC}},
Year = {{2007}},
Pages = {{188-192}},
Note = {{44th ACM/IEEE Design Automation Conference, San Diego, CA, JUN 04-08,
   2007}},
Organization = {{ACM; IEEE}},
Abstract = {{SystemC has emerged lately as a de facto, open, industry standard
   modeling language, enabling a wide range of modeling levels, from RTL to
   system level. Its increasing acceptance is driven by the increasing
   complexity of designs, pushing designers to higher and higher levels of
   abstractions.
   While a major goal of SystemC is to enable verification at higher level
   of abstraction, enabling early exploration of system-level designs, the
   focus so far has been on traditional dynamic validation techniques. It
   is fair to see that the development of formal-verification techniques
   for SystemC models is at its infancy. In spite of intensive recent
   activity in the development of formal-verification techniques for
   software, extending such techniques to SystemC is a formidable
   challenge. The difficulty stems from both the object-oriented nature of
   SystemC, which is fundamental to its modeling philosophy, and its
   sophisticated event-driven simulation semantics.
   In this position paper we discuss what is needed to develop formal
   techniques for SystemC verification, augmenting dynamic validation
   techniques. By formal techniques we refer here to a range of techniques,
   including assertion-based dynamic validation, symbolic simulation,
   formal test generation, explicit-state model checking, and symbolic
   model checking.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Vardi, MY (Corresponding Author), Rice Univ, MS 132,6100 S Main St, Houston, TX 77005 USA.
   Rice Univ, Houston, TX 77005 USA.}},
DOI = {{10.1109/DAC.2007.375150}},
ISSN = {{0738-100X}},
ISBN = {{978-1-59593-771-1}},
Keywords = {{formal verification; high-level model}},
Keywords-Plus = {{SYMBOLIC EXECUTION}},
Research-Areas = {{Computer Science; Engineering; Transportation}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods; Engineering, Manufacturing;
   Transportation Science \& Technology}},
Author-Email = {{vardi@cs.rice.edu}},
ResearcherID-Numbers = {{Vardi, Moshe/W-4692-2019}},
Number-of-Cited-References = {{36}},
Times-Cited = {{33}},
Usage-Count-Last-180-days = {{1}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BGQ28}},
Unique-ID = {{ISI:000249725800038}},
OA = {{Green Published}},
DA = {{2020-08-28}},
}

@article{ ISI_000253407700008,
Author = {Godefroid, Patrice},
Title = {{Compositional dynamic test generation (extended abstract)}},
Journal = {{ACM SIGPLAN NOTICES}},
Year = {{2007}},
Volume = {{42}},
Number = {{1}},
Pages = {{47-54}},
Month = {{JAN}},
Note = {{34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming
   Languages, French Riviera, FRANCE, JAN 17-19, 2007}},
Organization = {{Assoc Comp Machinery; Special Interest Grp Programming Languages;
   Special Interest Grp Algorithms \& Comp Theory}},
Abstract = {{Dynamic test generation is a form of dynamic program analysis that
   attempts to compute test inputs to drive a program along a specific
   program path. Directed Automated Random Testing, or DART for short,
   blends dynamic test generation with model checking techniques with the
   goal of systematically executing all feasible program paths of a program
   while detecting various types of errors using run-time checking tools
   (like Purify, for instance). Unfortunately, systematically executing all
   feasible program paths does not scale to large, realistic programs.
   This paper addresses this major limitation and proposes to perform
   dynamic test generation compositionally, by adapting known techniques
   for interprocedural static analysis. Specifically, we introduce a new
   algorithm, dubbed SMART for Systematic Modular Automated Random Testing,
   that extends DART by testing functions in isolation, encoding test
   results as function summaries expressed using input preconditions and
   output postconditions, and then re-using those summaries when testing
   higher-level functions. We show that, for a fixed reasoning capability,
   our compositional approach to dynamic test generation (SMART) is both
   sound and complete compared to monolithic dynamic test generation
   (DART). In other words, SMART can perform dynamic test generation
   compositionally without any reduction in program path coverage. We also
   show that, given a bound on the maximum number of feasible paths in
   individual program functions, the number of program executions explored
   by SMART is linear in that bound, while the number of program executions
   explored by DART can be exponential in that bound. We present examples
   of C programs and preliminary experimental results that illustrate and
   validate empirically these properties.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Godefroid, P (Corresponding Author), Microsoft Res, Redmond, WA 98052 USA.
   Godefroid, Patrice, Microsoft Res, Redmond, WA 98052 USA.}},
DOI = {{10.1145/1190215.1190226}},
ISSN = {{0362-1340}},
EISSN = {{1558-1160}},
Keywords = {{verification; algorithms; reliability; software testing; automatic test
   generation; scalability; compositional program analysis; program
   verification}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{pg@microsoft.com}},
Number-of-Cited-References = {{25}},
Times-Cited = {{15}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Journal-ISO = {{ACM Sigplan Not.}},
Doc-Delivery-Number = {{266CA}},
Unique-ID = {{ISI:000253407700008}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000267364200007,
Author = {Godefroid, Patrice},
Book-Group-Author = {{ACM}},
Title = {{Compositional Dynamic Test Generation (Extended Abstract)}},
Booktitle = {{CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON
   PRINCIPLES OF PROGAMMING LANGUAGES}},
Year = {{2007}},
Pages = {{47-54}},
Note = {{34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming
   Languages, French Riviera, FRANCE, JAN 17-19, 2007}},
Organization = {{Assoc Comp Machinery; Special Interest Grp Programming Languages;
   Special Interest Grp Algorithms \& Comp Theory}},
Abstract = {{Dynamic test generation is a form of dynamic program analysis that
   attempts to compute test inputs to drive a program along a specific
   program path. Directed Automated Random Testing, or DART for short,
   blends dynamic test generation with model checking techniques with the
   goal of systematically executing all feasible program paths of a program
   while detecting various types of errors using run-time checking tools
   (like Purify, for instance). Unfortunately, systematically executing all
   feasible program paths does not scale to large, realistic programs.
   This paper addresses this major limitation and proposes to perform
   dynamic test generation compositionally, by adapting known techniques
   for interprocedural static analysis. Specifically, we introduce a new
   algorithm, dubbed SMART for Systematic Modular Automated Random Testing,
   that extends DART by testing functions in isolation, encoding test
   results as function summaries expressed using input preconditions and
   output postconditions, and then re-using those summaries when testing
   higher-level functions. We show that, for a fixed reasoning capability,
   our compositional approach to dynamic test generation (SMART) is both
   sound and complete compared to monolithic dynamic test generation
   (DART). In other words, SMART can perform dynamic test generation
   compositionally without any reduction in program path coverage. We also
   show that, given a bound on the maximum number of feasible paths in
   individual program functions, the number of program executions explored
   by SMART is linear in that bound, while the number of program executions
   explored by DART can be exponential in that bound. We present examples
   of C programs and preliminary experimental results that illustrate and
   validate empirically these properties.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
ISBN = {{978-1-59593-575-5}},
Keywords = {{Software Testing; Automatic Test Generation; Scalability; Compositional
   Program Analysis; Program Verification}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{pg@microsoft.com}},
Number-of-Cited-References = {{25}},
Times-Cited = {{27}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BJX74}},
Unique-ID = {{ISI:000267364200007}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000246221500056,
Author = {Diaz, Gregorio and Navarro, Elena and Cambronero, Maria-Emilia and
   Valero, Valentin and Cuartero, Fernando},
Editor = {{Leaney, J and Rozenblit, JW and Peng, J}},
Title = {{Testing time goal-driven requirements with model checking techniques}},
Booktitle = {{ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON
   THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS: RAISING
   EXPECTATIONS OF COMPUTER-BASES SYSTEMS}},
Year = {{2007}},
Pages = {{503+}},
Note = {{14th Annual IEEE International Conference and Workshop on Engineering of
   Computer-Based Systems (ECBS 2007), Univ Arizona, Tucson, AZ, MAR 26-29,
   2007}},
Organization = {{IEEE Comp Soc; Conf Publ Serv; OECE}},
Abstract = {{In this paper we present the testing of time goal requirements by using
   Model Checking as an engine for test generation. The goal model that we
   use to capture the time requirements is an extension of KAOS. This goal
   model specifies the properties that the system must satisfy and how they
   are tested by using the model checker engine, UPPAAL. As an illustration
   of this proposal we take a particular study case based on GSM cell
   technology.(1).}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Diaz, G (Corresponding Author), Univ Castilla La Mancha, Dept Comp Sci, E-02071 Ciudad Real, Spain.
   Diaz, Gregorio; Navarro, Elena; Cambronero, Maria-Emilia; Valero, Valentin; Cuartero, Fernando, Univ Castilla La Mancha, Dept Comp Sci, E-02071 Ciudad Real, Spain.}},
ISBN = {{978-0-7695-2772-7}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{gregorio@dsi.uclm.es
   enavarro@dsi.uclm.es
   emicp@dsi.uclm.es
   valentin@dsi.uclm.es
   fernando@dsi.uclm.es}},
ResearcherID-Numbers = {{Diaz-Descalzo, Gregorio/H-9912-2015
   Navarro, Elena/I-7452-2013
   Valero, Valentin/G-8268-2015}},
ORCID-Numbers = {{Diaz-Descalzo, Gregorio/0000-0002-9116-9535
   Navarro, Elena/0000-0001-9496-6890
   Valero, Valentin/0000-0003-3462-7656}},
Funding-Acknowledgement = {{CICYTConsejo Interinstitucional de Ciencia y Tecnologia (CICYT); spanish
   governmentSpanish Government; FEDEREuropean Union (EU)
   {[}TIN2006-15578-C02-02]; JCCLM {[}PAC06-0008-6995]}},
Funding-Text = {{This work has been supported by the CICYT project Supported by the
   spanish government (cofinanced by FEDER founds) with the project
   Application of Formal Methods to Web Services, with reference
   TIN2006-15578-C02-02, and the JCCLM regional project Application of
   Formal Methods to the Design and Analysis of Web Services and ecommerce
   applications, with reference PAC06-0008-6995.}},
Number-of-Cited-References = {{18}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BGD96}},
Unique-ID = {{ISI:000246221500056}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000252477000003,
Author = {Kaiss, Daher and Skaba, Marcelo and Hanna, Ziyad and Khasidashvili,
   Zurab},
Editor = {{OConner, L}},
Title = {{Industrial strength SAT-based alignability algorithm for hardware
   equivalence verification}},
Booktitle = {{FMCAD 2007: FORMAL METHODS IN COMPUTER AIDED DESIGN, PROCEEDINGS}},
Year = {{2007}},
Pages = {{20-26}},
Note = {{Conference on Formal Methods in Computer Aides Design, Austin, TX, NOV
   11-14, 2007}},
Organization = {{IEEE Council Elect Design Auttomat; FMCAD Inc}},
Abstract = {{Automatic synchronization (or reset) of sequential synchronous circuits
   is considered one of the most challenging tasks in the domain of formal
   sequential equivalence verification of hardware designs. Earlier
   attempts were based on Binary Decision Diagrams (BDDs) or classical
   reachability analysis, which by nature suffer from capacity limitations.
   A previous attempt to attack this problem using non-BDD based techniques
   was essentially a collection of heuristics aimed at toggling of the
   latches, and it is not guaranteed that a synchronization sequence will
   be computed if it exists.
   In this paper we present a novel approach for computing reset sequences
   (and reset states) in order to perform sequential hardware equivalence
   verification between circuit models. This approach is based on the
   dual-rail modeling of circuits and utilizes efficient SAT-based engines
   for Bounded Model Checking (BMC). It is implemented in Intel's
   sequential verification tool, Seqver, and has been proven to be highly
   successful in proving the equivalence of complex industrial designs. The
   synchronization method described in this paper can be used in many other
   CAD applications, including formal property verification, automatic test
   generation, and power estimation.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Kaiss, D (Corresponding Author), Israel Design Ctr, Haifa, Israel.
   Kaiss, Daher; Skaba, Marcelo; Hanna, Ziyad; Khasidashvili, Zurab, Israel Design Ctr, Haifa, Israel.}},
ISBN = {{978-0-7695-3023-9}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods; Engineering, Electrical \&
   Electronic}},
Number-of-Cited-References = {{36}},
Times-Cited = {{10}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BHE52}},
Unique-ID = {{ISI:000252477000003}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000252726900010,
Author = {Cavalcanti, Ana and Gaudel, Marie-Claude},
Editor = {{Butler, M and Hinchey, MG and LarrondoPetrie, MM}},
Title = {{Testing for refinement in CSP}},
Booktitle = {{FORMAL METHODS AND SOFTWARE ENGINEERING, PROCEEDINGS}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2007}},
Volume = {{4789}},
Pages = {{151+}},
Note = {{9th International Conference on Formal Engineering Methods (ICFEM 2007),
   Florida Atlantic Univ, Boca Raton, FL, NOV 14-15, 2007}},
Abstract = {{CSP is a well-established formalism for modelling and verification of
   concurrent reactive systems based on refinement. Consolidated
   denotational models and an effective tool have encouraged much work on
   algebraic reasoning and model checking. Testing techniques based on CSP,
   however, have not been widely explored, and in this paper we take a
   first step by instantiating Gaudel et al's theory of formal testing to
   CSP. We identify the testability hypothesis that we consider necessary
   to use CSP models as a basis for testing. We also define test sets that
   we prove to be exhaustive with respect to traces and failures
   refinement, and consider optimisations, inputs and outputs, and
   selection strategies. Our results are proved in terms of the CSP
   denotational models; they are a sound foundation for the development of
   test-generation techniques.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Cavalcanti, A (Corresponding Author), Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
   Cavalcanti, Ana, Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
   Gaudel, Marie-Claude, Univ Paris Sud, LRI, CNRS, F-91405 Orsay, France.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-540-76648-3}},
Keywords-Plus = {{ALGEBRAIC SPECIFICATIONS; GENERATION}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
Funding-Acknowledgement = {{Royal Society of LondonRoyal Society of London}},
Funding-Text = {{We are grateful to the Royal Society of London, who supported our
   collaboration through funding for a Short Visit to the UK and an
   International Joint Project.}},
Number-of-Cited-References = {{31}},
Times-Cited = {{20}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BHF59}},
Unique-ID = {{ISI:000252726900010}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000247063000008,
Author = {Pacheco, Carlos and Lahiri, Shuvendu K. and Ernst, Michael D. and Ball,
   Thomas},
Book-Group-Author = {{IEEE Comp Soc}},
Title = {{Feedback-directed random test generation}},
Booktitle = {{ICSE 2007: 29TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING,
   PROCEEDINGS}},
Series = {{International Conference on Software Engineering}},
Year = {{2007}},
Pages = {{75+}},
Note = {{29th International Conference on Software Engineering (ICSE 2007),
   Minneapolis, MN, MAY 20-26, 2007}},
Organization = {{IEEE Comp Soc, TCSE; ACM SIGSOFT}},
Abstract = {{We present a technique that improves random test generation by
   incorporating feedback obtained from executing test inputs as they are
   created. Our technique builds inputs incrementally by randomly selecting
   a method call to apply and finding arguments from among
   previously-constructed inputs. As soon as an input is built, it is
   executed and checked against a set of contracts and filters. The result
   of the execution deter-mines whether the input is redundant, illegal,
   contract-violating, or useful for generating more inputs. The technique
   outputs a test suite consisting of unit tests for the classes under
   test. Passing tests can be used to ensure that code contracts are
   preserved across program changes; failing tests (that violate one or
   more contract) point to potential errors that should be corrected.
   Our experimental results indicate that feedback-directed random test
   generation can outperform systematic and undirected random test
   generation, in terms of coverage and error detection. On four small but
   nontrivial data structures (used previously in the literature), our
   technique achieves higher or equal block and predicate coverage than
   model checking (with and without abstraction) and undirected random
   generation. On 14 large, widely-used libraries (comprising 780KLOC)
   feedback-directed random test generation finds many previously-unknown
   errors, not found by either model checking or undirected random
   generation.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Pacheco, C (Corresponding Author), MIT, CSAIL, Cambridge, MA 02139 USA.
   Pacheco, Carlos; Ernst, Michael D., MIT, CSAIL, Cambridge, MA 02139 USA.
   Lahiri, Shuvendu K.; Ball, Thomas, Microsoft Res, Bangalore 560001, Karnataka, India.}},
ISSN = {{0270-5257}},
ISBN = {{978-0-7695-2828-1}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{cpacheco@csail.mit.edu
   shuvendu@microsoft.com
   mernst@csail.mit.edu
   tball@microsoft.com}},
Number-of-Cited-References = {{31}},
Times-Cited = {{271}},
Usage-Count-Last-180-days = {{1}},
Usage-Count-Since-2013 = {{4}},
Doc-Delivery-Number = {{BGH85}},
Unique-ID = {{ISI:000247063000008}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000253303700038,
Author = {Mangassarian, Hratch and Veneris, Andreas and Safarpour, Sean and
   Benedetti, Marco and Smith, Duncan},
Book-Group-Author = {{IEEE}},
Title = {{A performance-driven QBF-Based iterative logic array representation with
   applications to verification, debug and test}},
Booktitle = {{IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN DIGEST OF
   TECHNICAL PAPERS, VOLS 1 AND 2}},
Series = {{IEEE INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN}},
Year = {{2007}},
Pages = {{240+}},
Note = {{IEEE/ACM International Conference on Computer-Aided Design, San Jose,
   CA, NOV 04-08, 2007}},
Organization = {{IEEE; ACM}},
Abstract = {{Many CAD for VLSI techniques use time-frame expansion, also known as the
   Iterative Logic Array representation, to model the sequential behavior
   of a system. Replicating industrialsize designs for many time-frames may
   impose impractically excessive memory requirements. This work proposes a
   performance-driven, succinct and parametrizable Quantified Boolean
   Formula (QBF) satisfiability encoding and its hardware implementation
   for modeling sequential circuit behavior. This encoding is then applied
   to three notable CAD problems, namely Bounded Model Checking (BMC),
   sequential test generation and design debugging. Extensive experiments
   on industrial circuits confirm outstanding run-time and memory gains
   compared to state-of-the-art techniques, promoting the use of QBF in CAD
   for VLSI.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Mangassarian, H (Corresponding Author), Univ Toronto, ECE Dept, Toronto, ON M5S 3G4, Canada.
   Mangassarian, Hratch; Veneris, Andreas; Safarpour, Sean; Smith, Duncan, Univ Toronto, ECE Dept, Toronto, ON M5S 3G4, Canada.
   Veneris, Andreas, Univ Toronto, Dept CS, Toronto, ON M5S 3G4, Canada.
   Benedetti, Marco, Univ Orleans, LIFO, F-45067 Orleans, France.}},
ISSN = {{1063-6757}},
ISBN = {{978-1-4244-1381-2}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods; Engineering, Electrical \&
   Electronic}},
Author-Email = {{hratch@eecg.toronto.edu
   veneris@eecg.toronto.edu
   sean@eecg.toronto.edu
   Marco.Benedetti@univ-orleans.fr
   duncan@eecg.toronto.edu}},
Number-of-Cited-References = {{19}},
Times-Cited = {{30}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BHH56}},
Unique-ID = {{ISI:000253303700038}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000246181000115,
Author = {Zheng, Yongyan and Zhou, Jiong and Krause, Paul},
Editor = {{Latifi, S}},
Title = {{A model checking based test case generation framework for web services}},
Booktitle = {{INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY, PROCEEDINGS}},
Year = {{2007}},
Pages = {{715+}},
Note = {{4th International Conference on Information Technology - New
   Generations, Las Vegas, NV, APR 02-04, 2007}},
Organization = {{IEEE; IEEE Comp Soc; Premier Hall Sci \& Engn}},
Abstract = {{BPEL (Business Process Execution Language) is an emerging standard
   language to describe web service composition behaviour The advanced
   features of BPEL such as concurrency and hierarchy make it challenging
   to verify BPEL models. Previously, we proposed WSA (web service
   automata) to be the formal models for BPEL. Based on WSA, this paper
   presents a model checking based test case generation framework for BPEL.
   We apply SPIN and NuSMV model checkers as the test generation engine,
   and we encode the conventional structural test coverage criteria into
   LTL and CTL temporal logic. State coverage and transition coverage are
   used for BPEL control flow testing, and all-du-path coverage is used for
   BPEL data flow testing. Two levels of test cases can be generated to
   test whether the implementation of web services conforms to the BPEL
   behaviour and WSDL interface models. The generated test cases are
   executed on the JUnit test execution engine.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Zheng, YY (Corresponding Author), Univ Surrey, Dept Comp, Guildford GU2 7XH, Surrey, England.
   Zheng, Yongyan; Zhou, Jiong; Krause, Paul, Univ Surrey, Dept Comp, Guildford GU2 7XH, Surrey, England.}},
ISBN = {{978-0-7695-2776-5}},
Research-Areas = {{Computer Science; Imaging Science \& Photographic Technology;
   Telecommunications}},
Web-of-Science-Categories  = {{Computer Science, Artificial Intelligence; Computer Science, Information
   Systems; Computer Science, Software Engineering; Imaging Science \&
   Photographic Technology; Telecommunications}},
Author-Email = {{y.zheng@surrey.ac.uk
   j.zhou@surrey.ac.uk
   p.krause@surrey.ac.uk}},
Funding-Acknowledgement = {{EU FP6European Union (EU)}},
Funding-Text = {{This work is supported by the EU FP6 funded project Digital Business
   Ecosystem.}},
Number-of-Cited-References = {{12}},
Times-Cited = {{10}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{4}},
Doc-Delivery-Number = {{BGD76}},
Unique-ID = {{ISI:000246181000115}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000250752600040,
Author = {Zheng, Yongyan and Zhou, Jiong and Krause, Paul},
Editor = {{Muller, P and Liggesmeyer, P and Maehle, E}},
Title = {{Analysis of BPEL data dependencies}},
Booktitle = {{SEAA 2007: 33RD EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND
   ADVANCED APPLICATIONS, PROCEEDINGS}},
Series = {{EUROMICRO Conference Proceedings}},
Year = {{2007}},
Pages = {{351+}},
Note = {{33rd EUROMICRO Conference on Software Engineering and Advanced
   Applications, Lubeck, GERMANY, AUG 27-31, 2007}},
Abstract = {{BPEL is a de-facto standard language for web service orchestration. It
   is a challenge to test BPEL processes automatically because of the
   complex features of the language. The current formal semantics proposed
   for BPEL can be categorized under three branches: Process Algebra,
   Petrinets, and Automata. Our goal is to automate the generation and
   execution of test cases for composed web services. Model checking is an
   effective technique for automated test generation, and most mature model
   checkers such as SPIN and NuSMV use automata as the underlying formal
   model. Hence, we follow the automata branch. Unfortunately, the current
   automata based approaches omit the BPEL data dependencies. In order to
   address this shortcoming, we demonstrate how to model BPEL data
   dependencies in our proposed web service automata.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Zheng, YY (Corresponding Author), Univ Surrey, Dept Comp, Guildford GU2 7XH, Surrey, England.
   Zheng, Yongyan; Zhou, Jiong; Krause, Paul, Univ Surrey, Dept Comp, Guildford GU2 7XH, Surrey, England.}},
ISSN = {{1089-6503}},
ISBN = {{978-0-7695-2977-6}},
Keywords = {{BPEL; finite state machine; data dependencies; data flow analysis}},
Research-Areas = {{Computer Science; Telecommunications}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Telecommunications}},
Author-Email = {{y.zheng@surrey.ac.uk
   j.zhou@surrey.ac.uk
   p.krause@surrey.ac.uk}},
Funding-Acknowledgement = {{EU FP6European Union (EU)}},
Funding-Text = {{This work was supported by the EU FP6 funded project Digital Business
   Ecosystems.}},
Number-of-Cited-References = {{17}},
Times-Cited = {{5}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Doc-Delivery-Number = {{BGV31}},
Unique-ID = {{ISI:000250752600040}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000247666400033,
Author = {Zeng, Hongwei and Miao, Huaikou and Liu, Jing},
Book-Group-Author = {{IEEE Comp Soc}},
Title = {{Specification-based test generation and optimization using model
   checking}},
Booktitle = {{TASE 2007: FIRST JOINT IEEE/IFIP SYMPOSIUM ON THEORETICAL ASPECTS OF
   SOFTWARE ENGINEERING, PROCEEDINGS}},
Year = {{2007}},
Pages = {{349+}},
Note = {{1st IEEE/IFIP International Symposium on Theoretical Aspects of Softwave
   Engineering, Shanghai, PEOPLES R CHINA, JUN 06-08, 2007}},
Organization = {{IFIP; IEEE Comp Soc; E China Normal Univ}},
Abstract = {{The capability of model checkers to construct counterexamples provides a
   basis for automated test generation. However, many model checking-based
   testing approaches just focus on generating test sets with respect to
   some coverage criteria. Such test sets generally are large and
   inefficient because of much redundancy. We propose an on-the-fly
   approach that performs test generation and redundancy elimination by
   turns. Our approach employs a test-tree to pick out and represent a
   subset of tests with equal coverage for a test criterion and no
   redundancy. Along with model checking for a property, a new test
   sequence is derived from the counterexample and is used to detect
   redundant properties, and then is winnowed by the test-tree as well. We
   demonstrate the approach by applying some small examples to our
   prototyped algorithm.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Zeng, H (Corresponding Author), Shanghai Univ, Sch Engn \& Comp Sci, Shanghai 200072, Peoples R China.
   Zeng, Hongwei; Miao, Huaikou, Shanghai Univ, Sch Engn \& Comp Sci, Shanghai 200072, Peoples R China.
   Zeng, Hongwei, Wuhan Univ, State Key Lab Software Engn, Wuhan 430072, Peoples R China.
   Liu, Jing, East China Normal Univ, Inst Software Engn, Shanghai 200062, Peoples R China.}},
ISBN = {{978-0-7695-2856-4}},
Keywords = {{model checking; test generation; optimization; test-tree}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{zenghongwei@shu.edu.cn
   hkmiao@shu.edu.cn
   jliu@sei.ecnu.edu.cn}},
Funding-Acknowledgement = {{National Science Foundation of ChinaNational Natural Science Foundation
   of China (NSFC) {[}60673115]; Open Foundation of State Key Laboratory of
   Software Engineering {[}SKLSE05-13]}},
Funding-Text = {{This work is supported by National Science Foundation of China (grant
   No. 60673115) and Open Foundation of State Key Laboratory of Software
   Engineering(No. SKLSE05-13)}},
Number-of-Cited-References = {{20}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BGJ75}},
Unique-ID = {{ISI:000247666400033}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000248518500024,
Author = {Zeng, Hongwei and Miao, Huaikou},
Editor = {{Baresi, L and Fraternali, P and Houben, GJ}},
Title = {{Auto-generating test sequences for Web applications}},
Booktitle = {{WEB ENGINEERING, PROCEEDINGS}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2007}},
Volume = {{4607}},
Pages = {{301+}},
Note = {{7th International Conference on Web Engineering, Como, ITALY, JUL 16-20,
   2007}},
Abstract = {{We propose a formal model, representing the navigation behavior of a Web
   application as the Kripke structure, and an approach to test generation.
   The behavior model can be constructed from the object structure of a Web
   application and then a set of test sequences is derived automatically
   from the behavior model with respect to some coverage criteria for the
   object structure by using the model checking's capability to construct
   counter-examples.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Zeng, H (Corresponding Author), Shanghai Univ, Sch Engn \& Comp Sci, Shanghai 200072, Peoples R China.
   Zeng, Hongwei; Miao, Huaikou, Shanghai Univ, Sch Engn \& Comp Sci, Shanghai 200072, Peoples R China.}},
ISSN = {{0302-9743}},
ISBN = {{978-3-540-73596-0}},
Keywords = {{Web application; test generation; model checking; consistency relation}},
Keywords-Plus = {{MODEL CHECKING}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods}},
Author-Email = {{zenghongwei@shu.edu.cn
   hkmiao@shu.edu.cn}},
Funding-Acknowledgement = {{National Science Foundation of ChinaNational Natural Science Foundation
   of China (NSFC) {[}60673115]; National 973 ProgramNational Basic
   Research Program of China {[}2002CB312001]}},
Funding-Text = {{This work is supported by National Science Foundation of China (grant
   No. 60673115) and National 973 Program (2002CB312001).}},
Number-of-Cited-References = {{10}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BGM73}},
Unique-ID = {{ISI:000248518500024}},
DA = {{2020-08-28}},
}

@article{ ISI_000241136700005,
Author = {Robinson-Mallett, Christopher and Liggesmeyer, Peter and Muecke, Tilo
   and Goltz, Ursula},
Title = {{Extended state identification and verification using a model checker}},
Journal = {{INFORMATION AND SOFTWARE TECHNOLOGY}},
Year = {{2006}},
Volume = {{48}},
Number = {{10}},
Pages = {{981-992}},
Month = {{OCT}},
Note = {{Workshop on Advances in Model-Based Software Testing, St.Louis, MO, MAY
   15-16, 2005}},
Organization = {{ICSE}},
Abstract = {{This article presents a method for the application of model checking,
   i.e., verifying a finite state system against a given temporal
   specification, on the problem of generating test inputs. The generated
   test inputs allow state characterization, i.e., the identification of
   internal states of the software under test by observation of the
   input/output behavior only. A test model is derived semi-automatically
   from a given state-based specification and the testing goal is specified
   in terms of temporal logic. On the basis of these inputs, a model
   checking tool performs the testing input generation automatically. In
   consequence, the complexity of our approach is strongly depending on the
   input model, the testing goal, and the model checking algorithm, which
   is implemented in the used tool. The presented approach can be adapted
   with small changes to other model checking tools. It is a capable test
   generation method, whenever a finite state model of the software under
   test exists. Furthermore, it provides a descriptive view on state-based
   testing, which may be beneficial in other contexts, e.g., education and
   program comprehension. (c) 2006 Elsevier B.V. All rights reserved.}},
Publisher = {{ELSEVIER SCIENCE BV}},
Address = {{PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Robinson-Mallett, C (Corresponding Author), Univ Kaiserslautern, Fraunhofer IESE, D-67663 Kaiserslautern, Germany.
   Univ Kaiserslautern, Fraunhofer IESE, D-67663 Kaiserslautern, Germany.}},
DOI = {{10.1016/j.infsof.2006.03.006}},
ISSN = {{0950-5849}},
EISSN = {{1873-6025}},
Keywords = {{state characterization; automata-based testing; conformance testing;
   model checking; test generation; protocol testing; checking sequence
   generation; software testing}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems; Computer Science, Software
   Engineering}},
Author-Email = {{mallett@iese.fraunhofer.de
   peter.liggesmeyer@iese.fraunhofer.de
   tmuecke@ips.cs.tu-bs.de
   goltz@ips.cs.tu-bs.de}},
Number-of-Cited-References = {{20}},
Times-Cited = {{4}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Journal-ISO = {{Inf. Softw. Technol.}},
Doc-Delivery-Number = {{092ZM}},
Unique-ID = {{ISI:000241136700005}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000243721600247,
Author = {Koo, Heon-Mo and Mishra, Prabhat},
Book-Group-Author = {{IEEE}},
Title = {{Functional test generation using property decompositions for validation
   of pipelined processors}},
Booktitle = {{2006 DESIGN AUTOMATION AND TEST IN EUROPE, VOLS 1-3, PROCEEDINGS}},
Series = {{Design Automation and Test in Europe Conference and Exhibition}},
Year = {{2006}},
Pages = {{1240+}},
Note = {{Design, Automation and Test in Europe Conference and Exhibition (DATE
   06), Munich, GERMANY, MAR 06-10, 2006}},
Organization = {{European Design \& Automat Assoc; EDA Consortium; IEEE Comp Soc TTTC;
   ESCI; ACM SIGDA; RAS}},
Abstract = {{Functional validation is a major bottleneck in pipelined processor
   design. Simulation using functional test vectors is the most widely used
   form of processor validation. While existing model checking based
   approaches have proposed several promising ideas for efficient test
   generation, many challenges remain in applying them to realistic
   pipelined processors. The time and resources required for test
   generation using existing model checking based techniques can be
   extremely large. This paper presents an efficient test generation
   technique using decompositional model checking. The contribution of the
   paper is the development of both property and design decomposition
   procedures for efficient test generation of pipelined processors. Our
   experimental results using a multi-issue MIPS processor demonstrate
   several orders-of-magnitude reduction in memory requirement and test
   generation time.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Koo, HM (Corresponding Author), Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.
   Koo, Heon-Mo; Mishra, Prabhat, Univ Florida, Dept Comp \& Informat Sci \& Engn, Gainesville, FL 32611 USA.}},
ISSN = {{1530-1591}},
ISBN = {{978-3-9810801-1-7}},
Research-Areas = {{Computer Science; Telecommunications}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science, Software
   Engineering; Telecommunications}},
Author-Email = {{hkoo@cise.ufl.edu
   prabhat@cise.ufl.edu}},
Number-of-Cited-References = {{20}},
Times-Cited = {{9}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BFQ09}},
Unique-ID = {{ISI:000243721600247}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000240256100014,
Author = {Kumar, Viraj and Madhusudan, P. and Viswanathan, Mahesh},
Editor = {{Baier, C and Hermanns, H}},
Title = {{Minimization, learning, and conformance testing of Boolean programs}},
Booktitle = {{CONCUR 2006 - CONCURRENCY THEORY, PROCEEDINGS}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2006}},
Volume = {{4137}},
Pages = {{203-217}},
Note = {{17th International Conference on Concurrency Theory, Bonn, GERMANY, AUG
   27-30, 2006}},
Abstract = {{Boolean programs with recursion are convenient abstractions of
   sequential imperative programs, and can be represented as recursive
   state machines (RSMs) or pushdown automata. Motivated by the special
   structure of RSMs, we define a notion of modular visibly pushdown
   automata (modular VPA) and show that for the class of languages accepted
   by such automata, unique minimal modular VPA exist. This yields an
   efficient approximate minimization theorem that minimizes RSMs to within
   a factor of k of the minimal RSM, where k is the maximum number of
   parameters in any module. Using the congruence defined for minimization,
   we show an active learning algorithm (with a minimally adequate teacher)
   for context free languages in terms of modular VPAs. We also present an
   algorithm that constructs complete test suites for Boolean program
   specifications. Finally, we apply our results on learning and test
   generation to perform model checking of black-box Boolean programs.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Kumar, V (Corresponding Author), Univ Illinois, Urbana, IL 61801 USA.
   Univ Illinois, Urbana, IL 61801 USA.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{3-540-37376-4}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods}},
Author-Email = {{kumar@cs.uiuc.edu
   madhu@cs.uiuc.edu
   vmahesh@cs.uiuc.edu}},
Number-of-Cited-References = {{25}},
Times-Cited = {{11}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BEZ28}},
Unique-ID = {{ISI:000240256100014}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000244831100006,
Author = {Ernits, Juhan-P. and Kull, Andres and Raiend, Kullo and Vain, Juri},
Editor = {{Havelund, K and Nunez, M and Rosu, G and Wolff, B}},
Title = {{Generating tests from EFSM models using guided model checking and
   iterated search refinement}},
Booktitle = {{FORMAL APPROACHES TO SOFTWARE TESTING AND RUNTIME VERIFICATION}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2006}},
Volume = {{4262}},
Pages = {{85+}},
Note = {{1st Joint International Workshop on FATES/RV, Seattle, WA, AUG 15-16,
   2006}},
Abstract = {{We present a way to generate test sequences from EFSM models using a
   guided model checker: Uppaal Cora. The approach allows to specify
   various structural test coverage criteria of EFSMs, for example,
   selected states/transitions, all transitions, all transition pairs, etc.
   We describe a method to construct Uppaal models to achieve test
   sequences satisfying these criteria and experiment with the search
   options of Uppaal to achieve test sequences that are suboptimal in terms
   of length. We apply a bitstate hashing space reduction based iterated
   search refinement method to shorten the length of test sequences with
   respect to the length gained using depth first search. The test
   generation method and different search strategies are compared by
   applying them on a stopwatch and INRES protocol based case study. The
   outcome shows the feasibility of applying guided model checking in
   conjunction with iterated search refinement for generating suboptimal
   test sequences.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Ernits, JP (Corresponding Author), Tallinn Univ Technol, Dept Comp Sci, Raja 15, EE-12618 Tallinn, Estonia.
   Ernits, JP (Corresponding Author), Elvior, EE-10621 Tallinn, Estonia.
   Ernits, Juhan-P.; Vain, Juri, Tallinn Univ Technol, Dept Comp Sci, Raja 15, EE-12618 Tallinn, Estonia.
   Kull, Andres; Raiend, Kullo, Elvior, EE-10621 Tallinn, Estonia.
   Ernits, Juhan-P.; Vain, Juri, Inst Cybernet, EE-12618 Tallinn, Estonia.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{978-3-540-49699-1}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
Author-Email = {{juhan@cc.ioc.ee
   andres.kull@elvior.ee
   kullo.raiend@elvior.ee
   vain@ioc.ee}},
ResearcherID-Numbers = {{Ernits, Juhan-Peep/AAC-8854-2020
   Vain, Juri/J-4717-2018}},
ORCID-Numbers = {{Ernits, Juhan-Peep/0000-0002-4591-0425
   Vain, Juri/0000-0002-0700-7972}},
Funding-Acknowledgement = {{Estonian Science Foundation {[}5775]; ELIKO Competence Center}},
Funding-Text = {{We thank the anonymous referees for their constructive and helpful
   comments. This work was partially supported by the Estonian Science
   Foundation under grant No 5775 and by ELIKO Competence Center project
   Integration Platform for Development Tools of Embedded Systems.}},
Number-of-Cited-References = {{18}},
Times-Cited = {{4}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{2}},
Doc-Delivery-Number = {{BFV56}},
Unique-ID = {{ISI:000244831100006}},
DA = {{2020-08-28}},
}

@article{ ISI_000234920000002,
Author = {Suhaib, SM and Mathaikutty, DA and Shukla, SK and Berner, D},
Title = {{XFM: An incremental methodology for developing formal models}},
Journal = {{ACM TRANSACTIONS ON DESIGN AUTOMATION OF ELECTRONIC SYSTEMS}},
Year = {{2005}},
Volume = {{10}},
Number = {{4}},
Pages = {{589-609}},
Month = {{OCT}},
Note = {{9th IEEE International High-Level Design Validation and Test Workshop,
   Sonoma Valley, CA, NOV 10-12, 2004}},
Organization = {{IEEE Comp Soc, Test Technol Tech Council; IEEE Comp Soc, Design Automat
   Tech Comm}},
Abstract = {{We present an agile formal methodology named eXtreme Formal Modeling
   (XFM), based on Extreme Programming (XP) concepts to construct abstract
   models from natural language specifications of complex systems. In
   particular, we focus on Prescriptive Formal Models (PFMs) that capture
   the specification of the system under design in a mathematically precise
   manner. Such models can be used as golden reference models for formal
   verification, test generation, coverage monitor generation, etc. This
   methodology for incrementally building PFMs works by adding user stories
   expressed as LTL formulae gleaned from the natural language
   specifications, one by one, into the model. XFM builds the models,
   retaining correctness with respect to incrementally added properties by
   regressively model-checking all the LTL properties captured theretofore
   in the model. We illustrate XFM with a graded set of examples consisting
   of a traffic light controller and a DLX pipeline. To make the regressive
   model-checking steps feasible with current model-checking tools, we need
   to control the model size increments at each subsequent step in the
   process. We therefore analyze the effects of ordering the LTL properties
   in XFM on the statespace growth rate of the model. We compare three
   different property-ordering methodologies: ad hoe ordering,
   property-based ordering, and predicate-based ordering. We experiment on
   the models of the ISA bus monitor and the arbitration phase of the
   Pentium Pro bus. We experimentally show and mathematically reason that
   the predicate-based ordering is the best among these orderings. Finally,
   we present a GUI-based toolbox that we implemented to build PFMs using
   XFM.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Suhaib, SM (Corresponding Author), Virginia Tech, FERMAT Lab, Blacksburg, VA 24061 USA.
   Virginia Tech, FERMAT Lab, Blacksburg, VA 24061 USA.}},
DOI = {{10.1145/1109118.1109120}},
ISSN = {{1084-4309}},
EISSN = {{1557-7309}},
Keywords = {{design; performance; reliability; verification; extreme formal modeling;
   extreme programming; formal specification; formal verification;
   prescriptive formal models; property ordering; property refactoring;
   SPIN; SMV}},
Keywords-Plus = {{XP}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science, Software
   Engineering}},
Author-Email = {{ssuhaib@vt.edu
   damathai@vt.edu
   shukla@vt.edu
   david.berner@irisa.fr}},
ResearcherID-Numbers = {{Shukla, Sandeep/B-3358-2009
   SHUKLA, SANDEEP/T-6430-2019}},
ORCID-Numbers = {{Shukla, Sandeep/0000-0001-5525-7426
   SHUKLA, SANDEEP/0000-0001-5525-7426}},
Number-of-Cited-References = {{27}},
Times-Cited = {{7}},
Usage-Count-Last-180-days = {{1}},
Usage-Count-Since-2013 = {{2}},
Journal-ISO = {{ACM Transact. Des. Automat. Electron. Syst.}},
Doc-Delivery-Number = {{006TK}},
Unique-ID = {{ISI:000234920000002}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000228719900008,
Author = {Hong, HS and Ural, H},
Editor = {{Grabowski, J and Nielsen, B}},
Title = {{Using model checking for reducing the cost of test generation}},
Booktitle = {{FORMAL APPROACHES TO SOFTWARE TESTING}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2005}},
Volume = {{3395}},
Pages = {{110-124}},
Note = {{4th International Workshop on Formal Approaches to Testing of Software
   (FATES 2004), Linz, AUSTRIA, SEP 21, 2004}},
Abstract = {{This paper presents a method for reducing the cost of test generation. A
   spanning set for a coverage criterion is a set of entities such that
   exercising every entity in the spanning set guarantees exercising every
   entity defined by the coverage criterion. The central notion used in
   constructing a minimum spanning set is subsumption relation. An entity
   subsumes another entity if exercising the former guarantees exercising
   the latter. We develop a method for finding subsumption relations which
   can be uniformly applied to a family of control flow and data flow
   oriented coverage criteria by reducing the problem of determining
   whether an entity subsumes another entity to the model checking problem
   of the linear temporal logic LTL.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Hong, HS (Corresponding Author), Concordia Univ, Concordia Inst Informat Syst Engn, Montreal, PQ, Canada.
   Concordia Univ, Concordia Inst Informat Syst Engn, Montreal, PQ, Canada.
   Univ Ottawa, Sch Informat Technol \& Engn, Ottawa, ON K1N 6N5, Canada.}},
ISSN = {{0302-9743}},
ISBN = {{3-540-25109-X}},
Keywords-Plus = {{TEST COVERAGE; SELECTION; PROGRAMS}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
Author-Email = {{hshong@ciise.concordia.ca
   ural@site.uottawa.ca}},
Number-of-Cited-References = {{20}},
Times-Cited = {{3}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BCD24}},
Unique-ID = {{ISI:000228719900008}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000232030700081,
Author = {He, XH and Zhen, G and Xiong, WL},
Editor = {{Wen, TD}},
Title = {{GTL-based test generation for resettable circuits}},
Booktitle = {{ISTM/2005: 6th International Symposium on Test and Measurement, Vols
   1-9, Conference Proceedings}},
Year = {{2005}},
Pages = {{308-310}},
Note = {{6th International Symposium on Test and Measurement (ISTM), Dalian,
   PEOPLES R CHINA, JUN 01-04, 2005}},
Organization = {{Chinese Soc Modern Tech Equipment; Chinese Assoc Higher Educ; CSMTE,
   Test \& Measurement Sect; Soc Instrumentat, Measurement \& Control; N
   Univ China, Key Lab Instrumentat Sci \& Dynam Measurement, Minist Educ;
   Natl Key Lab Elect Measurement Technol, Taiyuan Div; Candidate State Key
   Lab Dynam Measurement; Dalian Univ Tehnol, State Key Lab Coastal \&
   Offshore Engn; NUC, Dept Elect Sci \& Technol}},
Abstract = {{The test generation algorithm, which avoids drawbacks of conventional
   approaches, has been presented for not resettable lines using GTL(Global
   Temporal Logic). This model checking algorithm are subject to constant
   improvement so that the size of manageable circuits will future
   increased. In this paper, based on the global temporal logic that
   defined by forward and reverse operator, a common formal framework for
   test generation is presented. In addition, heuristic for accelerating
   the testing process and implementation are given.}},
Publisher = {{INTERNATIONAL ACADEMIC PUBLISHERS LTD}},
Address = {{UNIT 1205, 12 FLOOR, SINO PLAZA, 255 GLOUCESTER ROAD, HONG KONG 00000,
   CAUSEWAY BAY, PEOPLES R CHINA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{He, XH (Corresponding Author), Acad Armored Forces Engn, Dept Informat Engn, Beijing 100072, Peoples R China.
   Acad Armored Forces Engn, Dept Informat Engn, Beijing 100072, Peoples R China.}},
ISBN = {{7-5062-7445-0}},
Keywords = {{global temporal; formal fault; test generation; drawback}},
Research-Areas = {{Instruments \& Instrumentation}},
Web-of-Science-Categories  = {{Instruments \& Instrumentation}},
Number-of-Cited-References = {{3}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BCZ22}},
Unique-ID = {{ISI:000232030700081}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000233398700004,
Author = {Chauvel, F and Jezequel, JM},
Editor = {{Briand, L and Williams, C}},
Title = {{Code generation from UML models with semantic variation points}},
Booktitle = {{MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS, PROCEEDINGS}},
Series = {{LECTURE NOTES IN COMPUTER SCIENCE}},
Year = {{2005}},
Volume = {{3713}},
Pages = {{54-68}},
Note = {{8th International Conference on Model Driven Engineering Languages and
   Systems, Montego Bay, JAMAICA, OCT 02-07, 2005}},
Organization = {{ACM SIGS; IEEE Comp Soc; Microsoft Corp; IBM; Digicel Jamaica; Springer}},
Abstract = {{UML semantic variation points provide intentional degrees of freedom for
   the interpretation of the metamodel semantics. The interest of semantic
   variation points is that UML now becomes a family of languages sharing
   lot of commonalities and some variabilities that one can customize for a
   given application domain. In this paper, we propose to reify the various
   semantic variation points of UML 2.0 statecharts into models of their
   own to avoid hardcoding the semantic choices in the tools. We do the
   same for various implementation choices. Then, along the line of the
   OMG's Model Driven Architecture, these semantic and implementation
   models are processed along with a source UML model (that can be seen as
   a PIM) to provide a target UML model (a PSM) where all semantic and
   implementation choice are made explicit. This target model can in turn
   serve as a basis for a consistent use of code generation, simulation,
   model-checking or test generation tools.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Univ Rennes 1, F-35014 Rennes, France.}},
ISSN = {{0302-9743}},
ISBN = {{3-540-29010-9}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
ResearcherID-Numbers = {{Jezequel, Jean-Marc/AAF-3854-2019
   Chauvel, Franck/AAA-2719-2020}},
ORCID-Numbers = {{Jezequel, Jean-Marc/0000-0002-0582-9745
   Chauvel, Franck/0000-0002-8603-4273}},
Number-of-Cited-References = {{18}},
Times-Cited = {{17}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BDG59}},
Unique-ID = {{ISI:000233398700004}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000231586500078,
Author = {Devaraj, G and Heimdahl, MPE and Liang, DL},
Book-Group-Author = {{IEEE Comp Soc}},
Title = {{Coverage-directed test generation with model checkers: Challenges and
   opportunities}},
Booktitle = {{PROCEEDINGS OF THE 29TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND
   APPLICATIONS CONFERENCE}},
Series = {{Proceedings International Computer Software and Applications Conference}},
Year = {{2005}},
Pages = {{455-462}},
Note = {{29th Annual International Computer Software and Applications Conference,
   Edinburgh, SCOTLAND, JUL 26-28, 2005}},
Organization = {{IEEE Comp Soc}},
Abstract = {{When using tools to automatically generate tests-suites from a
   specification, the selection of coverage criterion that guides the
   generation process is of imperative importance. In a previous study that
   evaluated test generation with model checking, we observed that although
   a coverage criterion may seem reasonable when instrumenting a model or
   code to measure the adequacy of a test suite, it may be unsuitable when
   formalized and used to guide the model checker to generate a test suite;
   the generated tests technically provide adequate coverage according to
   the formalization, but do so in a way that exercises only small portions
   of the system under study and finds few faults. Based on those results,
   we concluded that fully automated test-suite generation techniques must
   be pursued with great caution and that coverage criteria specifically
   addressing test-suite generation from formal specifications are needed
   In this report, we attempt to better understand these concerns by
   evaluating several coverage criteria that bring together aspects from
   condition and control based criteria. We evaluate the fault finding
   capability of the criteria on a close to production flight guidance
   system and discuss the opportunities and challenges that arise from the
   increased use of fully automated model-based testing.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Devaraj, G (Corresponding Author), Univ Minnesota, Software Engn Ctr, Dept Comp Sci \& Engn, Minneapolis, MN 55455 USA.
   Univ Minnesota, Software Engn Ctr, Dept Comp Sci \& Engn, Minneapolis, MN 55455 USA.}},
ISSN = {{0730-3157}},
ISBN = {{0-7695-2413-3}},
Keywords-Plus = {{CHECKING}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
Author-Email = {{devaraj@cs.umn.edu
   heimdahl@cs.umn.edu
   dliang@cs.umn.edu}},
Number-of-Cited-References = {{18}},
Times-Cited = {{5}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BCW71}},
Unique-ID = {{ISI:000231586500078}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000230063500003,
Author = {Hong, HS and Ural, H},
Editor = {{Khendek, F and Dssouli, R}},
Title = {{Dependence testing: Extending data flow testing with control dependence}},
Booktitle = {{TESTING OF COMMUNICATING SYSTEMS, PROCEEDINGS}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2005}},
Volume = {{3502}},
Pages = {{23-39}},
Note = {{17th International Conference on Testing of Communicating Systems,
   Montreal, CANADA, MAY 31-JUN 02, 2005}},
Organization = {{IFIP TC6 Working Grp 6 1}},
Abstract = {{This paper presents a new approach to structural testing, called
   dependence testing. First we propose dependence oriented coverage
   criteria that extend conventional data flow oriented coverage criteria
   with control dependence. This allows one to capture the full dependence
   information of a program or specification systematically. We then
   describe a model checking-based approach to test generation for
   dependence testing. It is shown that dependence oriented coverage
   criteria can be characterized in the temporal logics LTL and CTL. This
   enables one to use any LTL and CTL model checkers as test generators.
   Finally, we show that the temporal logic-based characterization can also
   be used for reducing the cost of dependence testing.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Univ Ottawa, Sch Informat Technol \& Engn, Ottawa, ON, Canada.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{3-540-26054-4}},
Keywords-Plus = {{TEST COVERAGE; TEST-GENERATION; MODEL; SELECTION}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
Author-Email = {{hshong@ciise.concordia.ca
   ural@site.uottawa.ca}},
Number-of-Cited-References = {{34}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BCM86}},
Unique-ID = {{ISI:000230063500003}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000221356700041,
Author = {Smith, A and Veneris, A and Viglas, A},
Book-Group-Author = {{IEEE
   IEEE}},
Title = {{Design diagnosis using Boolean satisfiability}},
Booktitle = {{ASP-DAC 2004: PROCEEDINGS OF THE ASIA AND SOUTH PACIFIC DESIGN
   AUTOMATION CONFERENCE}},
Series = {{Asia and South Pacific Design Automation Conference Proceedings}},
Year = {{2004}},
Pages = {{218-223}},
Note = {{Asia and South Pacific Design Automation Conference, Yokohama, JAPAN,
   JAN 27-30, 2004}},
Organization = {{IEEE Circuits \& Syst Soc; ACM SIGDA; IEICE; Informat Proc Soc Japan;
   Japan Inst Elect Packaging}},
Abstract = {{Recent advances in Boolean satisfiability have made it an attractive
   engine for solving many digital VLSI design problems such as
   verification, model checking, optimization and test generation. Fault
   diagnosis and logic debugging have not been addressed by existing
   satisfiability-based solutions. This paper attempts to bridge this gap
   by proposing a satisfiability-based solution to these problems. The
   proposed formulation is intuitive and easy to implement. It shows that
   satisfiability captures significant problem characteristics and it
   offers different trade-offs. It also provides new opportunities for
   satisfiability-based diagnosis tools and diagnosis-specific
   satisfiability algorithms. Theory and experiments validate the claims
   and demonstrate its potential.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Smith, A (Corresponding Author), Univ Toronto, Dept ECE, Toronto, ON M5S 3G4, Canada.
   Univ Toronto, Dept ECE, Toronto, ON M5S 3G4, Canada.}},
DOI = {{10.1109/ASPDAC.2004.1337569}},
ISSN = {{2153-6961}},
ISBN = {{0-7803-8175-0}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Computer Science, Theory \&
   Methods; Engineering, Electrical \& Electronic}},
Author-Email = {{smith@eecg.toronto.edu
   veneris@eecg.toronto.edu
   aviglas@cs.toronto.edu}},
Number-of-Cited-References = {{14}},
Times-Cited = {{47}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BAA62}},
Unique-ID = {{ISI:000221356700041}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000189417600004,
Author = {Heimdahl, MPE and Rayadurgam, S and Visser, W and Devaraj, G and Gao, JM},
Editor = {{Petrenko, A and Ulrich, A}},
Title = {{Auto-generating test sequences using model checkers: A case study}},
Booktitle = {{FORMAL APPROACHES TO SOFTWARE TESTING}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2004}},
Volume = {{2931}},
Pages = {{42-59}},
Note = {{3rd International Workshop on Formal Approaches to Testing of Software
   (FATES 2003), Montreal, CANADA, OCT 06, 2003}},
Abstract = {{Use of model-checking approaches for test generation from requirement
   models have been proposed by several researchers. These approaches
   leverage the witness (or counter-example) generation capability of
   model-checkers for constructing test cases. Test criteria are expressed
   as temporal properties. Witness traces generated for these properties
   are instantiated to create complete test sequences, satisfying the
   criteria. State-space explosion can, however, adversely impact
   model-checking and hence such test generation. Thus, there is a need to
   validate these approaches against realistic industrial sized system
   models to learn how well these approaches scale. To this end, we
   conducted a case study using six models of progressively increasing
   complexity of the mode-logic in a flight-guidance system, written in the
   RSML-e language. We developed a framework for specification-based test
   generation using the NuSMV model-checker and code based test case
   generation using Java Pathfinder, and collected time and resource usage
   data for generating test cases using symbolic, bounded, and explicit
   state model-checking algorithms. This paper briefly discusses the
   approach, presents the results from the study and analyzes its
   implications.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Heimdahl, MPE (Corresponding Author), Univ Minnesota, Dept Comp Sci \& Engn, Minneapolis, MN 55455 USA.
   Univ Minnesota, Dept Comp Sci \& Engn, Minneapolis, MN 55455 USA.
   NASA, Ames Res Ctr, Moffett Field, CA 94035 USA.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{3-540-20894-1}},
Keywords-Plus = {{SPECIFICATION}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
Author-Email = {{heimdahl@cs.umn.edu
   rsanjai@cs.umn.edu
   wvisser@nasa.arc.gov
   devaraj@cs.umn.edu
   jgao@cs.umn.edu}},
ResearcherID-Numbers = {{Heimdahl, Mats/A-6722-2008}},
Number-of-Cited-References = {{24}},
Times-Cited = {{19}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BY59V}},
Unique-ID = {{ISI:000189417600004}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000224667400011,
Author = {Godskesen, JC and Nielsen, B and Skou, A},
Editor = {{FrutosEscrig, D and Nunez, M}},
Title = {{Connectivity testing through model-checking}},
Booktitle = {{FORMAL TECHNIQUES FOR NETWORKED AND DISTRIBUTED SYSTEMS - FORTE 2004,
   PROCEEDINGS}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2004}},
Volume = {{3235}},
Pages = {{167-184}},
Note = {{24th International Conference on Formal Techniques for Networked and
   Distributed Systems, Madrid, SPAIN, SEP 27-30, 2004}},
Organization = {{IFIP WG6 1; Univ Complutense Madrid; Univ Castilla Mancha; Int Federat
   Informat Proc; Minist Educ Ciencia; Junta Comunidades Castilla, La
   Mancha; Ayuntamiento Madrid; Comunidad Autonoma Madrid, Fac Informat}},
Abstract = {{In this paper we show how to automatically generate test sequences that
   are aimed at testing the interconnections of embedded and communicating
   systems. Our proposal is based on the connectivity fault model proposed
   by {[}8], where faults may occur in the interface between the software
   and its environment rather than in the software implementation.
   We show that the test generation task can be carried out by solving a
   reachability problem in a system consisting essentially of a
   specification of the communicating system and its fault model. Our
   technique can be applied using most off-the-shelf model-checking tools
   to synthesize minimal test sequences, and we demonstrate it using the
   UppAal realtime model-checker.
   We present two algorithms for generating minimal tests: one for single
   faults and one for multiple faults, Moreover, we demonstrate how to
   exploit the unique time- and cost-planning-facilities of UppAal to
   derive cheapest possible test suites for restricted types of timed
   systems.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Godskesen, JC (Corresponding Author), Aalborg Univ, Ctr Embedded Software Syst, Fredrik Bajersvej 7B, DK-9220 Aalborg, Denmark.
   Aalborg Univ, Ctr Embedded Software Syst, DK-9220 Aalborg, Denmark.
   Univ Copenhagen, IT, DK-2400 Copenhagen NV, Denmark.}},
ISSN = {{0302-9743}},
EISSN = {{1611-3349}},
ISBN = {{3-540-23252-4}},
Keywords-Plus = {{TIMED AUTOMATA}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Theory \& Methods}},
Author-Email = {{jcg@cs.auc.dk
   bnielsen@cs.auc.dk
   ask@cs.auc.dk}},
ResearcherID-Numbers = {{Skou, Arne J/J-3659-2017}},
Number-of-Cited-References = {{15}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BBC03}},
Unique-ID = {{ISI:000224667400011}},
OA = {{Bronze}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000222969700028,
Author = {Beyer, D and Henzinger, TA and Jhala, R and Majumdar, R},
Book-Group-Author = {{ieee computer society}},
Title = {{An eclipse plug-in for model checking}},
Booktitle = {{IWPC 2004: 12TH IEEE INTERNATIONAL WORKSHOP ON PROGRAM COMPREHENSION,
   PROCEEDINGS}},
Series = {{INTERNATIONAL WORKSHOP ON PROGRAM COMPREHENSION}},
Year = {{2004}},
Pages = {{251-255}},
Note = {{12th International Workshop on Program Comprehension (IWPC 2004),
   Dipartimento Informat, Bari, ITALY, JUN 24-26, 2004}},
Organization = {{IEEE Comp Soc; IEEE; ABACO; CERIT; EDS; ORACLE; SAP; 01MEDIA}},
Abstract = {{While model checking has been successful in uncovering subtle bugs in
   code, its adoption in software engineering practice has been hampered by
   the absence of a simple interface to the programmer in an integrated
   development environment. We describe an integration of the software
   model checker BLAST into the Eclipse development environment. We provide
   a verification interface for practical solutions for some typical
   program analysis problems - assertion checking, reachability analysis,
   dead code analysis, and test generation - directly on the source code.
   The analysis is completely automatic, and assumes no knowledge of model
   checking or formal notation. Moreover the interface supports incremental
   program verification to support incremental design and evolution of
   code.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Beyer, D (Corresponding Author), Univ Calif Berkeley, Berkeley, CA 94720 USA.
   Univ Calif Berkeley, Berkeley, CA 94720 USA.}},
DOI = {{10.1109/WPC.2004.1311069}},
ISSN = {{1092-8138}},
ISBN = {{0-7695-2149-5}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering}},
ResearcherID-Numbers = {{Beyer, Dirk/R-2534-2017}},
ORCID-Numbers = {{Beyer, Dirk/0000-0003-4832-7662}},
Number-of-Cited-References = {{8}},
Times-Cited = {{6}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BAN46}},
Unique-ID = {{ISI:000222969700028}},
DA = {{2020-08-28}},
}

@article{ ISI_000185499100003,
Author = {Jard, C},
Title = {{Synthesis of distributed testers from true-concurrency models of
   reactive systems}},
Journal = {{INFORMATION AND SOFTWARE TECHNOLOGY}},
Year = {{2003}},
Volume = {{45}},
Number = {{12}},
Pages = {{805-814}},
Month = {{SEP 15}},
Note = {{Concordia Prestigious Workshop on Communications Software Engineering,
   MONTREAL, CANADA, SEP 11-12, 2001}},
Abstract = {{Automatic synthesis of test cases for conformance testing has been
   principally developed with the objective of generating sequential test
   cases. In the distributed system context, it is worth extending the
   synthesis techniques to the generation of multiple testers. We base our
   work on our experience in using model-checking techniques, as
   successfully implemented in the Test Generation using the Verification
   tool. Continuing the works of Ulrich and Konig, we propose to use a
   true-concurrency model based on graph unfolding. The article presents
   the principles of a complete chain of synthesis, starting from the
   definition of test purposes and ending with a projection onto a set of
   testers. (C) 2003 Elsevier B.V. All rights reserved.}},
Publisher = {{ELSEVIER}},
Address = {{RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Jard, C (Corresponding Author), CNRS, IRISA, Campus Beaulieu, F-35042 Rennes, France.
   CNRS, IRISA, F-35042 Rennes, France.}},
DOI = {{10.1016/S0950-5849(03)00061-2}},
ISSN = {{0950-5849}},
EISSN = {{1873-6025}},
Keywords = {{testing; distributed systems; synthesis; true-concurrency models;
   interoperability}},
Keywords-Plus = {{TEST-GENERATION}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems; Computer Science, Software
   Engineering}},
Author-Email = {{claude.jard@irisa.fr}},
Number-of-Cited-References = {{28}},
Times-Cited = {{8}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Journal-ISO = {{Inf. Softw. Technol.}},
Doc-Delivery-Number = {{724QW}},
Unique-ID = {{ISI:000185499100003}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000183140900021,
Author = {Hong, HS and Cha, SD and Lee, I and Sokolsky, O and Ural, H},
Book-Group-Author = {{IEEE COMPUTER SOCIETY
   IEEE COMPUTER SOCIETY}},
Title = {{Data flow testing as model checking}},
Booktitle = {{25TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, PROCEEDINGS}},
Series = {{International Conference on Software Engineering}},
Year = {{2003}},
Pages = {{232-242}},
Note = {{25th International Conference on Software Engineering (ICSE 2003),
   PORTLAND, OR, MAY 03-10, 2003}},
Organization = {{IEEE; IEEE Comp Soc, Tech Council Software Engn; ACM; ACM SIGSOFT; IBM;
   NORTHROP GRUMMAN Space Technol; BMW; NOKIA; SUN Microsyst;
   DaimlerChrysler; Microsoft Res}},
Abstract = {{This paper presents a model checking-based approach to data flow
   testing. We characterize data flow oriented coverage criteria in
   temporal logic such that the problem of test generation is reduced to
   the problem of finding witnesses for a set of temporal logic formulas.
   The capability of model checkers to construct witnesses and
   counterexamples allows test generation to be fully automatic. We discuss
   complexity issues in minimal cost test generation and describe heurstic
   test generation algorithms. We illustrate our approach using CTL as
   temporal logic and SMV as model checker.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Hong, HS (Corresponding Author), Korea Adv Inst Sci \& Technol, Dept Elect Engn \& Comp Sci, Seoul, South Korea.
   Korea Adv Inst Sci \& Technol, Dept Elect Engn \& Comp Sci, Seoul, South Korea.}},
ISSN = {{0270-5257}},
ISBN = {{0-7695-1877-X}},
Keywords-Plus = {{SEQUENCE SELECTION METHOD; TEST-GENERATION; MU-CALCULUS; SPECIFICATIONS;
   CRITERIA}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Engineering, Electrical \&
   Electronic}},
Author-Email = {{hshong@salmosa.kaist.ac.kr
   cha@salmosa.kaist.ac.kr
   lee@saul.cis.upenn.edu
   sokolsky@saul.cis.upenn.edu
   ural@site.uottawa.ca}},
Number-of-Cited-References = {{32}},
Times-Cited = {{48}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BW77V}},
Unique-ID = {{ISI:000183140900021}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000184044400022,
Author = {Pyhala, T and Heljanko, K},
Editor = {{Lilius, J and Balarin, F and Machado, RJ}},
Title = {{Specification coverage aided test selection}},
Booktitle = {{THIRD INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM
   DESIGN, PROCEEDINGS}},
Year = {{2003}},
Pages = {{187-195}},
Note = {{3rd International Conference on Application of Concurrency to System
   Design, Guimaraes, PORTUGAL, JUN 18-20, 2003}},
Organization = {{IFIP WG10 5 \& SIG ES; Colegio Engenharia Informat Ordem Engenheiros
   Portuguesa; Formal Methods Europe; ACM SIGSOFT; ACM SIGDA; European
   Union Asynchronous Circuit Design Working Grp}},
Abstract = {{In this paper test selection strategies informal conformance testing are
   considered As the testing conformance relation we use the ioco relation,
   and extend the previously presented on-the-fly test generation
   algorithms for ioco to include test selection heuristic based on a
   specification coverage metric. The proposed method combines a greedy
   test selection with randomization to guarantee completeness. As a novel
   implementation technique we employ bounded model checking for lookahead
   in greedy test selection.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Pyhala, T (Corresponding Author), Aalto Univ, Lab Theoret Comp Sci, POB 5400, FIN-02015 Helsinki, Finland.
   Aalto Univ, Lab Theoret Comp Sci, FIN-02015 Helsinki, Finland.}},
DOI = {{10.1109/CSD.2003.1207713}},
ISBN = {{0-7695-1887-7}},
Keywords-Plus = {{GENERATION}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Engineering, Electrical \&
   Electronic}},
Author-Email = {{Tuomo.Pyhala@hut.fi
   Keijo.Heljanko@hut.fi}},
ResearcherID-Numbers = {{Heljanko, Keijo/C-7603-2011}},
ORCID-Numbers = {{Heljanko, Keijo/0000-0002-4547-2701}},
Number-of-Cited-References = {{17}},
Times-Cited = {{5}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BX04G}},
Unique-ID = {{ISI:000184044400022}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000181139900022,
Author = {Hong, HS and Lee, I and Sokolsky, O and Ural, H},
Editor = {{Katoen, JP and Stevens, P}},
Title = {{A temporal logic based theory of test coverage and generation}},
Booktitle = {{TOOLS AND ALGORITHMS FOR THE CONSTRUCTION AND ANAYLSIS OF SYSTEMS,
   PROCEEDINGS}},
Series = {{Lecture Notes in Computer Science}},
Year = {{2002}},
Volume = {{2280}},
Pages = {{327-341}},
Note = {{8th International Conference on Tools and Algorithms for the
   Construction and Analysis of Systems (TACAS 2002), GRENOBLE, FRANCE, APR
   08-12, 2002}},
Organization = {{Lab Verimag}},
Abstract = {{This paper presents a theory of test coverage and generation from
   specifications written in EFSMs. We investigate a family of coverage
   criteria based on the information of control flow and data flow and
   characterize them in the branching time temporal logic CTL. We discuss
   the complexity of minimal cost test generation and describe a method for
   automatic test generation which employs the capability of model checkers
   to construct counterexamples. Our approach extends the range of
   applications of model checking from formal verification of finite state
   systems to test generation from finite state systems.}},
Publisher = {{SPRINGER-VERLAG BERLIN}},
Address = {{HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY}},
Type = {{Article; Proceedings Paper}},
Language = {{English}},
Affiliation = {{Hong, HS (Corresponding Author), Univ Penn, Dept Informat \& Comp Sci, Philadelphia, PA 19104 USA.
   Univ Penn, Dept Informat \& Comp Sci, Philadelphia, PA 19104 USA.
   Univ Ottawa, Sch Informat Technol \& Engn, Ottawa, ON K1N 6N5, Canada.}},
ISSN = {{0302-9743}},
ISBN = {{3-540-43419-4}},
Keywords-Plus = {{MODEL CHECKING; SPECIFICATIONS; SYSTEMS}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
Number-of-Cited-References = {{24}},
Times-Cited = {{52}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BW19F}},
Unique-ID = {{ISI:000181139900022}},
OA = {{Bronze}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000171225800112,
Author = {Dushina, J and Benjamin, M and Geist, D},
Book-Group-Author = {{ACM
   ACM
   ACM}},
Title = {{Semi-formal test generation with Genevieve}},
Booktitle = {{38TH DESIGN AUTOMATION CONFERENCE PROCEEDINGS 2001}},
Series = {{DESIGN AUTOMATION CONFERENCE}},
Year = {{2001}},
Pages = {{617-622}},
Note = {{38th Design Automation Conference (DAC), LAS VEGAS, NV, JUN 18-22, 2001}},
Organization = {{ACM; SIGDA; EDA Consortium; IEEE Circuits \& Syst Soc}},
Abstract = {{This paper describes the first application of the Genevieve test
   generation methodology. The Genevieve approach uses semi-formal
   techniques derived from ``model-checking{''} to generate test suites for
   specific behaviours of the design under test. An ``interesting{''}
   behaviour is claimed to be unreachable. If a path from an initial state
   to the state of interest does exist, a counter-example is generated. The
   sequence of states specifies a test for the desired behaviour. To
   highlight real problems that could appear during test generation, we
   chose the Store Data Unit (SDU) of the ST100, a new high performance
   digital signal processor (DSP) developed by STMi-croelectronics. This
   unit is specifically selected because of the following key issues:
   1. big data structures that can not be directly modelled without state
   explosion,
   2. complex control logic that would require an excessive number of tests
   to exercise exhaustively,
   3. a design where it is difficult to determine how to drive the complete
   system to ensure a given behaviour in the unit under test.
   The Genvieve methodology allowed us to define a coverage model
   specifically devoted to covering corner cases of the design. Hence the
   generated test suite achieved very efficient coverage of corner cases,
   and checked not only functional correctness but also whether the
   implementation matched design intent. As a result the Genevieve tests
   discovered some subtle performance bugs which would otherwise be very
   difficult to find.}},
Publisher = {{ASSOC COMPUTING MACHINERY}},
Address = {{1515 BROADWAY, NEW YORK, NY 10036-9998 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Dushina, J (Corresponding Author), STMicroelectronics, 1000 Aztec W, Bristol BS32 4SQ, Avon, England.
   STMicroelectronics, Bristol BS32 4SQ, Avon, England.}},
ISSN = {{0738-100X}},
ISBN = {{1-58113-297-2}},
Research-Areas = {{Computer Science; Engineering}},
Web-of-Science-Categories  = {{Computer Science, Hardware \& Architecture; Engineering, Manufacturing;
   Engineering, Electrical \& Electronic}},
Number-of-Cited-References = {{5}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BS85F}},
Unique-ID = {{ISI:000171225800112}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000171525900007,
Author = {Liu, W and Dasiewicz, P},
Editor = {{Dunne, S}},
Title = {{Component interaction testing using model-checking}},
Booktitle = {{CANADIAN CONFERENCE ON ELECTRICAL AND COMPUTER ENGINEERING 2001, VOLS I
   AND II, CONFERENCE PROCEEDINGS}},
Year = {{2001}},
Pages = {{41-46}},
Note = {{Canadian Conference on Electrical and Computer Engineering, TORONTO,
   CANADA, MAY 13-16, 2001}},
Organization = {{IEEE Canada; Gen Elect Co; Gennum Corp; Sympatico; Bell Nexxia}},
Abstract = {{The Component Interaction Testing project uses model-checking technology
   to generate test cases from formal models. To model component
   interactions, we develop an object-oriented modelling language with
   formal semantics suitable for defining interaction coverage criteria. To
   analyze the large models of software components, we develop new
   algorithms for test generation that can analyze much larger models than
   previously possible. We have shown the feasibility of interaction test
   generation by an. experiment on a design of a realistic real-time
   system. Using the modelling language, a detailed formal model was simple
   to create. The model is far beyond the capability of standard
   algorithms, but, using the new algorithms, Useful subsets of the model
   can be analyzed.}},
Publisher = {{IEEE}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Liu, W (Corresponding Author), Univ Waterloo, Dept Elect \& Comp Engn, Waterloo, ON N2L 3G1, Canada.
   Univ Waterloo, Dept Elect \& Comp Engn, Waterloo, ON N2L 3G1, Canada.}},
ISBN = {{0-7803-6715-4}},
Research-Areas = {{Computer Science; Engineering; Imaging Science \& Photographic
   Technology; Telecommunications}},
Web-of-Science-Categories  = {{Computer Science, Artificial Intelligence; Engineering, Electrical \&
   Electronic; Imaging Science \& Photographic Technology;
   Telecommunications}},
Number-of-Cited-References = {{11}},
Times-Cited = {{2}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BS96U}},
Unique-ID = {{ISI:000171525900007}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000171905000125,
Author = {He, XH and Li, ZM and Su, XY and Wang, WF},
Editor = {{Wen, TD}},
Title = {{GTL-based test generation for digital circuits}},
Booktitle = {{ISTM/2001: 4TH INTERNATIONAL SYMPOSIUM ON TEST AND MEASUREMENT, VOLS 1
   AND 2, CONFERENCE PROCEEDINGS}},
Year = {{2001}},
Pages = {{469-471}},
Note = {{4th International Symposium on Test and Measurement (ISMT), SHANGHAI,
   PEOPLES R CHINA, JUN 01-03, 2001}},
Organization = {{Chinese Soc Modern Tech Equipment}},
Abstract = {{The algorithm, which avoids drawbacks of conventional approaches, has
   been presented for not resetable lines using GTL(Global Temporal Logic).
   This model checking algorithm are subject to constant improvement so
   that the size of manageable circuits will future increased. In this
   paper, based on the global temporal logic that defined by forward and
   reverse operator, a common formal framework for test generation is
   presented In addition, heuristic for accelerating the testing process
   and implementation are given.}},
Publisher = {{BEIJING WORLD PUBL CORP, INT ACAD PUBL}},
Address = {{137 CHAONEI DAJIE, BEIJING 100010, PEOPLES R CHINA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{He, XH (Corresponding Author), Armored Force Engn Inst, Dept Informat, Beijing 100072, Peoples R China.
   Armored Force Engn Inst, Dept Informat, Beijing 100072, Peoples R China.}},
ISBN = {{7-5062-4976-6}},
Keywords = {{Temporal Logic; state fault test generation}},
Research-Areas = {{Computer Science; Engineering; Instruments \& Instrumentation; Optics}},
Web-of-Science-Categories  = {{Computer Science, Artificial Intelligence; Engineering, Electrical \&
   Electronic; Instruments \& Instrumentation; Optics}},
Number-of-Cited-References = {{3}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BT08M}},
Unique-ID = {{ISI:000171905000125}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_000073665200007,
Author = {Jeron, T and Jezequel, JM and Le Guennec, A},
Editor = {{Kramer, B and Uchihira, N and Croll, P and Russo, S}},
Title = {{Validation and test generation for object-oriented distributed software}},
Booktitle = {{SOFTWARE ENGINEERING FOR PARALLEL AND DISTRIBUTED SYSTEMS -
   INTERNATIONAL SYMPOSIUM PROCEEDINGS}},
Year = {{1998}},
Pages = {{51-60}},
Note = {{International Symposium on Software Engineering for Parallel and
   Distributed Systems, KYOTO, JAPAN, APR 20-21, 1998}},
Abstract = {{The development of correct OO distributed software is a daunting task as
   soon as the distributed interactions are not trivial. This is due to the
   inherent complexity of distributed systems (latency, error recovery,
   etc.), leading to numerous problems such as deadlocks, race conditions,
   and many difficulties in trying to detect and reproduce such error
   conditions and debug them. The OO technology is ill-equipped to deal
   with this dimension of the problem. On the other hand, the willingness
   of mastering this complexity in the context of telecommunication
   protocols gave birth to specific formal verification and validation
   tools. The aim of this paper is to explore how the underlying technology
   of these tools could be made available to the designer of OO distributed
   software. We propose a framework allowing the integration of formal
   verification and validation technology in a seamless OO life-cycle based
   on UML, the Unified Modeling Language. From a UML model, this framework
   would allow to conduct model checking activities as well as random
   simulation and automatic test generation.}},
Publisher = {{IEEE COMPUTER SOC}},
Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Jeron, T (Corresponding Author), Inst Rech Informat \& Syst Aleatoires, CNRS, Campus Beaulieu, F-35042 Rennes, France.
   Inst Rech Informat \& Syst Aleatoires, CNRS, F-35042 Rennes, France.}},
DOI = {{10.1109/PDSE.1998.668156}},
ISBN = {{0-8186-8467-4}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Software Engineering; Computer Science, Theory \&
   Methods}},
ResearcherID-Numbers = {{Jezequel, Jean-Marc/AAF-3854-2019}},
ORCID-Numbers = {{Jezequel, Jean-Marc/0000-0002-0582-9745}},
Number-of-Cited-References = {{0}},
Times-Cited = {{1}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{1}},
Doc-Delivery-Number = {{BK85H}},
Unique-ID = {{ISI:000073665200007}},
OA = {{Green Published}},
DA = {{2020-08-28}},
}

@inproceedings{ ISI_A1997BJ29D00017,
Author = {Kuhn, DR},
Book-Group-Author = {{IEEE}},
Title = {{Evolving directions in formal methods}},
Booktitle = {{COMPASS `97 - ARE WE MAKING PROGRESS TOWARDS COMPUTER ASSURANCE?}},
Year = {{1997}},
Pages = {{127-128}},
Note = {{12th Annual Conference on Computer Assurance (COMPASS 97) - Are We
   Making Progress Towards Computer Assurance, NIST, GAITHERSBURG, MD, JUN
   16-19, 1997}},
Organization = {{IEEE Natl Capital Area Council; IEEE Aerosp \& Electr Syst Soc; Arca
   Syst Inc; BDM; City Univ London; Comp Associates; FDA; IEEE;
   Intermetrics Inc; Logicon Inc; Mitretek; Mitre Corp; NIST; USN, Naval
   Res Lab; Reliable Software Technol Corp; TRW Govt Informat Serv Div;
   Trusted Informat Syst; TRW GISD; Univ Illinois Springfield}},
Abstract = {{Formal methods have demonstrated their effectiveness in a number of
   application areas, but are still not widely used in the computing
   industry. Advances in theorem proving tools, particularly those
   combining model checking with traditional interactive proof techniques
   are reducing the cost of formal techniques. Although traditionally used
   for analyzing the correctness of specifications against requirements
   (and to a lesser extent the correctness of source code), formal methods
   can help reduce the cost of test generation, making formal methods more
   cost effective.}},
Publisher = {{I E E E}},
Address = {{345 E 47TH ST, NEW YORK, NY 10017}},
Type = {{Proceedings Paper}},
Language = {{English}},
Affiliation = {{Kuhn, DR (Corresponding Author), NATL INST STAND \& TECHNOL,GAITHERSBURG,MD 20899, USA.}},
ISBN = {{0-7803-3980-0}},
Research-Areas = {{Computer Science}},
Web-of-Science-Categories  = {{Computer Science, Information Systems; Computer Science, Software
   Engineering; Computer Science, Theory \& Methods}},
Number-of-Cited-References = {{0}},
Times-Cited = {{0}},
Usage-Count-Last-180-days = {{0}},
Usage-Count-Since-2013 = {{0}},
Doc-Delivery-Number = {{BJ29D}},
Unique-ID = {{ISI:A1997BJ29D00017}},
DA = {{2020-08-28}},
}

@article{amazon,
 author = {Newcombe, Chris and Rath, Tim and Zhang, Fan and Munteanu, Bogdan and Brooker, Marc and Deardeuff, Michael},
 title = {How Amazon Web Services Uses Formal Methods},
 journal = {Commun. ACM},
 issue_date = {April 2015},
 volume = {58},
 number = {4},
 month = mar,
 year = {2015},
 issn = {0001-0782},
 pages = {66--73},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/2699417},
 doi = {10.1145/2699417},
 acmid = {2699417},
 publisher = {ACM},
 address = {New York, NY, USA}
}

@Book{specifying-systems,
author = {Lamport, Leslie},
title = {Specifying Systems: The TLA+ Language and Tools for Hardware and Software Engineers},
year = {2002},
month = {June},
abstract = {The complete book of TLA+. The first seven chapters (83 pages) are a rewritten version of [127]. That and the chapter on the TLC model checker are about as much of the book as I expect people to read. The web page contains errata and some exercises and examples. This book will teach you how to write specifications of computer systems, using the language TLA+. It's rather long, but most people will read only Part I, which comprises the first 83 pages. That part contains all that most engineers need to know about writing specifications; it assumes only the basic background in computing and knowledge of mathematics expected of an undergraduate studying engineering or computer science. Part II contains more advanced material for more sophisticated readers. The remainder of the book is a reference manual| Part III for the TLA+ tools and Part IV for the language itself. Errata to Specifying Systems},
publisher = {Addison-Wesley},
address = {Boston},
url = {https://www.microsoft.com/en-us/research/publication/specifying-systems-the-tla-language-and-tools-for-hardware-and-software-engineers/},
urlaccessdate = {24 fev. 2024},
keywords = {main}
}

@online{hyperbook,
  author = {Leslie Lamport},
  title = {The TLA Hyperbook},
  year = 2015,
  url = {http://lamport.azurewebsites.net/tla/hyperbook.html},
  urlaccessdate = {25 mai. 2019}
}

@inproceedings{pluscal,
  author    = {Leslie Lamport},
  title     = {The PlusCal Algorithm Language},
  booktitle = {Theoretical Aspects of Computing - {ICTAC} 2009, 6th International
               Colloquium, Kuala Lumpur, Malaysia, August 16-20, 2009. Proceedings},
  pages     = {36--60},
  year      = {2009},
  url       = {https://doi.org/10.1007/978-3-642-03466-4\_2},
  doi       = {10.1007/978-3-642-03466-4\_2},
  timestamp = {Tue, 14 May 2019 10:00:38 +0200},
  biburl    = {https://dblp.org/rec/bib/conf/ictac/Lamport09},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{tlaformalization,
  author    = {Leslie Lamport},
  title     = {The Temporal Logic of Actions},
  journal   = {{ACM} Trans. Program. Lang. Syst.},
  volume    = {16},
  number    = {3},
  pages     = {872--923},
  year      = {1994}
}

@article{merzlogic,
  author = {Merz, Stephan},
  year = {2003},
  month = {01},
  pages = {351-379},
  title = {On the logic of TLA+},
  volume = {22},
  journal = {Computers and Artificial Intelligence}
}

@inproceedings{proofsystem,
  author    = {Kaustuv Chaudhuri and
               Damien Doligez and
               Leslie Lamport and
               Stephan Merz},
  title     = {A {TLA+} Proof System},
  booktitle = {{LPAR} Workshops},
  series    = {{CEUR} Workshop Proceedings},
  volume    = {418},
  publisher = {CEUR-WS.org},
  year      = {2008}
}

@article{picalculus,
title = "A calculus of mobile processes, I",
journal = "Information and Computation",
volume = "100",
number = "1",
pages = "1 - 40",
year = "1992",
issn = "0890-5401",
doi = "https://doi.org/10.1016/0890-5401(92)90008-4",
url = "http://www.sciencedirect.com/science/article/pii/0890540192900084",
author = "Robin Milner and Joachim Parrow and David Walker",
abstract = "We present the π-calculus, a calculus of communicating systems in which one can naturally express processes which have changing structure. Not only may the component agents of a system be arbitrarily linked, but a communication between neighbours may carry information which changes that linkage. The calculus is an extension of the process algebra CCS, following work by Engberg and Nielsen, who added mobility to CCS while preserving its algebraic properties. The π-calculus gains simplicity by removing all distinction between variables and constants; communication links are identified by names, and computation is represented purely as the communication of names across links. After an illustrated description of how the π-calculus generalises conventional process algebras in treating mobility, several examples exploiting mobility are given in some detail. The important examples are the encoding into the π-calculus of higher-order functions (the λ-calculus and combinatory algebra), the transmission of processes as values, and the representation of data structures as processes. The paper continues by presenting the algebraic theory of strong bisimilarity and strong equivalence, including a new notion of equivalence indexed by distinctions—i.e., assumptions of inequality among names. These theories are based upon a semantics in terms of a labeled transition system and a notion of strong bisimulation, both of which are expounded in detail in a companion paper. We also report briefly on work-in-progress based upon the corresponding notion of weak bisimulation, in which internal actions cannot be observed."
}

@inproceedings{petri,
  author    = {C. A. Petri},
  title     = {Fundamentals of a Theory of Asynchronous Information Flow},
  booktitle = {{IFIP} Congress},
  pages     = {386--390},
  year      = {1962}
}

@article{first-lamport,
  author    = {Leslie Lamport},
  title     = {Specifying Concurrent Program Modules},
  journal   = {{ACM} Trans. Program. Lang. Syst.},
  volume    = {5},
  number    = {2},
  pages     = {190--222},
  year      = {1983}
}

@online{video-protocol,
  author = {Leslie Lamport},
  title = {TLA+ Video Curse},
  year = 2017,
  url = {http://lamport.azurewebsites.net/video/videos.html},
  urlaccessdate = {15 jun. 2019},
}

@article{pumps,
  title =        "Design, optimization, and deployment of a waterworks pumping
                  station control system",
  journal =      "ISA Transactions",
  volume =       "51",
  number =       "4",
  pages =        "539 - 549",
  year =         "2012",
  issn =         "0019-0578",
  doi =          "https://doi.org/10.1016/j.isatra.2012.03.002",
  url =
                  "http://www.sciencedirect.com/science/article/pii/S0019057812000316",
  author =       "Dariusz Borkowski and Andrzej Wetula and Andrzej Bień",
}

@article{state-requirements,
author = {Heimdahl, Mats and Keenan, David},
year = {1999},
month = {12},
pages = {},
title = {Generating Code from Hierarchical State-Based Requirements}
}

@article{signal-openmp,
author = {Hu, Kai and Zhang, Teng and Yang, Zhibin},
year = {2013},
month = {10},
pages = {617-626},
title = {Multi-threaded code generation from SIGNAL program to OpenMP},
volume = {7},
journal = {Frontiers of Computer Science},
doi = {10.1007/s11704-013-3906-4}
}

@article{event-b,
author = {Cataño, Néstor},
year = {2015},
month = {01},
pages = {},
title = {Code Generation for Event-B},
journal = {International Journal on Software Tools for Technology Transfer}
}

@article{transaction-processing,
author = {Mentis, Anakreon and Katsaros, Panagiotis},
title = {Model checking and code generation for transaction processing software},
journal = {Concurrency and Computation: Practice and Experience},
volume = {24},
number = {7},
pages = {711-722},
keywords = {transaction processing, model-driven development, code generation, model-checking},
doi = {https://doi.org/10.1002/cpe.1876},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.1876},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/cpe.1876},
abstract = {SUMMARY In modern transaction processing software, the ACID properties (atomicity, consistency, isolation, durability) are often relaxed, in order to address requirements that arise in computing environments of today. Typical examples are the long-running transactions in mobile computing, in service-oriented architectures and B2B collaborative applications. These new transaction models are collectively known as advanced or extended transactions. Formal specification and reasoning for transaction properties have been limited to proof-theoretic approaches, despite the recent progress in model checking. In this work, we present a model-driven approach for generating a provably correct implementation of the transaction model of interest. The model is specified by state machines for the transaction participants, which are synchronized on a set of events. All possible execution paths of the synchronized state machines are checked for property violations. An implementation for the verified transaction model is then automatically generated. To demonstrate the approach, the specification of nested transactions is verified, because it is the basis for many advanced transaction models. Concurrency and Computation: Practice and Experience. Copyright © 2012 John Wiley \& Sons, Ltd.},
year = {2012}
}

@article{hla-federates,
author = {Adak, Mehmet and Topçu, Okan and Oguztüzün, Halit},
title = {Model-based code generation for HLA federates},
journal = {Software: Practice and Experience},
volume = {40},
number = {2},
pages = {149-175},
keywords = {code generation, High Level Architecture, Federation Architecture Metamodel, Live Sequence Charts, message sequence charts, aspect-oriented programming},
doi = {https://doi.org/10.1002/spe.949},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.949},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.949},
abstract = {Abstract This paper addresses the problem of automated code generation for a High Level Architecture compliant federate application given its behavior model. The behavior model is a part of the architectural model of a federation that the federate can participate in. The federate behavior model is based on Live Sequence Charts, adopted as the behavioral specification formalism in the Federation Architecture Metamodel (FAMM). FAMM serves as a formal language for describing federation architectures. An objective is to help the testing of federation architecture by means of its prototype implementation early in the development lifecycle. A further objective is to help developers construct complete federate applications that are well modularized. The approach to achieve these objectives is aspect-oriented in that the generated code, which handles the federate's interactions with a federation execution, serves as the base code, where the computation logic is to be weaved as an aspect. Copyright © 2009 John Wiley \& Sons, Ltd.},
year = {2010}
}

@article{robot-game,
author = {Rabelo, Ricardo A.C. and Macedo, Hendrik T. and Freire, Eduardo O. and Oliveira, Rodrigo M.},
title = {Automatic Code Generation of SIMUROSOT Game Strategies: An Approach Based on Finite State Machines},
year = {2013},
issue_date = {March 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {38},
number = {2},
issn = {0163-5948},
url = {https://doi-org.ez74.periodicos.capes.gov.br/10.1145/2439976.2439983},
doi = {10.1145/2439976.2439983},
abstract = {Robot soccer is a multidisciplinary research field of growing academic interest. Scientific competitions worldwide have driven major technological advances in the field, since research institutes and universities often enroll their robotic teams and present the developments achieved during the previous year. The FIRA is a leading international organization that promotes such type of competition. One of its various competition categories is that of virtual robots competing in a simulation platform called SIMUROSOT. This 3D simulation platform is available so that researchers and students can develop robot teams and test their performance appropriately and repeatedly.The major problem with the mainstream encoding mechanism used in the preparation of robot teams for SimuroSot is the lack of a formal process to standardize the programming and model the game strategies. Such lack of standardization causes several limitations on the competition as a science promoter, namely: (1) the difficulty of understanding other's code, (2) absence of abstraction for the conceiving of game strategies, (3) need for high programming skills in order to produce effective game strategies and (4) lack of clear separation between robots movimentation primitives and specific application domain concerns - in this case, the soccer domain.This paper proposes a semi-formal specification for the modeling of team game strategies to the FIRA SIMUROSOT category. This specification defines two levels of mapping: (1) mapping of the application domain information - in this case, the soccer competition - to Finite State Machines and (2) mapping of Finite State Machines that represent game strategies of a team to their respective coding in a target programming language, making use of coding standards that ensure the readability and maintainability of the final code. Encodings of game strategies in the programming language Lingo has been provided following the proposal. The error-free execution of such encodings on the simulation platform shows the proposal feasibility.},
journal = {SIGSOFT Softw. Eng. Notes},
month = mar,
pages = {1–8},
numpages = {8},
keywords = {code generation, mapping, FIRA SimuroSot, finite state machines, robot soccer}
}

@software{elixir,
  author = {{Elixir Core Team}},
  title = {Elixir},
  url = {https://elixir-lang.org/},
  version = {v1.14},
  date = {19/10/2022},
}

@article{erlang,
  title={Erlang User’s Guide and Reference Manual Version 3.2},
  author={Armstrong, Joe L and Virding, RH and Williams, Mike C},
  journal={Ellemtel Utvecklings AB, Sweden},
  year={1991}
}

@online{ruby,
  author = {Ruby Community},
  title = {About Ruby},
  year = 2021,
  url = {https://www.ruby-lang.org/en/about/},
  urlaccessdate = {May 15, 2021},
}

@online{mqtt,
  author = {MQTT.org},
  title = {MQTT: The Standard for IoT Messaging},
  year = 2020,
  url = {https://mqtt.org},
  urlaccessdate = {May 15, 2021},
}

@conference{ammann,
  author = {P Ammann and Paul Black and William Majurski},
  title = {Using Model Checking to Generate Tests From Specifications},
  year = {1998},
  month = {1998-11-01},
  publisher = {IEEE International Conference on Formal Engineering Methods, Brisbane, AS},
  language = {en},
}

@inproceedings{test-era,
author = {Marinov, D. and Khurshid, S.},
year = {2001},
month = {12},
pages = {22- 31},
title = {TestEra: a novel framework for automated testing of Java programs},
isbn = {0-7695-1426-X},
doi = {10.1109/ASE.2001.989787}
}

@article{apalache,
author = {Konnov, Igor and Kukovec, Jure and Tran, Thanh-Hai},
title = {TLA+ Model Checking Made Symbolic},
year = {2019},
issue_date = {October 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {OOPSLA},
url = {https://doi.org/10.1145/3360549},
doi = {10.1145/3360549},
abstract = {TLA+ is a language for formal specification of all kinds of computer systems. System designers use this language to specify concurrent, distributed, and fault-tolerant protocols, which are traditionally presented in pseudo-code. TLA+ is extremely concise yet expressive: The language primitives include Booleans, integers, functions, tuples, records, sequences, and sets thereof, which can be also nested. This is probably why the only model checker for TLA+ (called TLC) relies on explicit enumeration of values and states.  In this paper, we present APALACHE -- a first symbolic model checker for TLA+. Like TLC, it assumes that all specification parameters are fixed and all states are finite structures. Unlike TLC, APALACHE translates the underlying transition relation into quantifier-free SMT constraints, which allows us to exploit the power of SMT solvers. Designing this translation is the central challenge that we address in this paper. Our experiments show that APALACHE outperforms TLC on examples with large state spaces.},
journal = {Proc. ACM Program. Lang.},
month = oct,
articleno = {123},
numpages = {30},
keywords = {TLA+, SMT, Model checking}
}

@monography{tcc,
address={Joinville},
author={Gabriela Moreira Mafra},
pages={69},
school={Universidade do Estado de Santa Catarina},
title={Tradução automática de especificação formal modelada em TLA+ para linguagem de programação},
type={Trabalho de Conclusão de Curso},
year={2019}}
@incollection{tlahistory,
    author = {Leslie Lamport},
    title = {The Specification Language TLA+},
    pages = {616--620},
    booktitle = {Logics of specification languages},
    editor = {Dines Bjørner e Martin C. Henson},
    publisher = {Springer},
    year = {2008},
    address = {Berlin},
    isbn = {3540741062},
    url = {http://lamport.azurewebsites.net/pubs/commentary-web.pdf}
}

@incollection{Leonard2008,
    author = {Leonard, Elizabeth I. and Heitmeyer, Constance L.},
    title = {Automatic Program Generation from Formal Specifications using APTS},
    pages = {93--113},
    booktitle = {Automatic Program Development: A Tribute to Robert Paige},
    editor = {Danvy, Olivier and Mairson, Harry and Henglein, Fritz and Pettorossi, Alberto},
    year = {2008},
    publisher = {Springer Netherlands},
    address = {Dordrecht},
    isbn = {9781402065859},
    url = {https://doi.org/10.1007/978-1-4020-6585-9\_10}
}

@inproceedings{tlaps2010,
  TITLE = {{Verifying Safety Properties With the TLA+ Proof System}},
  AUTHOR = {Chaudhuri, Kaustuv and Doligez, Damien and Lamport, Leslie and Merz, Stephan},
  URL = {https://hal.inria.fr/inria-00534821},
  NOTE = {The original publication is available at www.springerlink.com},
  BOOKTITLE = {{Fifth International Joint Conference on Automated Reasoning - IJCAR 2010}},
  ADDRESS = {Edinburgh, United Kingdom},
  EDITOR = {J{\"u}rgen Giesl and Reiner Haehnle},
  PUBLISHER = {{Springer}},
  SERIES = {Lecture Notes in Artificial Intelligence},
  VOLUME = {6173},
  PAGES = {142--148},
  YEAR = {2010},
  MONTH = Jul,
  DOI = {10.1007/978-3-642-14203-1\_12},
  PDF = {https://hal.inria.fr/inria-00534821/file/tlaps.pdf},
  HAL_ID = {inria-00534821},
  HAL_VERSION = {v1},
}

@article{Najafi2013,
  author = {Najafi, Mehrnaz and Haghighi, H},
  year = {2013},
  month = {12},
  pages = {1953-1977},
  title = {A formal mapping from Object-Z specification to C++ code},
  volume = {20},
  journal = {Scientia Iranica}
}

@monography{tcc,
address={Joinville},
author={Gabriela Moreira Mafra},
pages={69},
school={Universidade do Estado de Santa Catarina},
title={Tradução automática de especificação formal modelada em TLA+ para linguagem de programação},
type={Trabalho de Conclusão de Curso},
year={2019}}

@inproceedings{rushby2005automated,
  title={Automated test generation and verified software},
  author={Rushby, John},
  booktitle={Working Conference on Verified Software: Theories, Tools, and Experiments},
  pages={161--172},
  year={2005},
  organization={Springer}
}

@inproceedings{lamari2007towards,
  title={Towards an automated test generation for the verification of model transformations},
  author={Lamari, Maher},
  booktitle={Proceedings of the 2007 ACM symposium on Applied computing},
  pages={998--1005},
  year={2007}
}

@article{enoiu2016automated,
  title={Automated test generation using model checking: an industrial evaluation},
  author={Enoiu, Eduard P and {\v{C}}au{\v{s}}evi{\'c}, Adnan and Ostrand, Thomas J and Weyuker, Elaine J and Sundmark, Daniel and Pettersson, Paul},
  journal={International Journal on Software Tools for Technology Transfer},
  volume={18},
  number={3},
  pages={335--353},
  year={2016},
  publisher={Springer}
}

@mastersthesis{johnsson2017extensible,
  title={An Extensible HTTP Client Library for Elixir: Verified with Property Based Random Testing},
  author={Johnsson, Axel},
  year={2017},
  school={University of Gothenburg},
  url={https://hdl.handle.net/20.500.12380/253273}
}

@online{kayfabe,
  author = {Star Dorminey},
  title = {Kayfabe: Model-Based Program Testing with TLA+/TLC},
  year = 2020,
  url = {https://conf.tlapl.us/2020/11-Star_Dorminey-Kayfabe_Model_based_program_testing_with_TLC.pdf},
  urlaccessdate = {02 jul. 2021}
}

@online{apalache-tests,
  author = {Andrey Kuprianov, Igor Konnov},
  title = {Model-based testing with TLA+ and Apalache},
  year = 2020,
  url = {http://conf.tlapl.us/2020/09-Kuprianov_and_Konnov-Model-based_testing_with_TLA_+_and_Apalache.pdf},
  urlaccessdate = {02 jul. 2021}
}

@book{principles-of-model-checking,
  author = {Baier, Christel and Katoen, Joost-Pieter},
  year = {2008},
  month = {01},
  pages = {},
  numpages = {984},
  publisher = {The MIT Press},
  address = {Cambridge, MA},
  title = {Principles of Model Checking},
  isbn = {978-0-262-02649-9},
  url = {https://www.academia.edu/2744138/Principles_of_model_checking},
  keywords= {main}
}

@online{tla2json,
  author = {David Barri},
  title = {tla2json: Convert TLA+ output to JSON},
  year = 2021,
  url = {https://github.com/japgolly/tla2json},
  urlaccessdate = {02 jul. 2021}
}

@online{exunit,
  author = {The Elixir Team},
  title = {ExUnit - Unit testing framework for Elixir},
  year = 2021,
  url = {https://hexdocs.pm/ex_unit/ExUnit.html},
  urlaccessdate = {02 jul. 2021}
}

@inproceedings{PGo,
  title={PGo : Corresponding a high-level formal specification with its implementation},
  author={Brandon Zhang},
  year={2017}
}

@inproceedings{ewd840,
  TITLE = {Derivation of a Termination Detection Algorithm for Distributed Computations},
  AUTHOR = {Edsger W. Dijkstra and W.H.J. Feijen and A.J.M. {van Gasteren}},
  BOOKTITLE = {Information Processing Letters},
  VOLUME = {14},
  PAGES = {217--219},
  YEAR = {1983},
  PDF = {https://www.cs.utexas.edu/users/EWD/ewd08xx/EWD840.PDF}
}

@online{erc20attack,
  author = {Mikhail Vladimirov, Dmitry Khovratovich},
  title = {ERC20 API: An Attack Vector on the Approve/TransferFrom Methods},
  year = 2016,
  url = {https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/},
  urlaccessdate = {08 aug. 2022}
}

@book{understanding-formal-methods,
    author = {Monin, Jean Francois and Hinchey, Michael G.},
    title = {Understanding Formal Methods},
    year = {2001},
    isbn = {1852332476},
    numpages = {276},
    publisher = {Springer-Verlag},
    address = {Berlin, Heidelberg},
    url = {https://www.researchgate.net/publication/279352680_Understanding_Formal_Methods},
    keywords = {main}
}


@unpublished{a-science-of-concurrent-programs,
author = {Leslie Lamport},
year = {2024},
month = {01},
pages = {},
title = {A Science of Concurrent Programs},
url = {https://lamport.azurewebsites.net/tla/science.pdf},
urlaccessdate = {24 fev. 2024},
keywords = {}
}

@online{apalache-lang-manual,
  author = {Igor Konnov and Jure Kukovec},
  title = {TLA+ Language Reference Manual},
  year = 2022,
  url = {https://apalache.informal.systems/docs/lang/index.html#tla-language-reference-manual-},
  urlaccessdate = {24 fev. 2024},
  keywords = {}
}

@article{propositions-as-types,
  author = {Wadler, Philip},
  title = {Propositions as types},
  year = {2015},
  issue_date = {December 2015},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {58},
  number = {12},
  issn = {0001-0782},
  url = {https://doi.org/10.1145/2699407},
  doi = {10.1145/2699407},
  abstract = {Connecting mathematical logic and computation, it ensures that some aspects of programming are absolute.},
  journal = {Commun. ACM},
  month = {nov},
  pages = {75–84},
  numpages = {10}
}

@online{ufabc-tipo-funcao,
  author = {Fabricio Olivetti de França},
  title = {Tipo Função},
  year = 2019,
  url = {https://haskell.pesquisa.ufabc.edu.br/teoria-das-categorias/09-tipofuncao/},
  urlaccessdate = {24 fev. 2024},
  keywords = {}
}

@online{igor-memory,
  author = {Igor Konnov},
  title = {You should not care about memory in protocol specifications},
  year = 2024,
  url = {https://konnov.github.io/protocols-made-fun/quint/2024/01/14/maps.html},
  urlaccessdate = {24 fev. 2024},
  keywords = {}
}

@online{ltl-ctl-lecture-notes,
  author = {Dhananjay Raju},
  title = {LTL and CTL - Lecture Notes by Dhananjay Raju},
  year = 2014,
  url = {https://www.cs.utexas.edu/~draju/Verification/class2.pdf},
  urlaccessdate = {04 mar. 2024},
  keywords = {}
}

@online{tevfik-lecture,
  author = {Tevfik Bultan},
  title = {CS 267: Automated Verification - Lecture 2},
  year = 2023,
  url = {https://sites.cs.ucsb.edu/~bultan/courses/267/lectures/l2.pdf},
  urlaccessdate = {04 mar. 2024},
  keywords = {}
}

@online{aws-2014,
  author = {Chris Newcombe, Tim Rath, Fan Zhang, Bogdan Munteanu, Marc Brooker, Michael Deardeuff},
  title = {Use of Formal Methods at Amazon Web Services},
  year = 2014,
  url = {https://lamport.azurewebsites.net/tla/formal-methods-amazon.pdf},
}

@online{hillel-using-fm,
  author = {Hillel Wayne},
  title = {USING FORMAL METHODS AT WORK},
  year = 2019,
  url = {https://www.hillelwayne.com/post/using-formal-methods/},
}

@online{hillel-fm-business,
  author = {Hillel Wayne},
  title = {THE BUSINESS CASE FOR FORMAL METHODS},
  year = 2020,
  url = {https://www.hillelwayne.com/post/business-case-formal-methods/},
}

@online{hillel-espark,
  author = {Hillel Wayne},
  title = {Formal Methods in Practice: Using TLA+ at eSpark Learning},
  year = 2017,
  url = {https://medium.com/espark-engineering-blog/formal-methods-in-practice-8f20d72bce4f},
}

@book{rtos,
author = {Verhulst, Eric and Boute, Raymond and Faria, José and Sputh, Bernhard and Mezhuyev, Vitaliy},
year = {2011},
month = {01},
pages = {},
title = {Formal Development of a Network-Centric RTOS},
isbn = {978-1-4419-9735-7},
doi = {10.1007/978-1-4419-9736-4}
}

@online{parallel-commits,
  author = {Nathan VanBenschoten},
  title = {Parallel Commits: An atomic commit protocol for globally distributed transactions},
  year = 2019,
  url = {https://www.cockroachlabs.com/blog/parallel-commits/},
}

@online{rackspace,
  author = {Jay Parlar},
  title = {Finding bugs without running or even looking at code},
  year = 2019,
  url = {https://www.youtube.com/watch?v=FvNRlE4E9QQ&ab_channel=StrangeLoopConference},
}

@online{elastic-issue,
  author = {Kyle Howell},
  title = {Possible to index duplicate documents with same id and routing id},
  year = 2018,
  url = {https://github.com/elastic/elasticsearch/issues/31976#ISSUECOMMENT-404722753},
}

@article{lamport-blueprint,
author = {Lamport, Leslie},
title = {Who builds a house without drawing blueprints?},
year = {2015},
issue_date = {April 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {58},
number = {4},
issn = {0001-0782},
url = {https://doi.org/10.1145/2736348},
doi = {10.1145/2736348},
abstract = {Finding a better solution by thinking about the problem and its solution, rather than just thinking about the code.},
journal = {Commun. ACM},
month = {mar},
pages = {38–41},
numpages = {4}
}

@online{katoen-lecture,
  author={Joost-Pieter Katoen},
  title={Introduction to Model Checking},
  year=2013,
  url={https://moves.rwth-aachen.de/wp-content/uploads/SS16/mc/lec1.pdf}
}

@online{whitehouse-doc,
  author={The White House},
  title={BACK TO THE BUILDING BLOCKS: A PATH TOWARD SECURE AND MEASURABLE SOFTWARE},
  year=2024,
  url={https://www.whitehouse.gov/wp-content/uploads/2024/02/Final-ONCD-Technical-Report.pdf}
}

@online{tictactoe-blogpost,
  author = {Elliot Swart},
  title = {Introduction to Pragmatic Formal Modeling},
  year = 2022,
  url = {https://elliotswart.github.io/pragmaticformalmodeling/},
}

@online{chris-colohan-video,
  author = {Chris Colohan},
  title = {L6: Byzantine Fault Tolerance},
  year = 2016,
  url = {https://www.youtube.com/watch?v=_e4wNoTV3Gw},
  urlaccessdate = {05 mai. 2024},
}

@online{two-generals-blogpost,
  author = {Seth Archer Brown},
  title = {The Two Generals Problem},
  year = 2022,
  url = {https://linuxblog.io/the-two-generals-problem/},
  urlaccessdate = {05 mai. 2024},
}

@article{lamport-byzantine,
author = {Lamport, Leslie and Shostak, Robert and Pease, Marshall},
title = {The Byzantine Generals Problem},
year = {1982},
month = {July},
abstract = {I have long felt that, because it was posed as a cute problem about philosophers seated around a table, Dijkstra's dining philosopher's problem received much more attention than it deserves. (For example, it has probably received more attention in the theory community than the readers/writers problem, which illustrates the same principles and has much more practical importance.) I believed that the problem introduced in [41] was very important and deserved the attention of computer scientists. The popularity of the dining philosophers problem taught me that the best way to attract attention to a problem is to present it in terms of a story.

There is a problem in distributed computing that is sometimes called the Chinese Generals Problem, in which two generals have to come to a common agreement on whether to attack or retreat, but can communicate only by sending messengers who might never arrive. I stole the idea of the generals and posed the problem in terms of a group of generals, some of whom may be traitors, who have to reach a common decision. I wanted to assign the generals a nationality that would not offend any readers. At the time, Albania was a completely closed society, and I felt it unlikely that there would be any Albanians around to object, so the original title of this paper was The Albanian Generals Problem. Jack Goldberg was smart enough to realize that there were Albanians in the world outside Albania, and Albania might not always be a black hole, so he suggested that I find another name. The obviously more appropriate Byzantine generals then occurred to me.

The main reason for writing this paper was to assign the new name to the problem. But a new paper needed new results as well. I came up with a simpler way to describe the general 3n+1-processor algorithm. (Shostak's 4-processor algorithm was subtle but easy to understand; Pease's generalization was a remarkable tour de force.) We also added a generalization to networks that were not completely connected. (I don't remember whose work that was.) I also added some discussion of practical implementation details.},
url = {https://www.microsoft.com/en-us/research/publication/byzantine-generals-problem/},
pages = {382-401},
journal = {ACM Transactions on Programming Languages and Systems},
}

@online{consensus-heidi-howard,
  author = {Heidi Howard},
  title = {Consensus & Organising Coffee - Computerphile},
  year = 2016,
  url = {https://www.youtube.com/watch?v=jn3DBzr--Ok},
  urlaccessdate = {05 mai. 2024},
}
