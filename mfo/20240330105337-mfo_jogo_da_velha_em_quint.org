:PROPERTIES:
:ID:       2e70fcd6-d025-4432-93b0-146a29ad9a00
:END:
#+title:  Jogo da Velha em Quint
#+EMAIL:     gabrielamoreira05@gmail.com
#+DATE:      01 de abril de 2024
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+BEAMER_FRAME_LEVEL: 2
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [smaller]
#+BEAMER_THEME: udesc
#+BEAMER_HEADER: \input{header.tex} \subtitle{Aula para disciplina de Métodos Formais} \institute{Departamento de Ciência da Computação - DCC\\Universidade do Estado de Santa Catarina - UDESC}
#+LATEX_COMPILER: pdflatex
#+bibliography: references.bib
#+cite_export: csl ~/MEGA/csl/associacao-brasileira-de-normas-tecnicas.csl
#+PROPERTY: header-args :tangle tictactoe.qnt
#+HTML: <a href="https://bugarela.com/mfo/slides/20240330105337-mfo_jogo_da_velha_em_quint.pdf">Slides</a><br />
#+beamer: \begin{frame}{Conteúdo}
#+TOC: headlines 3
#+beamer: \end{frame}

* Jogando de qualquer jeito
** Jogo da Velha
Todos conhecem jogo da velha?
#+BEAMER: \medskip
#+BEAMER: \pause
PS: a partir de hoje, não vou mais traduzir as especificações para português
- Acho legal usar português no início para que fique claro o que são =keywords= (sempre em inglês) e o que podemos escolher o nome (nesses casos, em português)
- A partir daqui, vou usar os exemplos originais, em inglês.

** Tipos e variáveis
Definimos os seguintes tipos
#+begin_src quint
type Player = X | O
type Square = Occupied(Player) | Empty
#+end_src

E as seguintes variáveis
#+begin_src quint
/// A 3x3 tic-tac-toe board
var board: int -> int -> Square

/// Who goes next
var nextTurn: Player
#+end_src

** Definições sobre coordenadas

#+begin_src quint
pure val boardCoordinates = tuples(1.to(3), 1.to(3))

def square(coordinate: (int, int)): Square =
  board.get(coordinate._1).get(coordinate._2)

def hasPlayer(coordinate, player) =
  match square(coordinate) {
    | Empty       => false
    | Occupied(p) => player == p
  }

def isEmpty(coordinate) =
  match square(coordinate) {
    | Empty  => true
    | _      => false
  }
#+end_src


** Definições sobre o tabuleiro
#+begin_src quint
val boardEmpty = boardCoordinates.forall(isEmpty)

val boardFull = not(boardCoordinates.exists(isEmpty))
#+end_src

** Definindo "ganhar" - coordenadas
- Como o tabuleiro é sempre 3x3, é mais fácil listar todas as combinações de coordenadas que levam a uma vitória do que implementar os cálculos.
- Usamos =Set= - não precisamos de ordem nem de repetição, logo não devemos usar =List=.
#+begin_src quint
pure val winningPatterns = Set(
  // Horizonal wins
  Set((1,1), (1,2), (1,3)),
  Set((2,1), (2,2), (2,3)),
  Set((3,1), (3,2), (3,3)),
  // Vertical wins
  Set((1,1), (2,1), (3,1)),
  Set((1,2), (2,2), (3,2)),
  Set((1,3), (2,3), (3,3)),
  // Diagonal wins
  Set((1,1), (2,2), (3,3)),
  Set((3,1), (2,2), (1,3))
)
#+end_src

** Definindo "ganhar" - operador won
Usamos as definições para =winningPaterns= e =hasPlayer= para determinar se um jogador venceu.
#+begin_src quint
def won(player) = winningPatterns.exists(pattern =>
  pattern.forall(coordinate => hasPlayer(coordinate, player))
)
#+end_src

#+BEAMER: \pause
Com essa definição e =boardFull=, podemos determinar se um jogo já acabou.
#+begin_src quint
val gameOver = won(X) or won(O) or boardFull
#+end_src
- Reparem que o operador =or= pode ser usado na forma infixa (no meio dos argumentos)

** Ações - Move
Um dado jogador faz uma jogada (um /move/) em uma dada coordenada
  - Determinístico
#+begin_src quint
action Move(player, coordinate) = all {
  isEmpty(coordinate),
  board' = board.setBy(
    coordinate._1,
    row => row.set(coordinate._2, Occupied(player))
  ),
}
#+end_src
- Qual é a pré-condição pra essa ação?
  #+BEAMER: \pause
  - A pré-condição para essa ação é que a coordenada esteja vazia
#+BEAMER: \pause
- =setBy= é bem útil pra atualizar mapas aninhados (como nesse caso, =int -> int -> Square=)

** Ações - MoveToEmpty
Um dado jogador faz uma jogada em *alguma* coordenada
  - Não-determinístico
#+begin_src quint
action MoveToEmpty(player) = all {
  not(gameOver),
  nondet coordinate = boardCoordinates.filter(isEmpty).oneOf()
  Move(player, coordinate)
}
#+end_src
- Qual é a pré-condição pra essa ação?
  #+BEAMER: \pause
  - A pré-condição para essa ação é que o jogo ainda não tenha acabado

** Ações - MoveO e MoveX
- Por enquanto, as ações =MoveO= e =MoveX= são bem parecidas porque ambos jogam "de qualquer jeito". Não vamos parametrizar elas porque depois vamos mudar somente o comportamento de =X=.

*** Move0
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+begin_src quint
action MoveO = all {
  nextTurn == O,
  MoveToEmpty(O),
  nextTurn' = X,
}
#+end_src

*** MoveX
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+begin_src quint
action MoveX = all {
  nextTurn == X,
  MoveToEmpty(X),
  nextTurn' = O,
}
#+end_src

***                                                       :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
- Qual é a pré-condição pra essas ações?
  #+BEAMER: \pause
  - Para ambas, a pré-condição é que seja o turno do jogador a fazer a jogada
    - Implicitamente, também temos a pré-condição de =MoveToEmpty= empregada nessa empregada nessa ação

** Estado inicial
#+begin_src quint
action init = all {
  // X always goes first
  nextTurn' = X,
  // Every space in the board starts blank
  board' = 1.to(3).mapBy(_ => 1.to(3).mapBy(_ => Empty)),
}
#+end_src

** Transições
#+begin_src quint
action step = any {
  MoveX,
  MoveO,
  // If the game is over, we don't need to do anything
  all { gameOver, board' = board, nextTurn' = nextTurn },
}
#+end_src

** Rodando jogos aleatórios com o simulador
#+begin_src sh
quint run tictactoe.qnt --max-samples=1
#+end_src

#+BEAMER: \pause
#+begin_src quint
...

[State 20]
{
  board:
    Map(
      1 -> Map(1 -> Occupied(O), 2 -> Occupied(X), 3 -> Occupied(X)),
      2 -> Map(1 -> Occupied(X), 2 -> Occupied(O), 3 -> Occupied(O)),
      3 -> Map(1 -> Occupied(X), 2 -> Occupied(O), 3 -> Occupied(X))
    ),
  nextTurn: O
}
#+end_src

** Usando uma invariante para procurar jogos que "dão velha"
"Dar velha", ou /stalemate/, quer dizer que o tabuleiro está cheio e ninguém ganhou. É um empate.
#+begin_src quint
val stalemate = boardFull and not(won(X)) and not(won(O))

val NotStalemate = not(stalemate)
#+end_src

#+BEAMER: \pause
Essa invariante é fácil de quebrar, podemos usar o simulador ao invés do /model checker/ tranquilamente:
#+begin_src sh
quint run tictactoe.qnt --invariant=NotStalemate
#+end_src

#+BEAMER: \pause
Mas podemos usar o /model checker/ também! Ele vai demorar mais, porque faz BFS e vai levar um tempo para chegar em jogos com 9 jogadas feitas, que são necessárias para um tabuleiro completo.
#+begin_src sh
quint verify tictactoe.qnt --invariant=NotStalemate
#+end_src

** Contraexemplo
#+begin_src quint
[State 9]
{
  board:
    Map(
      1 -> Map(1 -> Occupied(O), 2 -> Occupied(X), 3 -> Occupied(O)),
      2 -> Map(1 -> Occupied(O), 2 -> Occupied(X), 3 -> Occupied(X)),
      3 -> Map(1 -> Occupied(X), 2 -> Occupied(O), 3 -> Occupied(X))
    ),
  nextTurn: O
}
#+end_src

* Jogando pra ganhar
** Jogando pra ganhar
- Jogo da velha é um jogo bem simples e fácil
- Ainda quando crianças, enjoamos do jogo, porque percebemos que "sempre dá velha"
- Hipótese: Se um jogador seguir uma certa estratégia, ele nunca perde.
  - Consequência: Se os dois jogadores seguirem essa estratégia, nenhum dos dois perde - "sempre dá velha"

#+BEAMER: \medskip
#+BEAMER: \pause
*Estratégia*:
- A primeira jogada é sempre nos cantos
- As outras jogadas fazem a primeira jogada possível nessa lista de prioridade:
  - Ganhar
  - Bloquear
  - Jogar no centro
  - Preparar uma vitória (preenchendo 2 de 3 quadrados numa fila/coluna/diagonal)
  - Jogada qualquer

#+BEAMER: \medskip
#+BEAMER: \pause
Vamos implementar essa estratégia para o jogador X, enquanto o jogador O continua jogando "de qualquer jeito".

** Começando com os cantos
#+begin_src quint
pure val corners = Set(
  (1,1),
  (3,1),
  (1,3),
  (3,3)
)

action StartInCorner =
  nondet corner = oneOf(corners)
  Move(X, corner)
#+end_src

** Condições para as jogadas
Precisamos definir as condições que determinam se cada uma das jogadas na lista de prioridade pode ser feita.
  - Ganhar
  - Bloquear
  - Jogar no centro
  - Preparar uma vitória

#+ATTR_LATEX: :options xleftmargin=-0.9cm,linewidth=12.5cm
#+begin_src quint
val canWin = winningPatterns.exists(canWinWithPattern)
val canBlock = winningPatterns.exists(canBlockWithPattern)
val canTakeCenter = isEmpty((2,2))
val canSetupWin = winningPatterns.exists(canSetupWinWithPattern)
#+end_src

(=canWinWithPattern=, =canBlockWithPattern= e =canSetupWintWithPattern= a seguir)

** Condições para as jogadas - definições auxiliares

Dado um /winning pattern/, podemos *ganhar* com aquele /pattern/ sse duas das coordenadas tiverem =X= e a outra estiver vazia. Lembrando que a ordem não importa.
#+begin_src quint
def canWinWithPattern(pattern) = and {
  pattern.filter(coordinate => coordinate.hasPlayer(X)).size() == 2,
  pattern.filter(coordinate => coordinate.isEmpty()).size() == 1,
}
#+end_src

#+BEAMER: \pause
Dado um /winning pattern/, podemos *bloquear* com aquele /pattern/ sse duas das coordenadas tiverem =O= e a outra estiver vazia.
#+begin_src quint
def canBlockWithPattern(pattern) = and {
  pattern.filter(coordinate => coordinate.hasPlayer(O)).size() == 2,
  pattern.filter(coordinate => coordinate.isEmpty()).size() == 1,
}
#+end_src

Dado um /winning pattern/, podemos *preparar uma vitória* com aquele /pattern/ sse uma das coordenadas tiver =X= e as outras duas estiverem vazias.
#+begin_src quint
def canSetupWinWithPattern(pattern) = and {
  pattern.filter(coordinate => coordinate.hasPlayer(X)).size() == 1,
  pattern.filter(coordinate => coordinate.isEmpty()).size() == 2,
}
#+end_src

** Ações - Win
#+begin_src quint
action Win = all {
  canWin,
  nondet pattern = winningPatterns.filter(canWinWithPattern).oneOf()
  nondet coordinate = pattern.filter(isEmpty).oneOf()
  Move(X, coordinate),
}
#+end_src
- Qual é a pré-condição pra essa ação?
  #+BEAMER: \pause
  - =canWin=, lembrando que =canWin= é definido por:
  #+begin_src quint
  val canWin = winningPatterns.exists(canWinWithPattern)
  #+end_src
  #+BEAMER: \pause
  - Isso é importante para garantir que nunca estamos chamando =oneOf= em um set vazio.

** Ações - Block
#+begin_src quint
action Block = all {
  canBlock,
  nondet pattern = winningPatterns.filter(canBlockWithPattern).oneOf()
  nondet coordinate = pattern.filter(isEmpty).oneOf()
  Move(X, coordinate),
}
#+end_src

#+BEAMER: \pause
Observem o uso de =oneOf= para selecionar a coordenada aqui. Nesses casos (tanto =Win= quanto =Block=), essa seleção é *determinística*, porque sabemos que sempre haverá uma única coordenada vazia nesses /patterns/. Contudo, o Quint não sabe disso.
#+BEAMER: \pause
- Não existe algo como "pegar o primeiro elemento do set" - porque sets não são ordenados!

** Ações - TakeCenter e SetupWin
#+begin_src quint
action TakeCenter = Move(X, (2, 2))

action SetupWin = all {
  nondet pattern = winningPatterns.filter(canSetupWinWithPattern).oneOf()
  nondet coordinate = pattern.filter(isEmpty).oneOf()
  Move(X, coordinate),
}
#+end_src


** Ações - alterando MoveX
Temos todas as ações para a estratégia definidas, agora basta definir um novo =MoveX= que chama essas ações conforme a prioridade estabelecida.
#+BEAMER: \pause
#+begin_src quint
action MoveX = all {
  nextTurn == X,
  if (boardEmpty) StartInCorner else
  if (canWin) Win else
  if (canBlock) Block else
  if (canTakeCenter) TakeCenter else
  if (canSetupWin) SetupWin else
  MoveToEmpty(X),
  nextTurn' = O,
}
#+end_src

** Invariantes
Com isso, temos nosso modelo. Agora, vamos definir algumas invariantes para o uso dessa estratégia.
#+begin_src quint
  /// X has not won. This does not hold, as X wins most of the times.
  val XHasNotWon = not(won(X))

  /// O has not won. This should hold, as O can only achieve a draw.
  val OHasNotWon = not(won(O))
#+end_src

** Fórmulas temporais
#+begin_src quint
/// This is not always true, as if O picks the right moves, the game will
/// result in a stalemate.
temporal XMustEventuallyWin = eventually(won(X))
#+end_src

- Infelizmente, a implementação de propriedades temporais no Apalache ainda é bem rudimentar.
- Podemos traduzir Quint pra TLA+ e usar o TLC para checar essa propriedade
  - Esse processo ainda tem alguns problemas, então vamos deixar quieto por enquanto
- O simulador não suporta fórmulas temporais
  - Poderia suportar com aquela implementação que fizemos em C++/Haskell na disciplina
- Vamos ver essa mesma especificação em TLA+, e aí podemos explorar melhor as propriedades temporais

** Tarefa de casa
 Tarefa para a próxima aula: ler o blogpost [[https://elliotswart.github.io/pragmaticformalmodeling/]]
   - Serve como uma revisão de alguns conteúdos da matéria até agora
   - Explica a modelagem do jogo da velha em TLA+, que veremos na próxima aula
   - Também conta como referência pra essa aula :)

** FIM
#+BEAMER: \maketitle
