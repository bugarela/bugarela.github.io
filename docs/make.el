(dolist (d '("docs" "images"))
  (unless (file-exists-p d)
    (make-directory d)))

(org-babel-tangle)
;; (org-publish-remove-all-timestamps)
(setq org-html-html5-fancy t)
(setq org-html-htmlize-output-type 'css)
(setq org-html-htmlize-font-prefix "org-")
(org-html-stable-ids-add)
(setq org-html-stable-ids t)

(defvar personal-site-full-name "Gabriela Moreira"
  "A string with your full name.")

(defvar personal-site-position "Formal methods & programming languages research engineer"
  "A string with your full position or job appointment.")

(defvar personal-site-github "bugarela"
  "If not NIL, your GitHub id.")

(defvar personal-site-google-scholar-id nil
  "If not NIL, your Google Scholar id.")

(defvar personal-site-email nil
  "If not NIL, your Google Scholar id.")

(defvar personal-site-linkedin "bugarela"
  "If not NIL, your Linkedin id.")

(defvar personal-site-organization nil
  "If not NIL, a string with the name of your organization, without the @ sign.")

(defvar personal-site-organization-url nil
  "If not NIL, the URL of your organization.")

(defvar personal-site-twitter "bugarela"
  "If not NIL, a string with a Twitter handle, without the @ sign.")

(setq org-publish-project-alist
      `(("lectures-mfo"
         :base-directory ,(expand-file-name "./mfo")
         :root-directory ,(expand-file-name "./")
         ;; :recursive t
         :base-extension "org"
         :publishing-directory ,(expand-file-name "./docs/mfo")
         ;; Exclude the blog archive index autogenerated below
         ;; Note that the regexp is relative to :base-directory
         :exclude "^index.org"
         :section-numbers nil
         :language "pt_BR"
         :with-toc t
         :with-date t
         :html-template ,(ox-thtml-load-template "templates/mfo.html")
         :publishing-function ox-thtml-publish
         ;; :auto-sitemap t
         ;; :sitemap-style tree
         ;; :sitemap-title ""
         ;; :sitemap-filename "sitemap.inc"
         ;; :sitemap-sort-files anti-chronologically
         ;; :sitemap-function bugarela/org-publish-sitemap
         )
        ("homepage-mfo"
         :base-directory ,(expand-file-name "./mfo")
         :root-directory ,(expand-file-name "./")
         ;; :recursive t
         :base-extension "org"
         :publishing-directory ,(expand-file-name "./docs/mfo")
         ;; Exclude the blog archive index autogenerated below
         ;; Note that the regexp is relative to :base-directory
         ;; :exclude "^index.org"
         :section-numbers nil
         :language "pt_BR"
         :with-toc t
         :with-date t
         :html-template ,(ox-thtml-load-template "templates/mfo.html")
         :publishing-function ox-thtml-publish
         )
        ("homepage-pages"
         :base-directory ,(expand-file-name "./")
         ;; :recursive t
         :base-extension "org"
         :include ("sblp2024/index.org")
         :exclude ,(regexp-opt '("mfo"))
         :publishing-directory ,(expand-file-name "./docs")
         :section-numbers nil
         :language "pt_BR"
         :with-toc nil
         :with-date nil
         :html-template ,(ox-thtml-load-template "templates/index.html")
         :publishing-function ox-thtml-publish
         )
        ("homepage-assets"
         :base-directory "./"
         :publishing-directory "./docs"
         :recursive t
         :language "pt_BR"
         :exclude "^\\(docs\\|templates\\).*"
         :base-extension "\\(ico\\|jpg\\|gif\\|png\\|css\\|js\\|el\\|nb\\|ipynb\\|pdf\\|xml\\|zip\\|ttf\\|woff2\\)"
         :publishing-function org-publish-attachment)
        ("homepage" :components ("lectures-mfo" "homepage-mfo" "homepage-pages"
                                 "homepage-assets"))
        ))

(let ((enable-local-variables :all)
      (find-file-hook nil))
  (org-publish "homepage" t))

(ox-thtml-create-sitemap-xml "docs/sitemap.xml" "docs" ox-thtml-site-url)
(require 'dom) ; For parsing HTML
(require 'json) ; For generating JSON

(defun clean-text (text)
  "Remove extra whitespace and newlines from TEXT."
  text)
;; (replace-regexp-in-string "[ \t\n]+" " " text))

(defun extract-title-and-content (file)
  "Extract the title and content from an HTML file."
  (with-temp-buffer
    (insert-file-contents file)
    (let* ((dom (libxml-parse-html-region (point-min) (point-max))))
      (message "Processing file: %s" file) ; Debug: Print the file being processed
      (let ((title (clean-text (dom-texts (dom-by-tag dom 'title) " "))) ; Concatenate title text
            (content (clean-text (dom-texts (dom-by-tag dom 'body) " ")))) ; Concatenate body text
        (message "Title: %s" title) ; Debug: Print the title
        `((title . ,title)
          (content . ,content)
          (url . ,(file-name-nondirectory file)))))))

(defun generate-search-index (html-folder output-file)
  "Generate a search index for all HTML files in HTML-FOLDER and save it to OUTPUT-FILE."
  (let ((files (directory-files html-folder t "\\.html$"))
        (index '()))
    (message "Found %d HTML files in folder: %s" (length files) html-folder) ; Debug: Print number of files
    (dolist (file files)
      (message "Extracting data from file: %s" file) ; Debug: Print the file being processed
      (let ((data (extract-title-and-content file)))
        (push data index)))
    (with-temp-file output-file
      (insert (json-encode index)))
    (message "Search index saved to: %s" output-file))) ; Debug: Confirm where the index is saved

;; Example usage:
(generate-search-index "./docs/mfo" "./docs/search-index.json")
