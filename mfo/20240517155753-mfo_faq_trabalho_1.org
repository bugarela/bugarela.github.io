:PROPERTIES:
:ID:       64460010-fda5-4609-9da9-41715e7a0a5a
:END:
#+title:     FAQ Trabalho 1
#+EMAIL:     gabrielamoreira05@gmail.com
#+DATE:      02 de outubro de 2024
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:nil \n:t @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+bibliography: references.bib
#+cite_export: csl ~/MEGA/csl/associacao-brasileira-de-normas-tecnicas.csl
#+TOC: headlines 3

* Quint
** Erro no Set(1.to(20))

O próprio operador =to= já constrói um conjunto, assim você está fazendo um conjunto de conjuntos. O certo é =1.to(20)=.

** Erros do tipo "Name _ not found" sendo que o nome está definido logo acima

Cuidado com o escopo dos nomes. A vírgula (,) separa escopos no Quint. Veja o exemplo:
#+begin_src quint
action Foo == all {
  val a = 1,
  val b = a, // Erro aqui, "a" não está no escopo e não será encontrado
  variavel' = a + b // Erro: nem "a" nem "b" serão encontrados
}
#+end_src

Para corrigir, basta remover as vírgulas:
#+begin_src quint
action Foo == all {
  val a = 1
  val b = a
  variavel' = a + b
}
#+end_src

Vamos ver um caso com mais de uma atualização de variável:
#+begin_src quint
action Foo == all {
  val a = 1
  val b = 2
  variavel' = a + b,
  val c = 3
  outra' = c,
}
#+end_src

A divisão de escopo fica assim:
#+begin_src quint
action Foo == all {
  // --- escopo 1 ----------
  val a = 1
  val b = 2
  variavel' = a + b,
  // --- fim escopo 1 ------
  // --- escopo 2 ----------
  val c = 3
  outra' = c,
  // --- fim escopo 2 ------
}
#+end_src

Se precisarmos de =a=, =b= e =c= pra ambas atualizações, basta usar um =all= dentro do escopo delas:
#+begin_src quint
action Foo == {
  val a = 1
  val b = 2
  val c = 3
  all {
    variavel' = a + b + c,
    outra' = a * b * c,
  }
}
#+end_src

* TLA+
Não recebi nenhuma dúvida de TLA+ ainda.

* Geral
** Erro ao remover o blind após o ataque

Lembre-se que não é possível atualizar a mesma variável mais de uma vez na mesma ação/transição. É necessário que as duas modificações (aplicação do dano de ataque e remoção do blind) sejam feitos na mesma atualização da variável de estado. É possível encadear os =setBy= (Quint) ou =EXCEPT= (TLA+) para isso:
Quint:
#+begin_src quint
creatures.setBy(<dar dano no alvo>).setBy(<remover blind do atacante>)
#+end_src

TLA+:
#+begin_src tla
[creatures EXCEPT ![alvo] = dano(@), ![atacante] = remocao(@)]
#+end_src

De forma mais geral, precisamos [[https://bugarela.com/mfo/20240424144115-mfo_dicas_trabalho_1.html#composi-o-2][compor]] as duas atualizações, salvando o resultado da primeira em algum valor temporário e usando esse valor como base para computar o resultado da segunda, que então pode ser salvo na variável de estado (=creatures=, no exemplo acima).

** Como fazer pra rodar um dado por criatura?
Não é possível, nesse caso, escrever algo do tipo "para cada criatura, rode um dado".
- O Apalache tem uma extensão para TLA+ que possibilitaria isso ([[https://apalache-mc.org/docs/lang/apalache-operators.html?highlight=generator#value-generators][Gen]])
  - Não conheço nada semelhante no TLC.
  - Ainda não temos um equivalente no Quint, mas isso está em discussão e deve ser implementado logo.
Para o trabalho, podem fazer da forma repetitiva e declarar um valor para cada dado de cada criatura.
